{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15","program":"C:\\Users\\isaac\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\bin\\rls.exe","arguments":["--crate-name","chrono","C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=449254bd8e013edd","-C","extra-filename=-449254bd8e013edd","--out-dir","c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps","-L","dependency=c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps","--extern","num_integer=c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps\\libnum_integer-78b51e1319567e82.rmeta","--extern","num_traits=c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps\\libnum_traits-7c92f9311f4bc8c2.rmeta","--extern","time=c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps\\libtime-c6f30b84b927bad3.rmeta","--cap-lints","allow","--error-format=json","--sysroot","C:\\Users\\isaac\\.rustup/toolchains/stable-x86_64-pc-windows-msvc"],"output":"c:\\Users\\isaac\\Documents\\Rust Projects\\input_test\\target\\rls\\debug\\deps\\libchrono-449254bd8e013edd.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[11010193226270036182,13879545242874016426]},"crate_root":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src","external_crates":[{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":1,"id":{"name":"std","disambiguator":[2951836381390344939,16649128255697415692]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":2,"id":{"name":"core","disambiguator":[11710271729537087300,7936810236211621860]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[221620535861096092,14052674651022364528]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6754765288211962248,11319126938093173531]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":5,"id":{"name":"alloc","disambiguator":[12146955935630897969,9411134559866261862]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":6,"id":{"name":"libc","disambiguator":[14833668363639865695,5655522694650611187]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":7,"id":{"name":"unwind","disambiguator":[4272166054306925428,11429919485785531186]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[12683507629027033058,3032465482526171902]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[3621516987667804763,14118985286121416357]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[3114763798488812350,3771385689256703239]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":11,"id":{"name":"hashbrown","disambiguator":[12308387851717752688,1271721453298801945]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":12,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[41357415245366713,267475365531445088]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":13,"id":{"name":"panic_unwind","disambiguator":[14877867959531453948,6948897495248942720]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":14,"id":{"name":"time","disambiguator":[17356717641427091391,1416684332782577746]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":15,"id":{"name":"winapi","disambiguator":[11298473886151146816,1767547984430099719]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":16,"id":{"name":"num_integer","disambiguator":[5136405777695955469,4526152382548031317]}},{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","num":17,"id":{"name":"num_traits","disambiguator":[9942624106956342227,4445749706669064749]}}],"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":76,"byte_end":55293,"line_start":4,"line_end":1518,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":14,"index":298},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21519,"byte_end":21527,"line_start":469,"line_end":469,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21545,"byte_end":21549,"line_start":471,"line_end":471,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21551,"byte_end":21559,"line_start":471,"line_end":471,"column_start":22,"column_end":30},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21561,"byte_end":21569,"line_start":471,"line_end":471,"column_start":32,"column_end":40},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1757},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21673,"byte_end":21681,"line_start":474,"line_end":474,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1733},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21683,"byte_end":21696,"line_start":474,"line_end":474,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21698,"byte_end":21710,"line_start":474,"line_end":474,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21712,"byte_end":21724,"line_start":474,"line_end":474,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21823,"byte_end":21833,"line_start":478,"line_end":478,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21835,"byte_end":21846,"line_start":478,"line_end":478,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21883,"byte_end":21890,"line_start":480,"line_end":480,"column_start":17,"column_end":24},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21892,"byte_end":21901,"line_start":480,"line_end":480,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21903,"byte_end":21916,"line_start":480,"line_end":480,"column_start":37,"column_end":50},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21918,"byte_end":21927,"line_start":480,"line_end":480,"column_start":52,"column_end":61},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21990,"byte_end":21995,"line_start":483,"line_end":483,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":21990,"byte_end":21995,"line_start":483,"line_end":483,"column_start":17,"column_end":22},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":26}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22032,"byte_end":22043,"line_start":485,"line_end":485,"column_start":18,"column_end":29},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22045,"byte_end":22056,"line_start":485,"line_end":485,"column_start":31,"column_end":42},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22058,"byte_end":22064,"line_start":485,"line_end":485,"column_start":44,"column_end":50},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22066,"byte_end":22074,"line_start":485,"line_end":485,"column_start":52,"column_end":60},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22076,"byte_end":22079,"line_start":485,"line_end":485,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22076,"byte_end":22079,"line_start":485,"line_end":485,"column_start":62,"column_end":65},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22098,"byte_end":22111,"line_start":486,"line_end":486,"column_start":17,"column_end":30},"alias_span":null,"name":"DurationRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22113,"byte_end":22126,"line_start":486,"line_end":486,"column_start":32,"column_end":45},"alias_span":null,"name":"RoundingError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22128,"byte_end":22139,"line_start":486,"line_end":486,"column_start":47,"column_end":58},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22278,"byte_end":22282,"line_start":491,"line_end":491,"column_start":13,"column_end":17},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22348,"byte_end":22353,"line_start":494,"line_end":494,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22348,"byte_end":22353,"line_start":494,"line_end":494,"column_start":13,"column_end":18},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":39}},{"kind":"Use","ref_id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22472,"byte_end":22483,"line_start":499,"line_end":499,"column_start":13,"column_end":24},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1757},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22520,"byte_end":22528,"line_start":501,"line_end":501,"column_start":14,"column_end":22},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1733},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22530,"byte_end":22543,"line_start":501,"line_end":501,"column_start":24,"column_end":37},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22581,"byte_end":22589,"line_start":503,"line_end":503,"column_start":14,"column_end":22},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22591,"byte_end":22596,"line_start":503,"line_end":503,"column_start":24,"column_end":29},"alias_span":null,"name":"Month","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22598,"byte_end":22606,"line_start":503,"line_end":503,"column_start":31,"column_end":39},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22608,"byte_end":22615,"line_start":503,"line_end":503,"column_start":41,"column_end":48},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22653,"byte_end":22664,"line_start":505,"line_end":505,"column_start":14,"column_end":25},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22666,"byte_end":22669,"line_start":505,"line_end":505,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22666,"byte_end":22669,"line_start":505,"line_end":505,"column_start":27,"column_end":30},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":51}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22707,"byte_end":22716,"line_start":507,"line_end":507,"column_start":14,"column_end":23},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22718,"byte_end":22731,"line_start":507,"line_end":507,"column_start":25,"column_end":38},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22733,"byte_end":22742,"line_start":507,"line_end":507,"column_start":40,"column_end":49},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22780,"byte_end":22786,"line_start":509,"line_end":509,"column_start":14,"column_end":20},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22788,"byte_end":22796,"line_start":509,"line_end":509,"column_start":22,"column_end":30},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75065,"byte_end":75076,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":66}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75125,"byte_end":75130,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":66}},{"kind":"Use","ref_id":{"krate":0,"index":1521},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75125,"byte_end":75130,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":252}},{"kind":"Use","ref_id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75151,"byte_end":75154,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":66}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":75151,"byte_end":75154,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":253}},{"kind":"Use","ref_id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23378,"byte_end":23387,"line_start":537,"line_end":537,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23389,"byte_end":23397,"line_start":537,"line_end":537,"column_start":37,"column_end":45},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23399,"byte_end":23407,"line_start":537,"line_end":537,"column_start":47,"column_end":55},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23560,"byte_end":23573,"line_start":541,"line_end":541,"column_start":30,"column_end":43},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23575,"byte_end":23587,"line_start":541,"line_end":541,"column_start":45,"column_end":57},"alias_span":null,"name":"MAX_DATETIME","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23589,"byte_end":23601,"line_start":541,"line_end":541,"column_start":59,"column_end":71},"alias_span":null,"name":"MIN_DATETIME","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23631,"byte_end":23638,"line_start":542,"line_end":542,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23664,"byte_end":23673,"line_start":543,"line_end":543,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":254}},{"kind":"Use","ref_id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502024,"byte_end":502029,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1043}},{"kind":"Use","ref_id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502053,"byte_end":502059,"line_start":43,"line_end":43,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1043}},{"kind":"Use","ref_id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502085,"byte_end":502098,"line_start":44,"line_end":44,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1043}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":76,"byte_end":55293,"line_start":4,"line_end":1518,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":2221},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":2231},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":60},{"krate":0,"index":66},{"krate":0,"index":254},{"krate":0,"index":711},{"krate":0,"index":846},{"krate":0,"index":1043},{"krate":0,"index":1379},{"krate":0,"index":2090},{"krate":0,"index":2123},{"krate":0,"index":2124},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2119},{"krate":0,"index":2117},{"krate":0,"index":2115},{"krate":0,"index":2112},{"krate":0,"index":1413},{"krate":0,"index":1420},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":2126},{"krate":0,"index":2132},{"krate":0,"index":2128},{"krate":0,"index":2129},{"krate":0,"index":1426},{"krate":0,"index":2134},{"krate":0,"index":2182},{"krate":0,"index":2183},{"krate":0,"index":2179},{"krate":0,"index":2180},{"krate":0,"index":2178},{"krate":0,"index":2176},{"krate":0,"index":2174},{"krate":0,"index":2171},{"krate":0,"index":1428},{"krate":0,"index":1433},{"krate":0,"index":2185},{"krate":0,"index":2191},{"krate":0,"index":2187},{"krate":0,"index":2188},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1458},{"krate":0,"index":1469}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"! # Chrono: Date and Time for Rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! It aims to be a feature-complete superset of","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"! the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"! In particular,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! * Chrono strictly adheres to ISO 8601.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"! * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"! * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"! which Chrono builds upon and should acknowledge:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"! * [Initial research on","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"!    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"! * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"! * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"! Any significant changes to Chrono are documented in","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"! the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/main/CHANGELOG.md) file.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":957,"byte_end":1048,"line_start":23,"line_end":23,"column_start":1,"column_end":92}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1049,"byte_end":1052,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"! ## Usage","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1053,"byte_end":1065,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1066,"byte_end":1069,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"! Put this in your `Cargo.toml`:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1070,"byte_end":1104,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1105,"byte_end":1108,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"! ```toml","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1109,"byte_end":1120,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"! [dependencies]","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1121,"byte_end":1139,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"! chrono = \"0.4\"","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1140,"byte_end":1158,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1159,"byte_end":1166,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1167,"byte_end":1170,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! ### Features","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1171,"byte_end":1187,"line_start":34,"line_end":34,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1188,"byte_end":1191,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"! Chrono supports various runtime environments and operating systems, and has","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1192,"byte_end":1271,"line_start":36,"line_end":36,"column_start":1,"column_end":80}},{"value":"! several features that may be enabled or disabled.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1272,"byte_end":1325,"line_start":37,"line_end":37,"column_start":1,"column_end":54}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1326,"byte_end":1329,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! Default features:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1330,"byte_end":1351,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1352,"byte_end":1355,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"! - `alloc`: Enable features that depend on allocation (primarily string formatting)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1356,"byte_end":1442,"line_start":41,"line_end":41,"column_start":1,"column_end":87}},{"value":"! - `std`: Enables functionality that depends on the standard library. This","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1443,"byte_end":1520,"line_start":42,"line_end":42,"column_start":1,"column_end":78}},{"value":"!   is a superset of `alloc` and adds interoperation with standard library types","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1521,"byte_end":1603,"line_start":43,"line_end":43,"column_start":1,"column_end":83}},{"value":"!   and traits.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1604,"byte_end":1621,"line_start":44,"line_end":44,"column_start":1,"column_end":18}},{"value":"! - `clock`: enables reading the system time (`now`), independent of whether","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1622,"byte_end":1700,"line_start":45,"line_end":45,"column_start":1,"column_end":79}},{"value":"!   `std::time::SystemTime` is present, depends on having a libc.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1701,"byte_end":1768,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1769,"byte_end":1772,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"! Optional features:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1773,"byte_end":1795,"line_start":48,"line_end":48,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1796,"byte_end":1799,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"! - `wasmbind`: Enable integration with [wasm-bindgen][] and its `js-sys` project","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1800,"byte_end":1883,"line_start":50,"line_end":50,"column_start":1,"column_end":84}},{"value":"! - [`serde`][]: Enable serialization/deserialization via serde.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1884,"byte_end":1950,"line_start":51,"line_end":51,"column_start":1,"column_end":67}},{"value":"! - `unstable-locales`: Enable localization. This adds various methods with a","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":1951,"byte_end":2030,"line_start":52,"line_end":52,"column_start":1,"column_end":80}},{"value":"!   `_localized` suffix. The implementation and API may change or even be","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2031,"byte_end":2106,"line_start":53,"line_end":53,"column_start":1,"column_end":76}},{"value":"!   removed in a patch release. Feedback welcome.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2107,"byte_end":2158,"line_start":54,"line_end":54,"column_start":1,"column_end":52}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2159,"byte_end":2162,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"! [`serde`]: https://github.com/serde-rs/serde","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2163,"byte_end":2211,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"! [wasm-bindgen]: https://github.com/rustwasm/wasm-bindgen","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2212,"byte_end":2272,"line_start":57,"line_end":57,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2273,"byte_end":2276,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"! See the [cargo docs][] for examples of specifying features.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2277,"byte_end":2340,"line_start":59,"line_end":59,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2341,"byte_end":2344,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"! [cargo docs]: https://doc.rust-lang.org/cargo/reference/specifying-dependencies.html#choosing-features","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2345,"byte_end":2451,"line_start":61,"line_end":61,"column_start":1,"column_end":107}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2452,"byte_end":2455,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"! ## Overview","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2456,"byte_end":2471,"line_start":63,"line_end":63,"column_start":1,"column_end":16}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2472,"byte_end":2475,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"! ### Duration","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2476,"byte_end":2492,"line_start":65,"line_end":65,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2493,"byte_end":2496,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"! Chrono currently uses","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2497,"byte_end":2522,"line_start":67,"line_end":67,"column_start":1,"column_end":26}},{"value":"! the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2523,"byte_end":2609,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"! from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2610,"byte_end":2678,"line_start":69,"line_end":69,"column_start":1,"column_end":69}},{"value":"! Since this has the same name as the newer, standard type for duration,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2679,"byte_end":2753,"line_start":70,"line_end":70,"column_start":1,"column_end":75}},{"value":"! the reference will refer this type as `OldDuration`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2754,"byte_end":2810,"line_start":71,"line_end":71,"column_start":1,"column_end":57}},{"value":"! Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2811,"byte_end":2882,"line_start":72,"line_end":72,"column_start":1,"column_end":72}},{"value":"! nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2883,"byte_end":2958,"line_start":73,"line_end":73,"column_start":1,"column_end":76}},{"value":"! months.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2959,"byte_end":2970,"line_start":74,"line_end":74,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2971,"byte_end":2974,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! Chrono does not yet natively support","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":2975,"byte_end":3015,"line_start":76,"line_end":76,"column_start":1,"column_end":41}},{"value":"! the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3016,"byte_end":3108,"line_start":77,"line_end":77,"column_start":1,"column_end":93}},{"value":"! but it will be supported in the future.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3109,"byte_end":3152,"line_start":78,"line_end":78,"column_start":1,"column_end":44}},{"value":"! Meanwhile you can convert between two types with","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3153,"byte_end":3205,"line_start":79,"line_end":79,"column_start":1,"column_end":53}},{"value":"! [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3206,"byte_end":3303,"line_start":80,"line_end":80,"column_start":1,"column_end":98}},{"value":"! and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3304,"byte_end":3311,"line_start":81,"line_end":81,"column_start":1,"column_end":8}},{"value":"! [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3312,"byte_end":3405,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"! methods.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3406,"byte_end":3418,"line_start":83,"line_end":83,"column_start":1,"column_end":13}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3419,"byte_end":3422,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"! ### Date and Time","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3423,"byte_end":3444,"line_start":85,"line_end":85,"column_start":1,"column_end":22}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3445,"byte_end":3448,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"! Chrono provides a","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3449,"byte_end":3470,"line_start":87,"line_end":87,"column_start":1,"column_end":22}},{"value":"! [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3471,"byte_end":3515,"line_start":88,"line_end":88,"column_start":1,"column_end":45}},{"value":"! type to represent a date and a time in a timezone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3516,"byte_end":3570,"line_start":89,"line_end":89,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3571,"byte_end":3574,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"! For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3575,"byte_end":3649,"line_start":91,"line_end":91,"column_start":1,"column_end":75}},{"value":"! that is unconcerned with timezones, consider","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3650,"byte_end":3698,"line_start":92,"line_end":92,"column_start":1,"column_end":49}},{"value":"! [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3699,"byte_end":3783,"line_start":93,"line_end":93,"column_start":1,"column_end":85}},{"value":"! which tracks your system clock, or","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3784,"byte_end":3822,"line_start":94,"line_end":94,"column_start":1,"column_end":39}},{"value":"! [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3823,"byte_end":3907,"line_start":95,"line_end":95,"column_start":1,"column_end":85}},{"value":"! is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3908,"byte_end":3989,"line_start":96,"line_end":96,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3990,"byte_end":3993,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"! `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":3994,"byte_end":4055,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"! the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4056,"byte_end":4118,"line_start":99,"line_end":99,"column_start":1,"column_end":63}},{"value":"! which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4119,"byte_end":4199,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"! There are three well-known `TimeZone` implementations:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4200,"byte_end":4258,"line_start":101,"line_end":101,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4259,"byte_end":4262,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"! * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4263,"byte_end":4357,"line_start":103,"line_end":103,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4358,"byte_end":4361,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"! * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4362,"byte_end":4447,"line_start":105,"line_end":105,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4448,"byte_end":4451,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4452,"byte_end":4521,"line_start":107,"line_end":107,"column_start":1,"column_end":70}},{"value":"!   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4522,"byte_end":4589,"line_start":108,"line_end":108,"column_start":1,"column_end":68}},{"value":"!   This often results from the parsed textual date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4590,"byte_end":4653,"line_start":109,"line_end":109,"column_start":1,"column_end":64}},{"value":"!   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4654,"byte_end":4743,"line_start":110,"line_end":110,"column_start":1,"column_end":90}},{"value":"!   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4744,"byte_end":4811,"line_start":111,"line_end":111,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4812,"byte_end":4815,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"! `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4816,"byte_end":4892,"line_start":113,"line_end":113,"column_start":1,"column_end":77}},{"value":"! but can be converted to each other using","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4893,"byte_end":4937,"line_start":114,"line_end":114,"column_start":1,"column_end":45}},{"value":"! the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":4938,"byte_end":5026,"line_start":115,"line_end":115,"column_start":1,"column_end":89}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5027,"byte_end":5030,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! You can get the current date and time in the UTC time zone","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5031,"byte_end":5093,"line_start":117,"line_end":117,"column_start":1,"column_end":63}},{"value":"! ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5094,"byte_end":5151,"line_start":118,"line_end":118,"column_start":1,"column_end":58}},{"value":"! or in the local time zone","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5152,"byte_end":5181,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"! ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5182,"byte_end":5244,"line_start":120,"line_end":120,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5245,"byte_end":5248,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5249,"byte_end":5260,"line_start":122,"line_end":122,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5261,"byte_end":5288,"line_start":123,"line_end":123,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5289,"byte_end":5292,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"! let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5293,"byte_end":5380,"line_start":125,"line_end":125,"column_start":1,"column_end":88}},{"value":"! let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5381,"byte_end":5473,"line_start":126,"line_end":126,"column_start":1,"column_end":93}},{"value":"! # let _ = utc; let _ = local;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5474,"byte_end":5507,"line_start":127,"line_end":127,"column_start":1,"column_end":34}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5508,"byte_end":5515,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5516,"byte_end":5519,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"! Alternatively, you can create your own date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5520,"byte_end":5577,"line_start":130,"line_end":130,"column_start":1,"column_end":58}},{"value":"! This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5578,"byte_end":5658,"line_start":131,"line_end":131,"column_start":1,"column_end":81}},{"value":"! but in turn we get a rich combination of initialization methods.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5659,"byte_end":5727,"line_start":132,"line_end":132,"column_start":1,"column_end":69}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5728,"byte_end":5731,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5732,"byte_end":5743,"line_start":134,"line_end":134,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5744,"byte_end":5771,"line_start":135,"line_end":135,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5772,"byte_end":5808,"line_start":136,"line_end":136,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5809,"byte_end":5812,"line_start":137,"line_end":137,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5813,"byte_end":5891,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"! // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5892,"byte_end":5955,"line_start":139,"line_end":139,"column_start":1,"column_end":64}},{"value":"! assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":5956,"byte_end":6013,"line_start":140,"line_end":140,"column_start":1,"column_end":58}},{"value":"! // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6014,"byte_end":6071,"line_start":141,"line_end":141,"column_start":1,"column_end":58}},{"value":"! assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6072,"byte_end":6146,"line_start":142,"line_end":142,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6147,"byte_end":6150,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6151,"byte_end":6243,"line_start":144,"line_end":144,"column_start":1,"column_end":93}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6244,"byte_end":6317,"line_start":145,"line_end":145,"column_start":1,"column_end":74}},{"value":"! assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6318,"byte_end":6394,"line_start":146,"line_end":146,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6395,"byte_end":6398,"line_start":147,"line_end":147,"column_start":1,"column_end":4}},{"value":"! // dynamic verification","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6399,"byte_end":6426,"line_start":148,"line_end":148,"column_start":1,"column_end":28}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6427,"byte_end":6490,"line_start":149,"line_end":149,"column_start":1,"column_end":64}},{"value":"!            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6491,"byte_end":6568,"line_start":150,"line_end":150,"column_start":1,"column_end":78}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6569,"byte_end":6652,"line_start":151,"line_end":151,"column_start":1,"column_end":84}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6653,"byte_end":6737,"line_start":152,"line_end":152,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6738,"byte_end":6741,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"! // other time zone objects can be used to construct a local datetime.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6742,"byte_end":6815,"line_start":154,"line_end":154,"column_start":1,"column_end":74}},{"value":"! // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6816,"byte_end":6913,"line_start":155,"line_end":155,"column_start":1,"column_end":98}},{"value":"! let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6914,"byte_end":6984,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"! let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":6985,"byte_end":7078,"line_start":157,"line_end":157,"column_start":1,"column_end":94}},{"value":"! assert_eq!(dt, fixed_dt);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7079,"byte_end":7108,"line_start":158,"line_end":158,"column_start":1,"column_end":30}},{"value":"! # let _ = local_dt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7109,"byte_end":7132,"line_start":159,"line_end":159,"column_start":1,"column_end":24}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7133,"byte_end":7140,"line_start":160,"line_end":160,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7141,"byte_end":7144,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"! Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7145,"byte_end":7236,"line_start":162,"line_end":162,"column_start":1,"column_end":92}},{"value":"! Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7237,"byte_end":7319,"line_start":163,"line_end":163,"column_start":1,"column_end":83}},{"value":"! [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7320,"byte_end":7390,"line_start":164,"line_end":164,"column_start":1,"column_end":71}},{"value":"! Addition and subtraction is also supported.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7391,"byte_end":7438,"line_start":165,"line_end":165,"column_start":1,"column_end":48}},{"value":"! The following illustrates most supported operations to the date and time:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7439,"byte_end":7516,"line_start":166,"line_end":166,"column_start":1,"column_end":78}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7517,"byte_end":7520,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7521,"byte_end":7532,"line_start":168,"line_end":168,"column_start":1,"column_end":12}},{"value":"! # extern crate chrono;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7533,"byte_end":7559,"line_start":169,"line_end":169,"column_start":1,"column_end":27}},{"value":"! extern crate time;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7560,"byte_end":7582,"line_start":170,"line_end":170,"column_start":1,"column_end":23}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7583,"byte_end":7586,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"! # fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7587,"byte_end":7604,"line_start":172,"line_end":172,"column_start":1,"column_end":18}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7605,"byte_end":7632,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"! use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7633,"byte_end":7656,"line_start":174,"line_end":174,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7657,"byte_end":7660,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"! // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7661,"byte_end":7727,"line_start":176,"line_end":176,"column_start":1,"column_end":67}},{"value":"! let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7728,"byte_end":7821,"line_start":177,"line_end":177,"column_start":1,"column_end":94}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7822,"byte_end":7825,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"! // property accessors","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7826,"byte_end":7851,"line_start":179,"line_end":179,"column_start":1,"column_end":26}},{"value":"! assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7852,"byte_end":7918,"line_start":180,"line_end":180,"column_start":1,"column_end":67}},{"value":"! assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7919,"byte_end":7995,"line_start":181,"line_end":181,"column_start":1,"column_end":77}},{"value":"! assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":7996,"byte_end":8064,"line_start":182,"line_end":182,"column_start":1,"column_end":69}},{"value":"! assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8065,"byte_end":8108,"line_start":183,"line_end":183,"column_start":1,"column_end":44}},{"value":"! assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8109,"byte_end":8183,"line_start":184,"line_end":184,"column_start":1,"column_end":75}},{"value":"! assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8184,"byte_end":8237,"line_start":185,"line_end":185,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8238,"byte_end":8334,"line_start":186,"line_end":186,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8335,"byte_end":8338,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"! // time zone accessor and manipulation","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8339,"byte_end":8381,"line_start":188,"line_end":188,"column_start":1,"column_end":43}},{"value":"! assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8382,"byte_end":8444,"line_start":189,"line_end":189,"column_start":1,"column_end":63}},{"value":"! assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8445,"byte_end":8504,"line_start":190,"line_end":190,"column_start":1,"column_end":60}},{"value":"! assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8505,"byte_end":8603,"line_start":191,"line_end":191,"column_start":1,"column_end":99}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8604,"byte_end":8607,"line_start":192,"line_end":192,"column_start":1,"column_end":4}},{"value":"! // a sample of property manipulations (validates dynamically)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8608,"byte_end":8673,"line_start":193,"line_end":193,"column_start":1,"column_end":66}},{"value":"! assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8674,"byte_end":8765,"line_start":194,"line_end":194,"column_start":1,"column_end":92}},{"value":"! assert_eq!(dt.with_day(32), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8766,"byte_end":8804,"line_start":195,"line_end":195,"column_start":1,"column_end":39}},{"value":"! assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8805,"byte_end":8901,"line_start":196,"line_end":196,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8902,"byte_end":8905,"line_start":197,"line_end":197,"column_start":1,"column_end":4}},{"value":"! // arithmetic operations","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8906,"byte_end":8934,"line_start":198,"line_end":198,"column_start":1,"column_end":29}},{"value":"! let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8935,"byte_end":8989,"line_start":199,"line_end":199,"column_start":1,"column_end":55}},{"value":"! let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":8990,"byte_end":9044,"line_start":200,"line_end":200,"column_start":1,"column_end":55}},{"value":"! assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9045,"byte_end":9126,"line_start":201,"line_end":201,"column_start":1,"column_end":82}},{"value":"! assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9127,"byte_end":9207,"line_start":202,"line_end":202,"column_start":1,"column_end":81}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9208,"byte_end":9295,"line_start":203,"line_end":203,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9296,"byte_end":9351,"line_start":204,"line_end":204,"column_start":1,"column_end":56}},{"value":"! assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9352,"byte_end":9439,"line_start":205,"line_end":205,"column_start":1,"column_end":88}},{"value":"!            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9440,"byte_end":9497,"line_start":206,"line_end":206,"column_start":1,"column_end":58}},{"value":"! # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9498,"byte_end":9505,"line_start":207,"line_end":207,"column_start":1,"column_end":8}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9506,"byte_end":9513,"line_start":208,"line_end":208,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9514,"byte_end":9517,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"! ### Formatting and Parsing","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9518,"byte_end":9548,"line_start":210,"line_end":210,"column_start":1,"column_end":31}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9549,"byte_end":9552,"line_start":211,"line_end":211,"column_start":1,"column_end":4}},{"value":"! Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9553,"byte_end":9640,"line_start":212,"line_end":212,"column_start":1,"column_end":88}},{"value":"! which format is equivalent to the familiar `strftime` format.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9641,"byte_end":9706,"line_start":213,"line_end":213,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9707,"byte_end":9710,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"! See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9711,"byte_end":9780,"line_start":215,"line_end":215,"column_start":1,"column_end":70}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9781,"byte_end":9838,"line_start":216,"line_end":216,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9839,"byte_end":9842,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"! The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9843,"byte_end":9937,"line_start":218,"line_end":218,"column_start":1,"column_end":95}},{"value":"! Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":9938,"byte_end":10023,"line_start":219,"line_end":219,"column_start":1,"column_end":86}},{"value":"! [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10024,"byte_end":10092,"line_start":220,"line_end":220,"column_start":1,"column_end":69}},{"value":"! for well-known formats.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10093,"byte_end":10120,"line_start":221,"line_end":221,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10121,"byte_end":10124,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"! Chrono now also provides date formatting in almost any language without the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10125,"byte_end":10204,"line_start":223,"line_end":223,"column_start":1,"column_end":80}},{"value":"! help of an additional C library. This functionality is under the feature","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10205,"byte_end":10281,"line_start":224,"line_end":224,"column_start":1,"column_end":77}},{"value":"! `unstable-locales`:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10282,"byte_end":10305,"line_start":225,"line_end":225,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10306,"byte_end":10309,"line_start":226,"line_end":226,"column_start":1,"column_end":4}},{"value":"! ```text","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10310,"byte_end":10321,"line_start":227,"line_end":227,"column_start":1,"column_end":12}},{"value":"! chrono { version = \"0.4\", features = [\"unstable-locales\"]","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10322,"byte_end":10383,"line_start":228,"line_end":228,"column_start":1,"column_end":62}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10384,"byte_end":10391,"line_start":229,"line_end":229,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10392,"byte_end":10395,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"! The `unstable-locales` feature requires and implies at least the `alloc` feature.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10396,"byte_end":10481,"line_start":231,"line_end":231,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10482,"byte_end":10485,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10486,"byte_end":10497,"line_start":233,"line_end":233,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10498,"byte_end":10525,"line_start":234,"line_end":234,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10526,"byte_end":10529,"line_start":235,"line_end":235,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10530,"byte_end":10583,"line_start":236,"line_end":236,"column_start":1,"column_end":54}},{"value":"! assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10584,"byte_end":10666,"line_start":237,"line_end":237,"column_start":1,"column_end":83}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10667,"byte_end":10751,"line_start":238,"line_end":238,"column_start":1,"column_end":85}},{"value":"! assert_eq!(dt.format_localized(\"%A %e %B %Y, %T\", Locale::fr_BE).to_string(), \"vendredi 28 novembre 2014, 12:00:09\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10752,"byte_end":10873,"line_start":239,"line_end":239,"column_start":1,"column_end":122}},{"value":"! assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10874,"byte_end":10959,"line_start":240,"line_end":240,"column_start":1,"column_end":86}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10960,"byte_end":10963,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"! assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":10964,"byte_end":11022,"line_start":242,"line_end":242,"column_start":1,"column_end":59}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11023,"byte_end":11090,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"! assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11091,"byte_end":11152,"line_start":244,"line_end":244,"column_start":1,"column_end":62}},{"value":"! assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11153,"byte_end":11213,"line_start":245,"line_end":245,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11214,"byte_end":11217,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"! // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11218,"byte_end":11290,"line_start":247,"line_end":247,"column_start":1,"column_end":73}},{"value":"! let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11291,"byte_end":11357,"line_start":248,"line_end":248,"column_start":1,"column_end":67}},{"value":"! assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11358,"byte_end":11433,"line_start":249,"line_end":249,"column_start":1,"column_end":76}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11434,"byte_end":11441,"line_start":250,"line_end":250,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11442,"byte_end":11445,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"! Parsing can be done with three methods:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11446,"byte_end":11489,"line_start":252,"line_end":252,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11490,"byte_end":11493,"line_start":253,"line_end":253,"column_start":1,"column_end":4}},{"value":"! 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11494,"byte_end":11585,"line_start":254,"line_end":254,"column_start":1,"column_end":92}},{"value":"!    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11586,"byte_end":11677,"line_start":255,"line_end":255,"column_start":1,"column_end":92}},{"value":"!    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11678,"byte_end":11766,"line_start":256,"line_end":256,"column_start":1,"column_end":89}},{"value":"!    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11767,"byte_end":11827,"line_start":257,"line_end":257,"column_start":1,"column_end":61}},{"value":"!    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11828,"byte_end":11908,"line_start":258,"line_end":258,"column_start":1,"column_end":81}},{"value":"!    format specifier prints, and requires the offset to be present.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11909,"byte_end":11979,"line_start":259,"line_end":259,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11980,"byte_end":11983,"line_start":260,"line_end":260,"column_start":1,"column_end":4}},{"value":"! 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":11984,"byte_end":12072,"line_start":261,"line_end":261,"column_start":1,"column_end":89}},{"value":"!    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12073,"byte_end":12145,"line_start":262,"line_end":262,"column_start":1,"column_end":73}},{"value":"!    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12146,"byte_end":12241,"line_start":263,"line_end":263,"column_start":1,"column_end":96}},{"value":"!    It *cannot* be used when the offset can be missing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12242,"byte_end":12300,"line_start":264,"line_end":264,"column_start":1,"column_end":59}},{"value":"!    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12301,"byte_end":12390,"line_start":265,"line_end":265,"column_start":1,"column_end":90}},{"value":"!    and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12391,"byte_end":12401,"line_start":266,"line_end":266,"column_start":1,"column_end":11}},{"value":"!    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12402,"byte_end":12491,"line_start":267,"line_end":267,"column_start":1,"column_end":90}},{"value":"!    are similar but for well-known formats.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12492,"byte_end":12538,"line_start":268,"line_end":268,"column_start":1,"column_end":47}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12539,"byte_end":12542,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"! 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12543,"byte_end":12637,"line_start":270,"line_end":270,"column_start":1,"column_end":95}},{"value":"!    similar but returns `DateTime` of given offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12638,"byte_end":12692,"line_start":271,"line_end":271,"column_start":1,"column_end":55}},{"value":"!    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12693,"byte_end":12780,"line_start":272,"line_end":272,"column_start":1,"column_end":88}},{"value":"!    It issues an error when the input contains an explicit offset different","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12781,"byte_end":12859,"line_start":273,"line_end":273,"column_start":1,"column_end":79}},{"value":"!    from the current offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12860,"byte_end":12891,"line_start":274,"line_end":274,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12892,"byte_end":12895,"line_start":275,"line_end":275,"column_start":1,"column_end":4}},{"value":"! More detailed control over the parsing process is available via","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12896,"byte_end":12963,"line_start":276,"line_end":276,"column_start":1,"column_end":68}},{"value":"! [`format`](./format/index.html) module.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":12964,"byte_end":13007,"line_start":277,"line_end":277,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13008,"byte_end":13011,"line_start":278,"line_end":278,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13012,"byte_end":13023,"line_start":279,"line_end":279,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13024,"byte_end":13051,"line_start":280,"line_end":280,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13052,"byte_end":13055,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"! let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13056,"byte_end":13109,"line_start":282,"line_end":282,"column_start":1,"column_end":54}},{"value":"! let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13110,"byte_end":13174,"line_start":283,"line_end":283,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13175,"byte_end":13178,"line_start":284,"line_end":284,"column_start":1,"column_end":4}},{"value":"! // method 1","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13179,"byte_end":13194,"line_start":285,"line_end":285,"column_start":1,"column_end":16}},{"value":"! assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13195,"byte_end":13275,"line_start":286,"line_end":286,"column_start":1,"column_end":81}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13276,"byte_end":13361,"line_start":287,"line_end":287,"column_start":1,"column_end":86}},{"value":"! assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13362,"byte_end":13461,"line_start":288,"line_end":288,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13462,"byte_end":13465,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"! // method 2","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13466,"byte_end":13481,"line_start":290,"line_end":290,"column_start":1,"column_end":16}},{"value":"! assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13482,"byte_end":13576,"line_start":291,"line_end":291,"column_start":1,"column_end":95}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13577,"byte_end":13614,"line_start":292,"line_end":292,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13615,"byte_end":13694,"line_start":293,"line_end":293,"column_start":1,"column_end":80}},{"value":"!            Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13695,"byte_end":13732,"line_start":294,"line_end":294,"column_start":1,"column_end":38}},{"value":"! assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13733,"byte_end":13829,"line_start":295,"line_end":295,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13830,"byte_end":13833,"line_start":296,"line_end":296,"column_start":1,"column_end":4}},{"value":"! // method 3","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13834,"byte_end":13849,"line_start":297,"line_end":297,"column_start":1,"column_end":16}},{"value":"! assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13850,"byte_end":13948,"line_start":298,"line_end":298,"column_start":1,"column_end":99}},{"value":"! assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":13949,"byte_end":14049,"line_start":299,"line_end":299,"column_start":1,"column_end":101}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14050,"byte_end":14053,"line_start":300,"line_end":300,"column_start":1,"column_end":4}},{"value":"! // oops, the year is missing!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14054,"byte_end":14087,"line_start":301,"line_end":301,"column_start":1,"column_end":34}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14088,"byte_end":14173,"line_start":302,"line_end":302,"column_start":1,"column_end":86}},{"value":"! // oops, the format string does not include the year at all!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14174,"byte_end":14238,"line_start":303,"line_end":303,"column_start":1,"column_end":65}},{"value":"! assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14239,"byte_end":14321,"line_start":304,"line_end":304,"column_start":1,"column_end":83}},{"value":"! // oops, the weekday is incorrect!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14322,"byte_end":14360,"line_start":305,"line_end":305,"column_start":1,"column_end":39}},{"value":"! assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14361,"byte_end":14451,"line_start":306,"line_end":306,"column_start":1,"column_end":91}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14452,"byte_end":14459,"line_start":307,"line_end":307,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14460,"byte_end":14463,"line_start":308,"line_end":308,"column_start":1,"column_end":4}},{"value":"! Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14464,"byte_end":14541,"line_start":309,"line_end":309,"column_start":1,"column_end":78}},{"value":"! documentation for full syntax and list of specifiers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14542,"byte_end":14599,"line_start":310,"line_end":310,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14600,"byte_end":14603,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"! ### Conversion from and to EPOCH timestamps","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14604,"byte_end":14651,"line_start":312,"line_end":312,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14652,"byte_end":14655,"line_start":313,"line_end":313,"column_start":1,"column_end":4}},{"value":"! Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14656,"byte_end":14750,"line_start":314,"line_end":314,"column_start":1,"column_end":95}},{"value":"! to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14751,"byte_end":14833,"line_start":315,"line_end":315,"column_start":1,"column_end":83}},{"value":"! (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14834,"byte_end":14896,"line_start":316,"line_end":316,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14897,"byte_end":14900,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"! Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":14901,"byte_end":15006,"line_start":318,"line_end":318,"column_start":1,"column_end":106}},{"value":"! from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15007,"byte_end":15081,"line_start":319,"line_end":319,"column_start":1,"column_end":75}},{"value":"! [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15082,"byte_end":15175,"line_start":320,"line_end":320,"column_start":1,"column_end":94}},{"value":"! to get the number of additional number of nanoseconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15176,"byte_end":15234,"line_start":321,"line_end":321,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15235,"byte_end":15238,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15239,"byte_end":15250,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"! // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15251,"byte_end":15309,"line_start":324,"line_end":324,"column_start":1,"column_end":59}},{"value":"! use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15310,"byte_end":15352,"line_start":325,"line_end":325,"column_start":1,"column_end":43}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15353,"byte_end":15356,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"! // Construct a datetime from epoch:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15357,"byte_end":15396,"line_start":327,"line_end":327,"column_start":1,"column_end":40}},{"value":"! let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15397,"byte_end":15442,"line_start":328,"line_end":328,"column_start":1,"column_end":46}},{"value":"! assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15443,"byte_end":15510,"line_start":329,"line_end":329,"column_start":1,"column_end":68}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15511,"byte_end":15514,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"! // Get epoch value from a datetime:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15515,"byte_end":15554,"line_start":331,"line_end":331,"column_start":1,"column_end":40}},{"value":"! let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15555,"byte_end":15641,"line_start":332,"line_end":332,"column_start":1,"column_end":87}},{"value":"! assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15642,"byte_end":15688,"line_start":333,"line_end":333,"column_start":1,"column_end":47}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15689,"byte_end":15696,"line_start":334,"line_end":334,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15697,"byte_end":15700,"line_start":335,"line_end":335,"column_start":1,"column_end":4}},{"value":"! ### Individual date","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15701,"byte_end":15724,"line_start":336,"line_end":336,"column_start":1,"column_end":24}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15725,"byte_end":15728,"line_start":337,"line_end":337,"column_start":1,"column_end":4}},{"value":"! Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15729,"byte_end":15813,"line_start":338,"line_end":338,"column_start":1,"column_end":85}},{"value":"! It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15814,"byte_end":15893,"line_start":339,"line_end":339,"column_start":1,"column_end":80}},{"value":"! Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15894,"byte_end":15988,"line_start":340,"line_end":340,"column_start":1,"column_end":95}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15989,"byte_end":15992,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"! ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":15993,"byte_end":16004,"line_start":342,"line_end":342,"column_start":1,"column_end":12}},{"value":"! use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16005,"byte_end":16032,"line_start":343,"line_end":343,"column_start":1,"column_end":28}},{"value":"! use chrono::offset::LocalResult;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16033,"byte_end":16069,"line_start":344,"line_end":344,"column_start":1,"column_end":37}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16070,"byte_end":16073,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"! # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16074,"byte_end":16174,"line_start":346,"line_end":346,"column_start":1,"column_end":101}},{"value":"! assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16175,"byte_end":16223,"line_start":347,"line_end":347,"column_start":1,"column_end":49}},{"value":"! assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16224,"byte_end":16276,"line_start":348,"line_end":348,"column_start":1,"column_end":53}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16277,"byte_end":16280,"line_start":349,"line_end":349,"column_start":1,"column_end":4}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16281,"byte_end":16343,"line_start":350,"line_end":350,"column_start":1,"column_end":63}},{"value":"! assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16344,"byte_end":16405,"line_start":351,"line_end":351,"column_start":1,"column_end":62}},{"value":"! assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16406,"byte_end":16499,"line_start":352,"line_end":352,"column_start":1,"column_end":94}},{"value":"!            \"070809\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16500,"byte_end":16525,"line_start":353,"line_end":353,"column_start":1,"column_end":26}},{"value":"! ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16526,"byte_end":16533,"line_start":354,"line_end":354,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16534,"byte_end":16537,"line_start":355,"line_end":355,"column_start":1,"column_end":4}},{"value":"! There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16538,"byte_end":16630,"line_start":356,"line_end":356,"column_start":1,"column_end":93}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16631,"byte_end":16634,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"! `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16635,"byte_end":16705,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"! which returns a `Date` which represents its date component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16706,"byte_end":16769,"line_start":359,"line_end":359,"column_start":1,"column_end":64}},{"value":"! There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16770,"byte_end":16842,"line_start":360,"line_end":360,"column_start":1,"column_end":73}},{"value":"! which simply returns a naive local time described below.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16843,"byte_end":16903,"line_start":361,"line_end":361,"column_start":1,"column_end":61}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16904,"byte_end":16907,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"! ### Naive date and time","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16908,"byte_end":16935,"line_start":363,"line_end":363,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16936,"byte_end":16939,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"! Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":16940,"byte_end":17026,"line_start":365,"line_end":365,"column_start":1,"column_end":87}},{"value":"! as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17027,"byte_end":17083,"line_start":366,"line_end":366,"column_start":1,"column_end":57}},{"value":"! [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17084,"byte_end":17140,"line_start":367,"line_end":367,"column_start":1,"column_end":57}},{"value":"! [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17141,"byte_end":17215,"line_start":368,"line_end":368,"column_start":1,"column_end":75}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17216,"byte_end":17219,"line_start":369,"line_end":369,"column_start":1,"column_end":4}},{"value":"! They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17220,"byte_end":17293,"line_start":370,"line_end":370,"column_start":1,"column_end":74}},{"value":"! but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17294,"byte_end":17372,"line_start":371,"line_end":371,"column_start":1,"column_end":79}},{"value":"! They are mostly useful for building blocks for higher-level types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17373,"byte_end":17443,"line_start":372,"line_end":372,"column_start":1,"column_end":71}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17444,"byte_end":17447,"line_start":373,"line_end":373,"column_start":1,"column_end":4}},{"value":"! Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17448,"byte_end":17537,"line_start":374,"line_end":374,"column_start":1,"column_end":90}},{"value":"! [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17538,"byte_end":17608,"line_start":375,"line_end":375,"column_start":1,"column_end":71}},{"value":"! a view to the naive local time,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17609,"byte_end":17644,"line_start":376,"line_end":376,"column_start":1,"column_end":36}},{"value":"! and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17645,"byte_end":17715,"line_start":377,"line_end":377,"column_start":1,"column_end":71}},{"value":"! a view to the naive UTC time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17716,"byte_end":17749,"line_start":378,"line_end":378,"column_start":1,"column_end":34}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17750,"byte_end":17753,"line_start":379,"line_end":379,"column_start":1,"column_end":4}},{"value":"! ## Limitations","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17754,"byte_end":17772,"line_start":380,"line_end":380,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17773,"byte_end":17776,"line_start":381,"line_end":381,"column_start":1,"column_end":4}},{"value":"! Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17777,"byte_end":17867,"line_start":382,"line_end":382,"column_start":1,"column_end":91}},{"value":"! Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17868,"byte_end":17967,"line_start":383,"line_end":383,"column_start":1,"column_end":100}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17968,"byte_end":17971,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"! Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":17972,"byte_end":18048,"line_start":385,"line_end":385,"column_start":1,"column_end":77}},{"value":"! Time types are limited in the nanosecond accuracy.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18049,"byte_end":18103,"line_start":386,"line_end":386,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18104,"byte_end":18107,"line_start":387,"line_end":387,"column_start":1,"column_end":4}},{"value":"! [Leap seconds are supported in the representation but","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18108,"byte_end":18165,"line_start":388,"line_end":388,"column_start":1,"column_end":58}},{"value":"! Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18166,"byte_end":18262,"line_start":389,"line_end":389,"column_start":1,"column_end":97}},{"value":"! (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18263,"byte_end":18333,"line_start":390,"line_end":390,"column_start":1,"column_end":71}},{"value":"! Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18334,"byte_end":18411,"line_start":391,"line_end":391,"column_start":1,"column_end":78}},{"value":"! Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18412,"byte_end":18502,"line_start":392,"line_end":392,"column_start":1,"column_end":91}},{"value":"! if you want.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18503,"byte_end":18519,"line_start":393,"line_end":393,"column_start":1,"column_end":17}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18520,"byte_end":18523,"line_start":394,"line_end":394,"column_start":1,"column_end":4}},{"value":"! Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18524,"byte_end":18617,"line_start":395,"line_end":395,"column_start":1,"column_end":94}},{"value":"! Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18618,"byte_end":18691,"line_start":396,"line_end":396,"column_start":1,"column_end":74}},{"value":"! For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18692,"byte_end":18758,"line_start":397,"line_end":397,"column_start":1,"column_end":67}},{"value":"! and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18759,"byte_end":18832,"line_start":398,"line_end":398,"column_start":1,"column_end":74}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18833,"byte_end":18836,"line_start":399,"line_end":399,"column_start":1,"column_end":4}},{"value":"! Non ISO week handling is not yet supported.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18837,"byte_end":18884,"line_start":400,"line_end":400,"column_start":1,"column_end":48}},{"value":"! For now you can use the [chrono_ext](https://crates.io/crates/chrono_ext)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18885,"byte_end":18962,"line_start":401,"line_end":401,"column_start":1,"column_end":78}},{"value":"! crate ([sources](https://github.com/bcourtine/chrono-ext/)).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":18963,"byte_end":19027,"line_start":402,"line_end":402,"column_start":1,"column_end":65}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19028,"byte_end":19031,"line_start":403,"line_end":403,"column_start":1,"column_end":4}},{"value":"! Advanced time zone handling is not yet supported.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19032,"byte_end":19085,"line_start":404,"line_end":404,"column_start":1,"column_end":54}},{"value":"! For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19086,"byte_end":19182,"line_start":405,"line_end":405,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19331,"byte_end":19353,"line_start":409,"line_end":409,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19354,"byte_end":19393,"line_start":410,"line_end":410,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19394,"byte_end":19413,"line_start":411,"line_end":411,"column_start":1,"column_end":20}},{"value":"allow(unknown_lints)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":19463,"byte_end":19487,"line_start":413,"line_end":413,"column_start":1,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":37},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22234,"byte_end":22241,"line_start":489,"line_end":489,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":2241},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":2259},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22143,"byte_end":22225,"line_start":488,"line_end":488,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":1471},{"krate":0,"index":1502},{"krate":0,"index":1496},{"krate":0,"index":1498},{"krate":0,"index":1493},{"krate":0,"index":1491},{"krate":0,"index":1486},{"krate":0,"index":1488},{"krate":0,"index":1482},{"krate":0,"index":81},{"krate":0,"index":89},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":126},{"krate":0,"index":185},{"krate":0,"index":221},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":2371},{"krate":0,"index":253},{"krate":0,"index":2373}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"! The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56749,"byte_end":56820,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56821,"byte_end":56824,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! There are four operations provided by the `TimeZone` trait:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56825,"byte_end":56888,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56889,"byte_end":56892,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56893,"byte_end":56954,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"! 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":56955,"byte_end":57014,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"! 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57015,"byte_end":57076,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"! 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57077,"byte_end":57140,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57141,"byte_end":57144,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"! 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57145,"byte_end":57241,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"! 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57242,"byte_end":57338,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"! which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57339,"byte_end":57430,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"! Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57431,"byte_end":57511,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"! but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57512,"byte_end":57580,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"! and provides implementations for 1 and 3.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57581,"byte_end":57626,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"! An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57627,"byte_end":57716,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1473},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58170,"byte_end":58174,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1471},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58042,"byte_end":58089,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58094,"byte_end":58165,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1475},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58248,"byte_end":58254,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1471},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58180,"byte_end":58243,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1478},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58420,"byte_end":58429,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1471},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58263,"byte_end":58339,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58344,"byte_end":58415,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1471},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58021,"byte_end":58032,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> {\n\n    /// Given local time representation is invalid.\n    /// This can occur when, for example, the positive timezone transition.\n    None,\n\n    /// Given local time representation has a single unique result.\n    Single(T),\n\n    /// Given local time representation has multiple results and thus ambiguous.\n    /// This can occur when, for example, the negative timezone transition.\n    Ambiguous(T, T),\n}","parent":null,"children":[{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1478}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":57877,"byte_end":57960,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58579,"byte_end":58585,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58485,"byte_end":58567,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58813,"byte_end":58821,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58719,"byte_end":58801,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59078,"byte_end":59084,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58986,"byte_end":59066,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59331,"byte_end":59334,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59249,"byte_end":59319,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59909,"byte_end":59917,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59684,"byte_end":59755,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59760,"byte_end":59808,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59813,"byte_end":59816,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59821,"byte_end":59883,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59888,"byte_end":59897,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60412,"byte_end":60423,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60184,"byte_end":60258,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60263,"byte_end":60311,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60316,"byte_end":60319,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60324,"byte_end":60386,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60391,"byte_end":60400,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61043,"byte_end":61060,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60717,"byte_end":60804,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60809,"byte_end":60889,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60894,"byte_end":60942,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60947,"byte_end":60950,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":60955,"byte_end":61017,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61022,"byte_end":61031,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61759,"byte_end":61776,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61429,"byte_end":61516,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61521,"byte_end":61605,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61610,"byte_end":61658,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61663,"byte_end":61666,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61671,"byte_end":61733,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":61738,"byte_end":61747,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62477,"byte_end":62493,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62145,"byte_end":62231,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62236,"byte_end":62323,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62328,"byte_end":62376,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62381,"byte_end":62384,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62389,"byte_end":62451,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62456,"byte_end":62465,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62981,"byte_end":62987,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62898,"byte_end":62969,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":99},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63342,"byte_end":63348,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":100}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63289,"byte_end":63331,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63454,"byte_end":63457,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":99},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63383,"byte_end":63446,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":101},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63656,"byte_end":63664,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63484,"byte_end":63502,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63503,"byte_end":63506,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63507,"byte_end":63596,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63597,"byte_end":63645,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":102},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63887,"byte_end":63893,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63686,"byte_end":63716,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63721,"byte_end":63793,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63798,"byte_end":63877,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64510,"byte_end":64513,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63908,"byte_end":63979,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63984,"byte_end":64063,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64068,"byte_end":64071,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64076,"byte_end":64169,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64174,"byte_end":64251,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64256,"byte_end":64259,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64264,"byte_end":64326,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64331,"byte_end":64334,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64339,"byte_end":64352,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64357,"byte_end":64360,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64365,"byte_end":64373,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64378,"byte_end":64410,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64415,"byte_end":64418,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64423,"byte_end":64489,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64494,"byte_end":64502,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65329,"byte_end":65336,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64629,"byte_end":64700,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64705,"byte_end":64784,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64789,"byte_end":64792,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64797,"byte_end":64890,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64895,"byte_end":64972,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64977,"byte_end":64980,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":64985,"byte_end":65055,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65060,"byte_end":65063,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65068,"byte_end":65081,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65086,"byte_end":65089,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65094,"byte_end":65102,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65107,"byte_end":65152,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65157,"byte_end":65160,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65165,"byte_end":65244,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65249,"byte_end":65308,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65313,"byte_end":65321,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66185,"byte_end":66187,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65573,"byte_end":65664,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65669,"byte_end":65748,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65753,"byte_end":65756,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65761,"byte_end":65854,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65859,"byte_end":65936,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65941,"byte_end":65944,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":65949,"byte_end":66004,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66009,"byte_end":66012,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66017,"byte_end":66030,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66035,"byte_end":66038,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66043,"byte_end":66051,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66056,"byte_end":66088,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66093,"byte_end":66096,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66101,"byte_end":66164,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66169,"byte_end":66177,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66738,"byte_end":66744,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66291,"byte_end":66382,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66387,"byte_end":66466,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66471,"byte_end":66474,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66479,"byte_end":66572,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66577,"byte_end":66654,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66659,"byte_end":66662,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66667,"byte_end":66730,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67722,"byte_end":67728,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":66969,"byte_end":67060,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67065,"byte_end":67091,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67096,"byte_end":67175,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67180,"byte_end":67251,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67256,"byte_end":67259,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67264,"byte_end":67357,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67362,"byte_end":67439,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67444,"byte_end":67447,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67452,"byte_end":67515,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67520,"byte_end":67523,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67528,"byte_end":67541,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67546,"byte_end":67549,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67554,"byte_end":67562,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67567,"byte_end":67608,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67613,"byte_end":67616,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67621,"byte_end":67701,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67706,"byte_end":67714,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68419,"byte_end":68429,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67857,"byte_end":67948,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67953,"byte_end":67979,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":67984,"byte_end":68063,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68068,"byte_end":68139,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68144,"byte_end":68147,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68152,"byte_end":68245,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68250,"byte_end":68327,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68332,"byte_end":68335,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68340,"byte_end":68411,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69254,"byte_end":69263,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68679,"byte_end":68741,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68746,"byte_end":68806,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68811,"byte_end":68882,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68887,"byte_end":68890,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68895,"byte_end":68970,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":68975,"byte_end":69052,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69057,"byte_end":69060,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69065,"byte_end":69078,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69083,"byte_end":69086,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69091,"byte_end":69099,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69104,"byte_end":69136,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69141,"byte_end":69144,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69149,"byte_end":69233,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69238,"byte_end":69246,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69746,"byte_end":69759,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69374,"byte_end":69436,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69441,"byte_end":69501,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69506,"byte_end":69577,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69582,"byte_end":69585,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69590,"byte_end":69662,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":69667,"byte_end":69738,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70499,"byte_end":70515,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"pub fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70020,"byte_end":70087,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70092,"byte_end":70153,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70158,"byte_end":70161,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70166,"byte_end":70235,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70240,"byte_end":70311,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70316,"byte_end":70319,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70324,"byte_end":70337,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70342,"byte_end":70345,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70350,"byte_end":70358,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70363,"byte_end":70395,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70400,"byte_end":70403,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70408,"byte_end":70478,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70483,"byte_end":70491,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71246,"byte_end":71266,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"pub fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70618,"byte_end":70685,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70690,"byte_end":70751,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70756,"byte_end":70759,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70764,"byte_end":70767,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70772,"byte_end":70842,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70847,"byte_end":70902,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70907,"byte_end":70933,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70938,"byte_end":70941,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70946,"byte_end":70959,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70964,"byte_end":70967,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70972,"byte_end":70980,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":70985,"byte_end":71030,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71035,"byte_end":71083,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71088,"byte_end":71159,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71164,"byte_end":71214,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71219,"byte_end":71225,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71230,"byte_end":71238,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71968,"byte_end":71983,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"pub fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71545,"byte_end":71611,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71616,"byte_end":71677,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71682,"byte_end":71685,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71690,"byte_end":71759,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71764,"byte_end":71775,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71780,"byte_end":71783,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71788,"byte_end":71801,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71806,"byte_end":71809,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71814,"byte_end":71822,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71827,"byte_end":71859,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71864,"byte_end":71867,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71872,"byte_end":71947,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":71952,"byte_end":71960,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72770,"byte_end":72787,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72266,"byte_end":72322,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72327,"byte_end":72376,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72381,"byte_end":72451,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72456,"byte_end":72494,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72499,"byte_end":72502,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72507,"byte_end":72581,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72586,"byte_end":72644,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72649,"byte_end":72652,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72657,"byte_end":72727,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":72732,"byte_end":72762,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73058,"byte_end":73069,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73003,"byte_end":73050,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73181,"byte_end":73203,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73107,"byte_end":73173,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73343,"byte_end":73369,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73265,"byte_end":73335,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73519,"byte_end":73534,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73435,"byte_end":73511,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73886,"byte_end":73905,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":73794,"byte_end":73878,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74179,"byte_end":74199,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74104,"byte_end":74171,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74325,"byte_end":74349,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74246,"byte_end":74317,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74556,"byte_end":74569,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74400,"byte_end":74451,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74456,"byte_end":74548,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74842,"byte_end":74859,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":101},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74682,"byte_end":74737,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":74742,"byte_end":74834,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1505},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78187,"byte_end":78198,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1506}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":77811,"byte_end":77882,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":77883,"byte_end":77886,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":77887,"byte_end":77944,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":77945,"byte_end":78008,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78009,"byte_end":78082,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78083,"byte_end":78131,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78802,"byte_end":78806,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78253,"byte_end":78341,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78346,"byte_end":78399,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78404,"byte_end":78407,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78412,"byte_end":78450,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78455,"byte_end":78458,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78463,"byte_end":78476,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78481,"byte_end":78484,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78489,"byte_end":78497,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78502,"byte_end":78542,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78547,"byte_end":78567,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78572,"byte_end":78636,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78641,"byte_end":78705,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78710,"byte_end":78777,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78782,"byte_end":78790,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79141,"byte_end":79149,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78924,"byte_end":79012,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79017,"byte_end":79070,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79075,"byte_end":79078,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79083,"byte_end":79129,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79891,"byte_end":79895,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79342,"byte_end":79430,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79435,"byte_end":79488,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79493,"byte_end":79496,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79501,"byte_end":79539,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79544,"byte_end":79547,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79552,"byte_end":79565,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79570,"byte_end":79573,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79578,"byte_end":79586,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79591,"byte_end":79631,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79636,"byte_end":79656,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79661,"byte_end":79725,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79730,"byte_end":79794,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79799,"byte_end":79866,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":79871,"byte_end":79879,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80230,"byte_end":80238,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80013,"byte_end":80101,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80106,"byte_end":80159,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80164,"byte_end":80167,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80172,"byte_end":80218,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80537,"byte_end":80552,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80432,"byte_end":80511,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80516,"byte_end":80525,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80714,"byte_end":80729,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80609,"byte_end":80688,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80693,"byte_end":80702,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88160,"byte_end":88165,"line_start":90,"line_end":90,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87704,"byte_end":87779,"line_start":75,"line_end":75,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87780,"byte_end":87783,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87784,"byte_end":87841,"line_start":77,"line_end":77,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87842,"byte_end":87917,"line_start":78,"line_end":78,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87918,"byte_end":87932,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87933,"byte_end":87936,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87937,"byte_end":87950,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87951,"byte_end":87954,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87955,"byte_end":87963,"line_start":83,"line_end":83,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":87964,"byte_end":88008,"line_start":84,"line_end":84,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88009,"byte_end":88012,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88013,"byte_end":88056,"line_start":86,"line_end":86,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88057,"byte_end":88109,"line_start":87,"line_end":87,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88110,"byte_end":88118,"line_start":88,"line_end":88,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88256,"byte_end":88261,"line_start":94,"line_end":94,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"pub fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88185,"byte_end":88244,"line_start":93,"line_end":93,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88487,"byte_end":88490,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"pub fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88320,"byte_end":88383,"line_start":98,"line_end":98,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n              \"wasmbind\")))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88388,"byte_end":88475,"line_start":99,"line_end":99,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1527},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94397,"byte_end":94400,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":93751,"byte_end":93846,"line_start":18,"line_end":18,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":93847,"byte_end":93909,"line_start":19,"line_end":19,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":93910,"byte_end":93913,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":93914,"byte_end":93971,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":93972,"byte_end":94043,"line_start":22,"line_end":22,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94044,"byte_end":94058,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94059,"byte_end":94062,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94063,"byte_end":94076,"line_start":25,"line_end":25,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94077,"byte_end":94080,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94081,"byte_end":94089,"line_start":27,"line_end":27,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94090,"byte_end":94147,"line_start":28,"line_end":28,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94148,"byte_end":94151,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94152,"byte_end":94234,"line_start":30,"line_end":30,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94235,"byte_end":94238,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94239,"byte_end":94280,"line_start":32,"line_end":32,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94281,"byte_end":94338,"line_start":33,"line_end":33,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94339,"byte_end":94347,"line_start":34,"line_end":34,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94515,"byte_end":94520,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"pub fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94444,"byte_end":94503,"line_start":40,"line_end":40,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94742,"byte_end":94745,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"pub fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94575,"byte_end":94638,"line_start":45,"line_end":45,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", not(target_os = \"wasi\"), feature =\n              \"wasmbind\")))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94643,"byte_end":94730,"line_start":46,"line_end":46,"column_start":5,"column_end":92}}]},{"kind":"Mod","id":{"krate":0,"index":254},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23009,"byte_end":23014,"line_start":524,"line_end":524,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":393},{"krate":0,"index":521},{"krate":0,"index":601},{"krate":0,"index":614},{"krate":0,"index":701},{"krate":0,"index":702},{"krate":0,"index":703},{"krate":0,"index":704},{"krate":0,"index":705},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"! Date and time types unconcerned with timezones.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23021,"byte_end":23072,"line_start":525,"line_end":525,"column_start":5,"column_end":56}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23077,"byte_end":23080,"line_start":526,"line_end":526,"column_start":5,"column_end":8}},{"value":"! They are primarily building blocks for other types","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23085,"byte_end":23139,"line_start":527,"line_end":527,"column_start":5,"column_end":59}},{"value":"! (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23144,"byte_end":23199,"line_start":528,"line_end":528,"column_start":5,"column_end":60}},{"value":"! but can be also used for the simpler date and time handling.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":23204,"byte_end":23268,"line_start":529,"line_end":529,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1538},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100417,"byte_end":100426,"line_start":99,"line_end":99,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1539}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":97839,"byte_end":97883,"line_start":50,"line_end":50,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":97884,"byte_end":97947,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":97948,"byte_end":97996,"line_start":52,"line_end":52,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":97997,"byte_end":98066,"line_start":53,"line_end":53,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98067,"byte_end":98070,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98071,"byte_end":98090,"line_start":55,"line_end":55,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98091,"byte_end":98094,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98095,"byte_end":98171,"line_start":57,"line_end":57,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98172,"byte_end":98244,"line_start":58,"line_end":58,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98245,"byte_end":98248,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98249,"byte_end":98345,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98346,"byte_end":98433,"line_start":61,"line_end":61,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98434,"byte_end":98523,"line_start":62,"line_end":62,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98524,"byte_end":98527,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98528,"byte_end":98618,"line_start":64,"line_end":64,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98619,"byte_end":98700,"line_start":65,"line_end":65,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98701,"byte_end":98787,"line_start":66,"line_end":66,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98788,"byte_end":98791,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98792,"byte_end":98869,"line_start":68,"line_end":68,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98870,"byte_end":98941,"line_start":69,"line_end":69,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":98942,"byte_end":99024,"line_start":70,"line_end":70,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99025,"byte_end":99028,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99029,"byte_end":99044,"line_start":72,"line_end":72,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99045,"byte_end":99048,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99049,"byte_end":99119,"line_start":74,"line_end":74,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99120,"byte_end":99193,"line_start":75,"line_end":75,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99194,"byte_end":99197,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99198,"byte_end":99286,"line_start":77,"line_end":77,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99287,"byte_end":99357,"line_start":78,"line_end":78,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99358,"byte_end":99361,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99362,"byte_end":99456,"line_start":80,"line_end":80,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99457,"byte_end":99537,"line_start":81,"line_end":81,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99538,"byte_end":99541,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99542,"byte_end":99631,"line_start":83,"line_end":83,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99632,"byte_end":99712,"line_start":84,"line_end":84,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99713,"byte_end":99716,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99717,"byte_end":99797,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99798,"byte_end":99874,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99875,"byte_end":99949,"line_start":88,"line_end":88,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":99950,"byte_end":100001,"line_start":89,"line_end":89,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100002,"byte_end":100005,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100006,"byte_end":100024,"line_start":91,"line_end":91,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100025,"byte_end":100028,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100029,"byte_end":100120,"line_start":93,"line_end":93,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100121,"byte_end":100194,"line_start":94,"line_end":94,"column_start":1,"column_end":74}},{"value":"/ The year number is the same as that of the [calendar date](#calendar-date).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100195,"byte_end":100274,"line_start":95,"line_end":95,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100275,"byte_end":100278,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100279,"byte_end":100344,"line_start":97,"line_end":97,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":295},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100545,"byte_end":100553,"line_start":104,"line_end":104,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100473,"byte_end":100534,"line_start":103,"line_end":103,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":296},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100703,"byte_end":100711,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":100630,"byte_end":100692,"line_start":105,"line_end":105,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103075,"byte_end":103083,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102345,"byte_end":102413,"line_start":152,"line_end":152,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102418,"byte_end":102444,"line_start":153,"line_end":153,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102449,"byte_end":102452,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102457,"byte_end":102519,"line_start":155,"line_end":155,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102524,"byte_end":102527,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102532,"byte_end":102545,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102550,"byte_end":102553,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102558,"byte_end":102566,"line_start":159,"line_end":159,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102571,"byte_end":102618,"line_start":160,"line_end":160,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102623,"byte_end":102626,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102631,"byte_end":102676,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102681,"byte_end":102712,"line_start":163,"line_end":163,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102717,"byte_end":102746,"line_start":164,"line_end":164,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102751,"byte_end":102779,"line_start":165,"line_end":165,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102784,"byte_end":102831,"line_start":166,"line_end":166,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102836,"byte_end":102878,"line_start":167,"line_end":167,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102883,"byte_end":102923,"line_start":168,"line_end":168,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102928,"byte_end":102970,"line_start":169,"line_end":169,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":102975,"byte_end":103050,"line_start":170,"line_end":170,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103055,"byte_end":103063,"line_start":171,"line_end":171,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103934,"byte_end":103946,"line_start":195,"line_end":195,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103232,"byte_end":103300,"line_start":176,"line_end":176,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103305,"byte_end":103331,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103336,"byte_end":103339,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103344,"byte_end":103414,"line_start":179,"line_end":179,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103419,"byte_end":103422,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103427,"byte_end":103440,"line_start":181,"line_end":181,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103445,"byte_end":103448,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103453,"byte_end":103461,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103466,"byte_end":103492,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103497,"byte_end":103500,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103505,"byte_end":103552,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103557,"byte_end":103560,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103565,"byte_end":103614,"line_start":188,"line_end":188,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103619,"byte_end":103668,"line_start":189,"line_end":189,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103673,"byte_end":103722,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103727,"byte_end":103798,"line_start":191,"line_end":191,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103803,"byte_end":103853,"line_start":192,"line_end":192,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103858,"byte_end":103909,"line_start":193,"line_end":193,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":103914,"byte_end":103922,"line_start":194,"line_end":194,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104840,"byte_end":104847,"line_start":220,"line_end":220,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104125,"byte_end":104191,"line_start":200,"line_end":200,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104196,"byte_end":104227,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104232,"byte_end":104235,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104240,"byte_end":104303,"line_start":203,"line_end":203,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104308,"byte_end":104311,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104316,"byte_end":104329,"line_start":205,"line_end":205,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104334,"byte_end":104337,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104342,"byte_end":104350,"line_start":207,"line_end":207,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104355,"byte_end":104402,"line_start":208,"line_end":208,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104407,"byte_end":104410,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104415,"byte_end":104456,"line_start":210,"line_end":210,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104461,"byte_end":104493,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104498,"byte_end":104529,"line_start":212,"line_end":212,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104534,"byte_end":104563,"line_start":213,"line_end":213,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104568,"byte_end":104596,"line_start":214,"line_end":214,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104601,"byte_end":104643,"line_start":215,"line_end":215,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104648,"byte_end":104688,"line_start":216,"line_end":216,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104693,"byte_end":104735,"line_start":217,"line_end":217,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104740,"byte_end":104815,"line_start":218,"line_end":218,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104820,"byte_end":104828,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105717,"byte_end":105728,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":104984,"byte_end":105050,"line_start":224,"line_end":224,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105055,"byte_end":105086,"line_start":225,"line_end":225,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105091,"byte_end":105094,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105099,"byte_end":105170,"line_start":227,"line_end":227,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105175,"byte_end":105178,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105183,"byte_end":105196,"line_start":229,"line_end":229,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105201,"byte_end":105204,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105209,"byte_end":105217,"line_start":231,"line_end":231,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105222,"byte_end":105248,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105253,"byte_end":105256,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105261,"byte_end":105306,"line_start":234,"line_end":234,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105311,"byte_end":105314,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105319,"byte_end":105365,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105370,"byte_end":105414,"line_start":237,"line_end":237,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105419,"byte_end":105465,"line_start":238,"line_end":238,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105470,"byte_end":105516,"line_start":239,"line_end":239,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105521,"byte_end":105589,"line_start":240,"line_end":240,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105594,"byte_end":105640,"line_start":241,"line_end":241,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105645,"byte_end":105692,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105697,"byte_end":105705,"line_start":243,"line_end":243,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106734,"byte_end":106745,"line_start":270,"line_end":270,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105894,"byte_end":105958,"line_start":249,"line_end":249,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":105963,"byte_end":106007,"line_start":250,"line_end":250,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106012,"byte_end":106088,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106093,"byte_end":106096,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106101,"byte_end":106164,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106169,"byte_end":106172,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106177,"byte_end":106190,"line_start":255,"line_end":255,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106195,"byte_end":106198,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106203,"byte_end":106211,"line_start":257,"line_end":257,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106216,"byte_end":106263,"line_start":258,"line_end":258,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106268,"byte_end":106271,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106276,"byte_end":106335,"line_start":260,"line_end":260,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106340,"byte_end":106382,"line_start":261,"line_end":261,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106387,"byte_end":106427,"line_start":262,"line_end":262,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106432,"byte_end":106474,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106479,"byte_end":106510,"line_start":264,"line_end":264,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106515,"byte_end":106544,"line_start":265,"line_end":265,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106549,"byte_end":106577,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106582,"byte_end":106629,"line_start":267,"line_end":267,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106634,"byte_end":106709,"line_start":268,"line_end":268,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106714,"byte_end":106722,"line_start":269,"line_end":269,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":305},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":109108,"byte_end":109123,"line_start":318,"line_end":318,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106907,"byte_end":106971,"line_start":274,"line_end":274,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":106976,"byte_end":107020,"line_start":275,"line_end":275,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107025,"byte_end":107101,"line_start":276,"line_end":276,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107106,"byte_end":107109,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107114,"byte_end":107185,"line_start":278,"line_end":278,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107190,"byte_end":107193,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107198,"byte_end":107211,"line_start":280,"line_end":280,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107216,"byte_end":107219,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107224,"byte_end":107232,"line_start":282,"line_end":282,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107237,"byte_end":107274,"line_start":283,"line_end":283,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107279,"byte_end":107282,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107287,"byte_end":107326,"line_start":285,"line_end":285,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107331,"byte_end":107384,"line_start":286,"line_end":286,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107389,"byte_end":107392,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107397,"byte_end":107458,"line_start":288,"line_end":288,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107463,"byte_end":107547,"line_start":289,"line_end":289,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107552,"byte_end":107637,"line_start":290,"line_end":290,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107642,"byte_end":107704,"line_start":291,"line_end":291,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107709,"byte_end":107712,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107717,"byte_end":107781,"line_start":293,"line_end":293,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107786,"byte_end":107851,"line_start":294,"line_end":294,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107856,"byte_end":107864,"line_start":295,"line_end":295,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107869,"byte_end":107872,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107877,"byte_end":107956,"line_start":297,"line_end":297,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107961,"byte_end":107964,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107969,"byte_end":107977,"line_start":299,"line_end":299,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":107982,"byte_end":108021,"line_start":300,"line_end":300,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108026,"byte_end":108067,"line_start":301,"line_end":301,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108072,"byte_end":108127,"line_start":302,"line_end":302,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108132,"byte_end":108169,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108174,"byte_end":108239,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108244,"byte_end":108310,"line_start":305,"line_end":305,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108315,"byte_end":108401,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108406,"byte_end":108468,"line_start":307,"line_end":307,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108473,"byte_end":108558,"line_start":308,"line_end":308,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108563,"byte_end":108566,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108571,"byte_end":108636,"line_start":310,"line_end":310,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108641,"byte_end":108706,"line_start":311,"line_end":311,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108711,"byte_end":108748,"line_start":312,"line_end":312,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108753,"byte_end":108839,"line_start":313,"line_end":313,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108844,"byte_end":108928,"line_start":314,"line_end":314,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":108933,"byte_end":108995,"line_start":315,"line_end":315,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":109000,"byte_end":109083,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":109088,"byte_end":109096,"line_start":317,"line_end":317,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112066,"byte_end":112087,"line_start":393,"line_end":393,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110335,"byte_end":110424,"line_start":349,"line_end":349,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110429,"byte_end":110458,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110463,"byte_end":110466,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110471,"byte_end":110510,"line_start":352,"line_end":352,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110515,"byte_end":110518,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110523,"byte_end":110536,"line_start":354,"line_end":354,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110541,"byte_end":110544,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110549,"byte_end":110557,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110562,"byte_end":110609,"line_start":357,"line_end":357,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110614,"byte_end":110617,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110622,"byte_end":110675,"line_start":359,"line_end":359,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110680,"byte_end":110755,"line_start":360,"line_end":360,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110760,"byte_end":110791,"line_start":361,"line_end":361,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110796,"byte_end":110825,"line_start":362,"line_end":362,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110830,"byte_end":110858,"line_start":363,"line_end":363,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110863,"byte_end":110910,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110915,"byte_end":110957,"line_start":365,"line_end":365,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":110962,"byte_end":111002,"line_start":366,"line_end":366,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111007,"byte_end":111049,"line_start":367,"line_end":367,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111054,"byte_end":111062,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111067,"byte_end":111070,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111075,"byte_end":111118,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111123,"byte_end":111175,"line_start":371,"line_end":371,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111180,"byte_end":111242,"line_start":372,"line_end":372,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111247,"byte_end":111281,"line_start":373,"line_end":373,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111286,"byte_end":111340,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111345,"byte_end":111348,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111353,"byte_end":111361,"line_start":376,"line_end":376,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111366,"byte_end":111392,"line_start":377,"line_end":377,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111397,"byte_end":111400,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111405,"byte_end":111446,"line_start":379,"line_end":379,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111451,"byte_end":111512,"line_start":380,"line_end":380,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111517,"byte_end":111573,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111578,"byte_end":111632,"line_start":382,"line_end":382,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111637,"byte_end":111642,"line_start":383,"line_end":383,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111647,"byte_end":111650,"line_start":384,"line_end":384,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111655,"byte_end":111728,"line_start":385,"line_end":385,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111733,"byte_end":111799,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111804,"byte_end":111807,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111812,"byte_end":111878,"line_start":388,"line_end":388,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111883,"byte_end":111953,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":111958,"byte_end":112027,"line_start":390,"line_end":390,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112032,"byte_end":112040,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112045,"byte_end":112054,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113036,"byte_end":113061,"line_start":417,"line_end":417,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112204,"byte_end":112293,"line_start":397,"line_end":397,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112298,"byte_end":112327,"line_start":398,"line_end":398,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112332,"byte_end":112335,"line_start":399,"line_end":399,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112340,"byte_end":112387,"line_start":400,"line_end":400,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112392,"byte_end":112395,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112400,"byte_end":112413,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112418,"byte_end":112421,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112426,"byte_end":112434,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112439,"byte_end":112465,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112470,"byte_end":112473,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112478,"byte_end":112540,"line_start":407,"line_end":407,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112545,"byte_end":112584,"line_start":408,"line_end":408,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112589,"byte_end":112592,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112597,"byte_end":112670,"line_start":410,"line_end":410,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112675,"byte_end":112745,"line_start":411,"line_end":411,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112750,"byte_end":112822,"line_start":412,"line_end":412,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112827,"byte_end":112899,"line_start":413,"line_end":413,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112904,"byte_end":112955,"line_start":414,"line_end":414,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":112960,"byte_end":113011,"line_start":415,"line_end":415,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113016,"byte_end":113024,"line_start":416,"line_end":416,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114771,"byte_end":114792,"line_start":450,"line_end":450,"column_start":12,"column_end":33},"name":"from_weekday_of_month","qualname":"<NaiveDate>::from_weekday_of_month","value":"pub fn from_weekday_of_month(i32, u32, Weekday, u8) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113487,"byte_end":113580,"line_start":425,"line_end":425,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113585,"byte_end":113679,"line_start":426,"line_end":426,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113684,"byte_end":113769,"line_start":427,"line_end":427,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113774,"byte_end":113777,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113782,"byte_end":113794,"line_start":429,"line_end":429,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113799,"byte_end":113802,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ The resulting `NaiveDate` is guaranteed to be in `month`.  If `n` is larger than the number","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113807,"byte_end":113902,"line_start":431,"line_end":431,"column_start":5,"column_end":100}},{"value":"/ of `weekday` in `month` (eg. the 6th Friday of March 2017) then this function will panic.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":113907,"byte_end":114000,"line_start":432,"line_end":432,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114005,"byte_end":114008,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ `n` is 1-indexed.  Passing `n=0` will cause a panic.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114013,"byte_end":114069,"line_start":434,"line_end":434,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114074,"byte_end":114077,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114082,"byte_end":114095,"line_start":436,"line_end":436,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114100,"byte_end":114103,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114108,"byte_end":114116,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114121,"byte_end":114158,"line_start":439,"line_end":439,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114163,"byte_end":114166,"line_start":440,"line_end":440,"column_start":5,"column_end":8}},{"value":"/ let from_weekday_of_month = NaiveDate::from_weekday_of_month;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114171,"byte_end":114236,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114241,"byte_end":114280,"line_start":442,"line_end":442,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114285,"byte_end":114288,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Wed, 1), from_ymd(2018, 8, 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114293,"byte_end":114379,"line_start":444,"line_end":444,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 1), from_ymd(2018, 8, 3));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114384,"byte_end":114470,"line_start":445,"line_end":445,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Tue, 2), from_ymd(2018, 8, 14));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114475,"byte_end":114562,"line_start":446,"line_end":446,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 4), from_ymd(2018, 8, 24));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114567,"byte_end":114654,"line_start":447,"line_end":447,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(from_weekday_of_month(2018, 8, Weekday::Fri, 5), from_ymd(2018, 8, 31));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114659,"byte_end":114746,"line_start":448,"line_end":448,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114751,"byte_end":114759,"line_start":449,"line_end":449,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115667,"byte_end":115692,"line_start":466,"line_end":466,"column_start":12,"column_end":37},"name":"from_weekday_of_month_opt","qualname":"<NaiveDate>::from_weekday_of_month_opt","value":"pub fn from_weekday_of_month_opt(i32, u32, Weekday, u8) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week\n since the beginning of the given month.  For instance, if you want the 2nd Friday of March\n 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` by counting the number of occurrences of a particular day-of-week","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":114965,"byte_end":115058,"line_start":454,"line_end":454,"column_start":5,"column_end":98}},{"value":"/ since the beginning of the given month.  For instance, if you want the 2nd Friday of March","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115063,"byte_end":115157,"line_start":455,"line_end":455,"column_start":5,"column_end":99}},{"value":"/ 2017, you would use `NaiveDate::from_weekday_of_month(2017, 3, Weekday::Fri, 2)`.  `n` is 1-indexed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115162,"byte_end":115266,"line_start":456,"line_end":456,"column_start":5,"column_end":109}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115271,"byte_end":115274,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115279,"byte_end":115287,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115292,"byte_end":115329,"line_start":459,"line_end":459,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(NaiveDate::from_weekday_of_month_opt(2017, 3, Weekday::Fri, 2),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115334,"byte_end":115412,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/            NaiveDate::from_ymd_opt(2017, 3, 10))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115417,"byte_end":115469,"line_start":461,"line_end":461,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115474,"byte_end":115482,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115487,"byte_end":115490,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if `n` out-of-range; ie. if `n` is larger than the number of `weekday` in","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115495,"byte_end":115587,"line_start":464,"line_end":464,"column_start":5,"column_end":97}},{"value":"/ `month` (eg. the 6th Friday of March 2017), or if `n == 0`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":115592,"byte_end":115655,"line_start":465,"line_end":465,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":310},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117712,"byte_end":117726,"line_start":523,"line_end":523,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116143,"byte_end":116226,"line_start":481,"line_end":481,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116231,"byte_end":116301,"line_start":482,"line_end":482,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116306,"byte_end":116344,"line_start":483,"line_end":483,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116349,"byte_end":116352,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116357,"byte_end":116370,"line_start":485,"line_end":485,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116375,"byte_end":116378,"line_start":486,"line_end":486,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116383,"byte_end":116391,"line_start":487,"line_end":487,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116396,"byte_end":116422,"line_start":488,"line_end":488,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116427,"byte_end":116430,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116435,"byte_end":116486,"line_start":490,"line_end":490,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116491,"byte_end":116494,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116499,"byte_end":116555,"line_start":492,"line_end":492,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116560,"byte_end":116612,"line_start":493,"line_end":493,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116617,"byte_end":116669,"line_start":494,"line_end":494,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116674,"byte_end":116726,"line_start":495,"line_end":495,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116731,"byte_end":116739,"line_start":496,"line_end":496,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116744,"byte_end":116747,"line_start":497,"line_end":497,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116752,"byte_end":116810,"line_start":498,"line_end":498,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116815,"byte_end":116818,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116823,"byte_end":116831,"line_start":500,"line_end":500,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116836,"byte_end":116864,"line_start":501,"line_end":501,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116869,"byte_end":116922,"line_start":502,"line_end":502,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":116927,"byte_end":117008,"line_start":503,"line_end":503,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117013,"byte_end":117066,"line_start":504,"line_end":504,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117071,"byte_end":117079,"line_start":505,"line_end":505,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117084,"byte_end":117087,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117092,"byte_end":117149,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117154,"byte_end":117157,"line_start":508,"line_end":508,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117162,"byte_end":117170,"line_start":509,"line_end":509,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117175,"byte_end":117203,"line_start":510,"line_end":510,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117208,"byte_end":117261,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117266,"byte_end":117322,"line_start":512,"line_end":512,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117327,"byte_end":117389,"line_start":513,"line_end":513,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117394,"byte_end":117402,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117407,"byte_end":117410,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117415,"byte_end":117497,"line_start":516,"line_end":516,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117502,"byte_end":117505,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117510,"byte_end":117518,"line_start":518,"line_end":518,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117523,"byte_end":117551,"line_start":519,"line_end":519,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117556,"byte_end":117609,"line_start":520,"line_end":520,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117614,"byte_end":117687,"line_start":521,"line_end":521,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117692,"byte_end":117700,"line_start":522,"line_end":522,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118375,"byte_end":118383,"line_start":544,"line_end":544,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117914,"byte_end":117990,"line_start":529,"line_end":529,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":117995,"byte_end":117998,"line_start":530,"line_end":530,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118003,"byte_end":118016,"line_start":531,"line_end":531,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118021,"byte_end":118024,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118029,"byte_end":118037,"line_start":533,"line_end":533,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118042,"byte_end":118096,"line_start":534,"line_end":534,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118101,"byte_end":118104,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118109,"byte_end":118153,"line_start":536,"line_end":536,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118158,"byte_end":118213,"line_start":537,"line_end":537,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118218,"byte_end":118221,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118226,"byte_end":118268,"line_start":539,"line_end":539,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118273,"byte_end":118302,"line_start":540,"line_end":540,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118307,"byte_end":118336,"line_start":541,"line_end":541,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118341,"byte_end":118349,"line_start":542,"line_end":542,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118354,"byte_end":118363,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119199,"byte_end":119206,"line_start":568,"line_end":568,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118478,"byte_end":118557,"line_start":548,"line_end":548,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118562,"byte_end":118565,"line_start":549,"line_end":549,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118570,"byte_end":118653,"line_start":550,"line_end":550,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118658,"byte_end":118732,"line_start":551,"line_end":551,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118737,"byte_end":118740,"line_start":552,"line_end":552,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118745,"byte_end":118794,"line_start":553,"line_end":553,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118799,"byte_end":118802,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118807,"byte_end":118820,"line_start":555,"line_end":555,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118825,"byte_end":118828,"line_start":556,"line_end":556,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118833,"byte_end":118841,"line_start":557,"line_end":557,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118846,"byte_end":118918,"line_start":558,"line_end":558,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118923,"byte_end":118926,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118931,"byte_end":118975,"line_start":560,"line_end":560,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118980,"byte_end":118983,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":118988,"byte_end":119038,"line_start":562,"line_end":562,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119043,"byte_end":119075,"line_start":563,"line_end":563,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119080,"byte_end":119123,"line_start":564,"line_end":564,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119128,"byte_end":119160,"line_start":565,"line_end":565,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119165,"byte_end":119173,"line_start":566,"line_end":566,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119178,"byte_end":119187,"line_start":567,"line_end":567,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":313},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120092,"byte_end":120103,"line_start":591,"line_end":591,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119339,"byte_end":119418,"line_start":572,"line_end":572,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119423,"byte_end":119426,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119431,"byte_end":119514,"line_start":574,"line_end":574,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119519,"byte_end":119597,"line_start":575,"line_end":575,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119602,"byte_end":119605,"line_start":576,"line_end":576,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119610,"byte_end":119667,"line_start":577,"line_end":577,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119672,"byte_end":119675,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119680,"byte_end":119693,"line_start":579,"line_end":579,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119698,"byte_end":119701,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119706,"byte_end":119714,"line_start":581,"line_end":581,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119719,"byte_end":119745,"line_start":582,"line_end":582,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119750,"byte_end":119753,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119758,"byte_end":119802,"line_start":584,"line_end":584,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119807,"byte_end":119856,"line_start":585,"line_end":585,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119861,"byte_end":119945,"line_start":586,"line_end":586,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":119950,"byte_end":119999,"line_start":587,"line_end":587,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120004,"byte_end":120053,"line_start":588,"line_end":588,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120058,"byte_end":120066,"line_start":589,"line_end":589,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120071,"byte_end":120080,"line_start":590,"line_end":590,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121042,"byte_end":121055,"line_start":616,"line_end":616,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120260,"byte_end":120352,"line_start":595,"line_end":595,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120357,"byte_end":120360,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120365,"byte_end":120406,"line_start":597,"line_end":597,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120411,"byte_end":120501,"line_start":598,"line_end":598,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120506,"byte_end":120509,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120514,"byte_end":120576,"line_start":600,"line_end":600,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120581,"byte_end":120584,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120589,"byte_end":120602,"line_start":602,"line_end":602,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120607,"byte_end":120610,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120615,"byte_end":120623,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120628,"byte_end":120700,"line_start":605,"line_end":605,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120705,"byte_end":120708,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120713,"byte_end":120757,"line_start":607,"line_end":607,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120762,"byte_end":120765,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120770,"byte_end":120831,"line_start":609,"line_end":609,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120836,"byte_end":120868,"line_start":610,"line_end":610,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120873,"byte_end":120916,"line_start":611,"line_end":611,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120921,"byte_end":120953,"line_start":612,"line_end":612,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":120958,"byte_end":121003,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121008,"byte_end":121016,"line_start":614,"line_end":614,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121021,"byte_end":121030,"line_start":615,"line_end":615,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122128,"byte_end":122145,"line_start":641,"line_end":641,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121213,"byte_end":121305,"line_start":620,"line_end":620,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121310,"byte_end":121313,"line_start":621,"line_end":621,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121318,"byte_end":121359,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121364,"byte_end":121454,"line_start":623,"line_end":623,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121459,"byte_end":121462,"line_start":624,"line_end":624,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121467,"byte_end":121537,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121542,"byte_end":121545,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121550,"byte_end":121563,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121568,"byte_end":121571,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121576,"byte_end":121584,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121589,"byte_end":121615,"line_start":630,"line_end":630,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121620,"byte_end":121623,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121628,"byte_end":121672,"line_start":632,"line_end":632,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121677,"byte_end":121739,"line_start":633,"line_end":633,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121744,"byte_end":121821,"line_start":634,"line_end":634,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121826,"byte_end":121888,"line_start":635,"line_end":635,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121893,"byte_end":121955,"line_start":636,"line_end":636,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":121960,"byte_end":122022,"line_start":637,"line_end":637,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122027,"byte_end":122089,"line_start":638,"line_end":638,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122094,"byte_end":122102,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122107,"byte_end":122116,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123164,"byte_end":123177,"line_start":672,"line_end":672,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122374,"byte_end":122466,"line_start":651,"line_end":651,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122471,"byte_end":122474,"line_start":652,"line_end":652,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122479,"byte_end":122524,"line_start":653,"line_end":653,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122529,"byte_end":122619,"line_start":654,"line_end":654,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122624,"byte_end":122627,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122632,"byte_end":122694,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122699,"byte_end":122702,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122707,"byte_end":122720,"line_start":658,"line_end":658,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122725,"byte_end":122728,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122733,"byte_end":122741,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122746,"byte_end":122818,"line_start":661,"line_end":661,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122823,"byte_end":122826,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122831,"byte_end":122875,"line_start":663,"line_end":663,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122880,"byte_end":122883,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122888,"byte_end":122953,"line_start":665,"line_end":665,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122958,"byte_end":122990,"line_start":666,"line_end":666,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":122995,"byte_end":123038,"line_start":667,"line_end":667,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123043,"byte_end":123075,"line_start":668,"line_end":668,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123080,"byte_end":123125,"line_start":669,"line_end":669,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123130,"byte_end":123138,"line_start":670,"line_end":670,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123143,"byte_end":123152,"line_start":671,"line_end":671,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":319},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124278,"byte_end":124295,"line_start":697,"line_end":697,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123335,"byte_end":123427,"line_start":676,"line_end":676,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123432,"byte_end":123435,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123440,"byte_end":123485,"line_start":678,"line_end":678,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123490,"byte_end":123580,"line_start":679,"line_end":679,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123585,"byte_end":123588,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123593,"byte_end":123663,"line_start":681,"line_end":681,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123668,"byte_end":123671,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123676,"byte_end":123689,"line_start":683,"line_end":683,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123694,"byte_end":123697,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123702,"byte_end":123710,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123715,"byte_end":123741,"line_start":686,"line_end":686,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123746,"byte_end":123749,"line_start":687,"line_end":687,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123754,"byte_end":123798,"line_start":688,"line_end":688,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123803,"byte_end":123869,"line_start":689,"line_end":689,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123874,"byte_end":123955,"line_start":690,"line_end":690,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":123960,"byte_end":124026,"line_start":691,"line_end":691,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124031,"byte_end":124097,"line_start":692,"line_end":692,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124102,"byte_end":124168,"line_start":693,"line_end":693,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124173,"byte_end":124239,"line_start":694,"line_end":694,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124244,"byte_end":124252,"line_start":695,"line_end":695,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124257,"byte_end":124266,"line_start":696,"line_end":696,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":321},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125318,"byte_end":125330,"line_start":728,"line_end":728,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124524,"byte_end":124615,"line_start":707,"line_end":707,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124620,"byte_end":124623,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124628,"byte_end":124676,"line_start":709,"line_end":709,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124681,"byte_end":124771,"line_start":710,"line_end":710,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124776,"byte_end":124779,"line_start":711,"line_end":711,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124784,"byte_end":124845,"line_start":712,"line_end":712,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124850,"byte_end":124853,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124858,"byte_end":124871,"line_start":714,"line_end":714,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124876,"byte_end":124879,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124884,"byte_end":124892,"line_start":716,"line_end":716,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124897,"byte_end":124969,"line_start":717,"line_end":717,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124974,"byte_end":124977,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":124982,"byte_end":125026,"line_start":719,"line_end":719,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125031,"byte_end":125034,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125039,"byte_end":125107,"line_start":721,"line_end":721,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125112,"byte_end":125144,"line_start":722,"line_end":722,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125149,"byte_end":125192,"line_start":723,"line_end":723,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125197,"byte_end":125229,"line_start":724,"line_end":724,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125234,"byte_end":125279,"line_start":725,"line_end":725,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125284,"byte_end":125292,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125297,"byte_end":125306,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126447,"byte_end":126463,"line_start":753,"line_end":753,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125485,"byte_end":125576,"line_start":732,"line_end":732,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125581,"byte_end":125584,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125589,"byte_end":125637,"line_start":734,"line_end":734,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125642,"byte_end":125732,"line_start":735,"line_end":735,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125737,"byte_end":125740,"line_start":736,"line_end":736,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125745,"byte_end":125814,"line_start":737,"line_end":737,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125819,"byte_end":125822,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125827,"byte_end":125840,"line_start":739,"line_end":739,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125845,"byte_end":125848,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125853,"byte_end":125861,"line_start":741,"line_end":741,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125866,"byte_end":125892,"line_start":742,"line_end":742,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125897,"byte_end":125900,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125905,"byte_end":125949,"line_start":744,"line_end":744,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":125954,"byte_end":126023,"line_start":745,"line_end":745,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126028,"byte_end":126112,"line_start":746,"line_end":746,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126117,"byte_end":126186,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126191,"byte_end":126260,"line_start":748,"line_end":748,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126265,"byte_end":126334,"line_start":749,"line_end":749,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126339,"byte_end":126408,"line_start":750,"line_end":750,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126413,"byte_end":126421,"line_start":751,"line_end":751,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":126426,"byte_end":126435,"line_start":752,"line_end":752,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128155,"byte_end":128159,"line_start":810,"line_end":810,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127623,"byte_end":127678,"line_start":796,"line_end":796,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127683,"byte_end":127686,"line_start":797,"line_end":797,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127691,"byte_end":127745,"line_start":798,"line_end":798,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127750,"byte_end":127753,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127758,"byte_end":127771,"line_start":800,"line_end":800,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127776,"byte_end":127779,"line_start":801,"line_end":801,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127784,"byte_end":127792,"line_start":802,"line_end":802,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127797,"byte_end":127823,"line_start":803,"line_end":803,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127828,"byte_end":127831,"line_start":804,"line_end":804,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127836,"byte_end":127926,"line_start":805,"line_end":805,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":127931,"byte_end":128021,"line_start":806,"line_end":806,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128026,"byte_end":128116,"line_start":807,"line_end":807,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128121,"byte_end":128129,"line_start":808,"line_end":808,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128134,"byte_end":128143,"line_start":809,"line_end":809,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128701,"byte_end":128709,"line_start":829,"line_end":829,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128240,"byte_end":128295,"line_start":814,"line_end":814,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128300,"byte_end":128303,"line_start":815,"line_end":815,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128308,"byte_end":128370,"line_start":816,"line_end":816,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128375,"byte_end":128378,"line_start":817,"line_end":817,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128383,"byte_end":128396,"line_start":818,"line_end":818,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128401,"byte_end":128404,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128409,"byte_end":128417,"line_start":820,"line_end":820,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128422,"byte_end":128448,"line_start":821,"line_end":821,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128453,"byte_end":128485,"line_start":822,"line_end":822,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128490,"byte_end":128493,"line_start":823,"line_end":823,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128498,"byte_end":128556,"line_start":824,"line_end":824,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128561,"byte_end":128615,"line_start":825,"line_end":825,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128620,"byte_end":128662,"line_start":826,"line_end":826,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128667,"byte_end":128675,"line_start":827,"line_end":827,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128680,"byte_end":128689,"line_start":828,"line_end":828,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129386,"byte_end":129390,"line_start":847,"line_end":847,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128849,"byte_end":128908,"line_start":833,"line_end":833,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128913,"byte_end":128916,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128921,"byte_end":128976,"line_start":835,"line_end":835,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128981,"byte_end":128984,"line_start":836,"line_end":836,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":128989,"byte_end":129002,"line_start":837,"line_end":837,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129007,"byte_end":129010,"line_start":838,"line_end":838,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129015,"byte_end":129023,"line_start":839,"line_end":839,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129028,"byte_end":129054,"line_start":840,"line_end":840,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129059,"byte_end":129062,"line_start":841,"line_end":841,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129067,"byte_end":129157,"line_start":842,"line_end":842,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129162,"byte_end":129252,"line_start":843,"line_end":843,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129257,"byte_end":129347,"line_start":844,"line_end":844,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129352,"byte_end":129360,"line_start":845,"line_end":845,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129365,"byte_end":129374,"line_start":846,"line_end":846,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129937,"byte_end":129945,"line_start":866,"line_end":866,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129471,"byte_end":129530,"line_start":851,"line_end":851,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129535,"byte_end":129538,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129543,"byte_end":129606,"line_start":853,"line_end":853,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129611,"byte_end":129614,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129619,"byte_end":129632,"line_start":855,"line_end":855,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129637,"byte_end":129640,"line_start":856,"line_end":856,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129645,"byte_end":129653,"line_start":857,"line_end":857,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129658,"byte_end":129684,"line_start":858,"line_end":858,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129689,"byte_end":129721,"line_start":859,"line_end":859,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129726,"byte_end":129729,"line_start":860,"line_end":860,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129734,"byte_end":129792,"line_start":861,"line_end":861,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129797,"byte_end":129851,"line_start":862,"line_end":862,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129856,"byte_end":129898,"line_start":863,"line_end":863,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129903,"byte_end":129911,"line_start":864,"line_end":864,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":129916,"byte_end":129925,"line_start":865,"line_end":865,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130992,"byte_end":131010,"line_start":892,"line_end":892,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130087,"byte_end":130152,"line_start":870,"line_end":870,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130157,"byte_end":130160,"line_start":871,"line_end":871,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130165,"byte_end":130216,"line_start":872,"line_end":872,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130221,"byte_end":130224,"line_start":873,"line_end":873,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130229,"byte_end":130242,"line_start":874,"line_end":874,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130247,"byte_end":130250,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130255,"byte_end":130263,"line_start":876,"line_end":876,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130268,"byte_end":130325,"line_start":877,"line_end":877,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130330,"byte_end":130356,"line_start":878,"line_end":878,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130361,"byte_end":130393,"line_start":879,"line_end":879,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130398,"byte_end":130421,"line_start":880,"line_end":880,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130426,"byte_end":130429,"line_start":881,"line_end":881,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130434,"byte_end":130478,"line_start":882,"line_end":882,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130483,"byte_end":130539,"line_start":883,"line_end":883,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130544,"byte_end":130600,"line_start":884,"line_end":884,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130605,"byte_end":130662,"line_start":885,"line_end":885,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130667,"byte_end":130722,"line_start":886,"line_end":886,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130727,"byte_end":130801,"line_start":887,"line_end":887,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130806,"byte_end":130881,"line_start":888,"line_end":888,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130886,"byte_end":130955,"line_start":889,"line_end":889,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130960,"byte_end":130967,"line_start":890,"line_end":890,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":130972,"byte_end":130980,"line_start":891,"line_end":891,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132616,"byte_end":132634,"line_start":927,"line_end":927,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131704,"byte_end":131776,"line_start":905,"line_end":905,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131781,"byte_end":131784,"line_start":906,"line_end":906,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131789,"byte_end":131840,"line_start":907,"line_end":907,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131845,"byte_end":131848,"line_start":908,"line_end":908,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131853,"byte_end":131866,"line_start":909,"line_end":909,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131871,"byte_end":131874,"line_start":910,"line_end":910,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131879,"byte_end":131887,"line_start":911,"line_end":911,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131892,"byte_end":131949,"line_start":912,"line_end":912,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131954,"byte_end":131980,"line_start":913,"line_end":913,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":131985,"byte_end":132017,"line_start":914,"line_end":914,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132022,"byte_end":132045,"line_start":915,"line_end":915,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132050,"byte_end":132053,"line_start":916,"line_end":916,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132058,"byte_end":132102,"line_start":917,"line_end":917,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132107,"byte_end":132163,"line_start":918,"line_end":918,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132168,"byte_end":132223,"line_start":919,"line_end":919,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132228,"byte_end":132285,"line_start":920,"line_end":920,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132290,"byte_end":132346,"line_start":921,"line_end":921,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132351,"byte_end":132425,"line_start":922,"line_end":922,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132430,"byte_end":132505,"line_start":923,"line_end":923,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132510,"byte_end":132579,"line_start":924,"line_end":924,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132584,"byte_end":132591,"line_start":925,"line_end":925,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":132596,"byte_end":132604,"line_start":926,"line_end":926,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134533,"byte_end":134554,"line_start":965,"line_end":965,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133328,"byte_end":133384,"line_start":940,"line_end":940,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133389,"byte_end":133434,"line_start":941,"line_end":941,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133439,"byte_end":133442,"line_start":942,"line_end":942,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133447,"byte_end":133494,"line_start":943,"line_end":943,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133499,"byte_end":133558,"line_start":944,"line_end":944,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133563,"byte_end":133566,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133571,"byte_end":133584,"line_start":946,"line_end":946,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133589,"byte_end":133592,"line_start":947,"line_end":947,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133597,"byte_end":133605,"line_start":948,"line_end":948,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133610,"byte_end":133667,"line_start":949,"line_end":949,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133672,"byte_end":133698,"line_start":950,"line_end":950,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133703,"byte_end":133726,"line_start":951,"line_end":951,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133731,"byte_end":133734,"line_start":952,"line_end":952,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133739,"byte_end":133778,"line_start":953,"line_end":953,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133783,"byte_end":133832,"line_start":954,"line_end":954,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133837,"byte_end":133840,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133845,"byte_end":133929,"line_start":956,"line_end":956,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":133934,"byte_end":134021,"line_start":957,"line_end":957,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134026,"byte_end":134112,"line_start":958,"line_end":958,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134117,"byte_end":134205,"line_start":959,"line_end":959,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134210,"byte_end":134297,"line_start":960,"line_end":960,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134302,"byte_end":134395,"line_start":961,"line_end":961,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134400,"byte_end":134496,"line_start":962,"line_end":962,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134501,"byte_end":134508,"line_start":963,"line_end":963,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":134513,"byte_end":134521,"line_start":964,"line_end":964,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":337},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136314,"byte_end":136331,"line_start":1006,"line_end":1006,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is the same as the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135145,"byte_end":135202,"line_start":977,"line_end":977,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary `format` method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135207,"byte_end":135268,"line_start":978,"line_end":978,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135273,"byte_end":135276,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135281,"byte_end":135331,"line_start":980,"line_end":980,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135336,"byte_end":135414,"line_start":981,"line_end":981,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135419,"byte_end":135422,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135427,"byte_end":135440,"line_start":983,"line_end":983,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135445,"byte_end":135448,"line_start":984,"line_end":984,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135453,"byte_end":135461,"line_start":985,"line_end":985,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135466,"byte_end":135492,"line_start":986,"line_end":986,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135497,"byte_end":135545,"line_start":987,"line_end":987,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135550,"byte_end":135553,"line_start":988,"line_end":988,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135558,"byte_end":135603,"line_start":989,"line_end":989,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135608,"byte_end":135652,"line_start":990,"line_end":990,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135657,"byte_end":135732,"line_start":991,"line_end":991,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135737,"byte_end":135812,"line_start":992,"line_end":992,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135817,"byte_end":135825,"line_start":993,"line_end":993,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135830,"byte_end":135833,"line_start":994,"line_end":994,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135838,"byte_end":135922,"line_start":995,"line_end":995,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135927,"byte_end":135930,"line_start":996,"line_end":996,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135935,"byte_end":135943,"line_start":997,"line_end":997,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135948,"byte_end":135976,"line_start":998,"line_end":998,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":135981,"byte_end":136031,"line_start":999,"line_end":999,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136036,"byte_end":136091,"line_start":1000,"line_end":1000,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136096,"byte_end":136142,"line_start":1001,"line_end":1001,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136147,"byte_end":136217,"line_start":1002,"line_end":1002,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136222,"byte_end":136230,"line_start":1003,"line_end":1003,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136235,"byte_end":136288,"line_start":1004,"line_end":1004,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136293,"byte_end":136302,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":341},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138019,"byte_end":138025,"line_start":1048,"line_end":1048,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136527,"byte_end":136581,"line_start":1014,"line_end":1014,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136586,"byte_end":136656,"line_start":1015,"line_end":1015,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136661,"byte_end":136699,"line_start":1016,"line_end":1016,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136704,"byte_end":136707,"line_start":1017,"line_end":1017,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136712,"byte_end":136747,"line_start":1018,"line_end":1018,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136752,"byte_end":136825,"line_start":1019,"line_end":1019,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136830,"byte_end":136887,"line_start":1020,"line_end":1020,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136892,"byte_end":136954,"line_start":1021,"line_end":1021,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":136959,"byte_end":137019,"line_start":1022,"line_end":1022,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137024,"byte_end":137027,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137032,"byte_end":137096,"line_start":1024,"line_end":1024,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137101,"byte_end":137164,"line_start":1025,"line_end":1025,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137169,"byte_end":137244,"line_start":1026,"line_end":1026,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137249,"byte_end":137252,"line_start":1027,"line_end":1027,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137257,"byte_end":137270,"line_start":1028,"line_end":1028,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137275,"byte_end":137278,"line_start":1029,"line_end":1029,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137283,"byte_end":137291,"line_start":1030,"line_end":1030,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137296,"byte_end":137322,"line_start":1031,"line_end":1031,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137327,"byte_end":137330,"line_start":1032,"line_end":1032,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137335,"byte_end":137379,"line_start":1033,"line_end":1033,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137384,"byte_end":137447,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137452,"byte_end":137540,"line_start":1035,"line_end":1035,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137545,"byte_end":137553,"line_start":1036,"line_end":1036,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137558,"byte_end":137561,"line_start":1037,"line_end":1037,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137566,"byte_end":137650,"line_start":1038,"line_end":1038,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137655,"byte_end":137658,"line_start":1039,"line_end":1039,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137663,"byte_end":137671,"line_start":1040,"line_end":1040,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137676,"byte_end":137704,"line_start":1041,"line_end":1041,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137709,"byte_end":137755,"line_start":1042,"line_end":1042,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137760,"byte_end":137826,"line_start":1043,"line_end":1043,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137831,"byte_end":137922,"line_start":1044,"line_end":1044,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137927,"byte_end":137935,"line_start":1045,"line_end":1045,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137940,"byte_end":137993,"line_start":1046,"line_end":1046,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":137998,"byte_end":138007,"line_start":1047,"line_end":1047,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138807,"byte_end":138816,"line_start":1074,"line_end":1074,"column_start":12,"column_end":21},"name":"iter_days","qualname":"<NaiveDate>::iter_days","value":"pub fn iter_days(&Self) -> NaiveDateDaysIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by days until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by days until the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138156,"byte_end":138233,"line_start":1052,"line_end":1052,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138238,"byte_end":138241,"line_start":1053,"line_end":1053,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138246,"byte_end":138259,"line_start":1054,"line_end":1054,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138264,"byte_end":138267,"line_start":1055,"line_end":1055,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138272,"byte_end":138279,"line_start":1056,"line_end":1056,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138284,"byte_end":138312,"line_start":1057,"line_end":1057,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138317,"byte_end":138320,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138325,"byte_end":138345,"line_start":1059,"line_end":1059,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138350,"byte_end":138391,"line_start":1060,"line_end":1060,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 28),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138396,"byte_end":138437,"line_start":1061,"line_end":1061,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 2, 29),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138442,"byte_end":138483,"line_start":1062,"line_end":1062,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 1),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138488,"byte_end":138528,"line_start":1063,"line_end":1063,"column_start":5,"column_end":45}},{"value":"/ ];","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138533,"byte_end":138539,"line_start":1064,"line_end":1064,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138544,"byte_end":138547,"line_start":1065,"line_end":1065,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138552,"byte_end":138574,"line_start":1066,"line_end":1066,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_days().take(4).enumerate() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138579,"byte_end":138665,"line_start":1067,"line_end":1067,"column_start":5,"column_end":91}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138670,"byte_end":138706,"line_start":1068,"line_end":1068,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138711,"byte_end":138729,"line_start":1069,"line_end":1069,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138734,"byte_end":138739,"line_start":1070,"line_end":1070,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138744,"byte_end":138769,"line_start":1071,"line_end":1071,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138774,"byte_end":138781,"line_start":1072,"line_end":1072,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138786,"byte_end":138795,"line_start":1073,"line_end":1073,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":344},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139562,"byte_end":139572,"line_start":1100,"line_end":1100,"column_start":12,"column_end":22},"name":"iter_weeks","qualname":"<NaiveDate>::iter_weeks","value":"pub fn iter_weeks(&Self) -> NaiveDateWeeksIterator","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that steps by weeks until the last representable date.","sig":null,"attributes":[{"value":"/ Returns an iterator that steps by weeks until the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138909,"byte_end":138987,"line_start":1078,"line_end":1078,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":138992,"byte_end":138995,"line_start":1079,"line_end":1079,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139000,"byte_end":139013,"line_start":1080,"line_end":1080,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139018,"byte_end":139021,"line_start":1081,"line_end":1081,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139026,"byte_end":139033,"line_start":1082,"line_end":1082,"column_start":5,"column_end":12}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139038,"byte_end":139066,"line_start":1083,"line_end":1083,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139071,"byte_end":139074,"line_start":1084,"line_end":1084,"column_start":5,"column_end":8}},{"value":"/ let expected = [","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139079,"byte_end":139099,"line_start":1085,"line_end":1085,"column_start":5,"column_end":25}},{"value":"/     NaiveDate::from_ymd(2016, 2, 27),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139104,"byte_end":139145,"line_start":1086,"line_end":1086,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 5),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139150,"byte_end":139190,"line_start":1087,"line_end":1087,"column_start":5,"column_end":45}},{"value":"/     NaiveDate::from_ymd(2016, 3, 12),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139195,"byte_end":139236,"line_start":1088,"line_end":1088,"column_start":5,"column_end":46}},{"value":"/     NaiveDate::from_ymd(2016, 3, 19),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139241,"byte_end":139282,"line_start":1089,"line_end":1089,"column_start":5,"column_end":46}},{"value":"/ ];","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139287,"byte_end":139293,"line_start":1090,"line_end":1090,"column_start":5,"column_end":11}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139298,"byte_end":139301,"line_start":1091,"line_end":1091,"column_start":5,"column_end":8}},{"value":"/ let mut count = 0;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139306,"byte_end":139328,"line_start":1092,"line_end":1092,"column_start":5,"column_end":27}},{"value":"/ for (idx, d) in NaiveDate::from_ymd(2016, 2, 27).iter_weeks().take(4).enumerate() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139333,"byte_end":139420,"line_start":1093,"line_end":1093,"column_start":5,"column_end":92}},{"value":"/    assert_eq!(d, expected[idx]);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139425,"byte_end":139461,"line_start":1094,"line_end":1094,"column_start":5,"column_end":41}},{"value":"/    count += 1;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139466,"byte_end":139484,"line_start":1095,"line_end":1095,"column_start":5,"column_end":23}},{"value":"/ }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139489,"byte_end":139494,"line_start":1096,"line_end":1096,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(count, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139499,"byte_end":139524,"line_start":1097,"line_end":1097,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139529,"byte_end":139536,"line_start":1098,"line_end":1098,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139541,"byte_end":139550,"line_start":1099,"line_end":1099,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1561},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155464,"byte_end":155485,"line_start":1568,"line_end":1568,"column_start":12,"column_end":33},"name":"NaiveDateDaysIterator","qualname":"::naive::date::NaiveDateDaysIterator","value":"NaiveDateDaysIterator {  }","parent":null,"children":[{"krate":0,"index":1562}],"decl_id":null,"docs":" Iterator over `NaiveDate` with a step size of one day.\n","sig":null,"attributes":[{"value":"/ Iterator over `NaiveDate` with a step size of one day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155326,"byte_end":155384,"line_start":1566,"line_end":1566,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1586},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156234,"byte_end":156256,"line_start":1595,"line_end":1595,"column_start":12,"column_end":34},"name":"NaiveDateWeeksIterator","qualname":"::naive::date::NaiveDateWeeksIterator","value":"NaiveDateWeeksIterator {  }","parent":null,"children":[{"krate":0,"index":1587}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":434},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":189964,"byte_end":189976,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::naive::datetime::MIN_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":189912,"byte_end":189953,"line_start":31,"line_end":31,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":435},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190096,"byte_end":190108,"line_start":34,"line_end":34,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::naive::datetime::MAX_DATETIME","value":"NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDateTime`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDateTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190044,"byte_end":190085,"line_start":33,"line_end":33,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1611},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191041,"byte_end":191054,"line_start":62,"line_end":62,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1612},{"krate":0,"index":1613}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190177,"byte_end":190230,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190231,"byte_end":190234,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190235,"byte_end":190248,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190249,"byte_end":190252,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190253,"byte_end":190337,"line_start":40,"line_end":40,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190338,"byte_end":190341,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190342,"byte_end":190350,"line_start":42,"line_end":42,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190351,"byte_end":190394,"line_start":43,"line_end":43,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190395,"byte_end":190398,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190399,"byte_end":190478,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190479,"byte_end":190496,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190497,"byte_end":190505,"line_start":47,"line_end":47,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190506,"byte_end":190509,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190510,"byte_end":190573,"line_start":49,"line_end":49,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190574,"byte_end":190622,"line_start":50,"line_end":50,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190623,"byte_end":190674,"line_start":51,"line_end":51,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190675,"byte_end":190678,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190679,"byte_end":190687,"line_start":53,"line_end":53,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190688,"byte_end":190733,"line_start":54,"line_end":54,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190734,"byte_end":190815,"line_start":55,"line_end":55,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190816,"byte_end":190862,"line_start":56,"line_end":56,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190863,"byte_end":190866,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190867,"byte_end":190910,"line_start":58,"line_end":58,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190911,"byte_end":190965,"line_start":59,"line_end":59,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":190966,"byte_end":190974,"line_start":60,"line_end":60,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191716,"byte_end":191719,"line_start":85,"line_end":85,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191127,"byte_end":191189,"line_start":68,"line_end":68,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191194,"byte_end":191276,"line_start":69,"line_end":69,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191281,"byte_end":191335,"line_start":70,"line_end":70,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191340,"byte_end":191343,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191348,"byte_end":191361,"line_start":72,"line_end":72,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191366,"byte_end":191369,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191374,"byte_end":191382,"line_start":74,"line_end":74,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191387,"byte_end":191441,"line_start":75,"line_end":75,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191446,"byte_end":191449,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191454,"byte_end":191498,"line_start":77,"line_end":77,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191503,"byte_end":191558,"line_start":78,"line_end":78,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191563,"byte_end":191566,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191571,"byte_end":191609,"line_start":80,"line_end":80,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191614,"byte_end":191643,"line_start":81,"line_end":81,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191648,"byte_end":191677,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191682,"byte_end":191690,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191695,"byte_end":191704,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193002,"byte_end":193016,"line_start":115,"line_end":115,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191833,"byte_end":191902,"line_start":89,"line_end":89,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191907,"byte_end":191946,"line_start":90,"line_end":90,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191951,"byte_end":192019,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192024,"byte_end":192095,"line_start":92,"line_end":92,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192100,"byte_end":192103,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192108,"byte_end":192156,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192161,"byte_end":192237,"line_start":95,"line_end":95,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192242,"byte_end":192245,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192250,"byte_end":192324,"line_start":97,"line_end":97,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192329,"byte_end":192409,"line_start":98,"line_end":98,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192414,"byte_end":192475,"line_start":99,"line_end":99,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192480,"byte_end":192483,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192488,"byte_end":192563,"line_start":101,"line_end":101,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192568,"byte_end":192571,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192576,"byte_end":192589,"line_start":103,"line_end":103,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192594,"byte_end":192597,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192602,"byte_end":192610,"line_start":105,"line_end":105,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192615,"byte_end":192658,"line_start":106,"line_end":106,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192663,"byte_end":192666,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192671,"byte_end":192729,"line_start":108,"line_end":108,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192734,"byte_end":192813,"line_start":109,"line_end":109,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192818,"byte_end":192821,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192826,"byte_end":192887,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192892,"byte_end":192963,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192968,"byte_end":192976,"line_start":113,"line_end":113,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":192981,"byte_end":192990,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":439},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194358,"byte_end":194376,"line_start":146,"line_end":146,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193201,"byte_end":193270,"line_start":120,"line_end":120,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193275,"byte_end":193314,"line_start":121,"line_end":121,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193319,"byte_end":193387,"line_start":122,"line_end":122,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193392,"byte_end":193463,"line_start":123,"line_end":123,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193468,"byte_end":193471,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193476,"byte_end":193524,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193529,"byte_end":193619,"line_start":126,"line_end":126,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193624,"byte_end":193701,"line_start":127,"line_end":127,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193706,"byte_end":193709,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193714,"byte_end":193797,"line_start":129,"line_end":129,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193802,"byte_end":193805,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193810,"byte_end":193823,"line_start":131,"line_end":131,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193828,"byte_end":193831,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193836,"byte_end":193844,"line_start":133,"line_end":133,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193849,"byte_end":193892,"line_start":134,"line_end":134,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193897,"byte_end":193914,"line_start":135,"line_end":135,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193919,"byte_end":193922,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193927,"byte_end":193990,"line_start":137,"line_end":137,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":193995,"byte_end":193998,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194003,"byte_end":194051,"line_start":139,"line_end":139,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194056,"byte_end":194114,"line_start":140,"line_end":140,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194119,"byte_end":194194,"line_start":141,"line_end":141,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194199,"byte_end":194259,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194264,"byte_end":194319,"line_start":143,"line_end":143,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194324,"byte_end":194332,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194337,"byte_end":194346,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197761,"byte_end":197775,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194898,"byte_end":194985,"line_start":159,"line_end":159,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":194990,"byte_end":195060,"line_start":160,"line_end":160,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195065,"byte_end":195103,"line_start":161,"line_end":161,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195108,"byte_end":195111,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195116,"byte_end":195129,"line_start":163,"line_end":163,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195134,"byte_end":195137,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195142,"byte_end":195150,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195155,"byte_end":195198,"line_start":166,"line_end":166,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195203,"byte_end":195206,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195211,"byte_end":195266,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195271,"byte_end":195274,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195279,"byte_end":195353,"line_start":170,"line_end":170,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195358,"byte_end":195429,"line_start":171,"line_end":171,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195434,"byte_end":195510,"line_start":172,"line_end":172,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195515,"byte_end":195602,"line_start":173,"line_end":173,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195607,"byte_end":195615,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195620,"byte_end":195623,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195628,"byte_end":195677,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195682,"byte_end":195685,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195690,"byte_end":195698,"line_start":178,"line_end":178,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195703,"byte_end":195748,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195753,"byte_end":195810,"line_start":180,"line_end":180,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195815,"byte_end":195896,"line_start":181,"line_end":181,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195901,"byte_end":195974,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195979,"byte_end":195987,"line_start":183,"line_end":183,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":195992,"byte_end":195995,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196000,"byte_end":196089,"line_start":185,"line_end":185,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196094,"byte_end":196156,"line_start":186,"line_end":186,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196161,"byte_end":196237,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196242,"byte_end":196245,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196250,"byte_end":196258,"line_start":189,"line_end":189,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196263,"byte_end":196308,"line_start":190,"line_end":190,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196313,"byte_end":196370,"line_start":191,"line_end":191,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196375,"byte_end":196456,"line_start":192,"line_end":192,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196461,"byte_end":196545,"line_start":193,"line_end":193,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196550,"byte_end":196558,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196563,"byte_end":196566,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196571,"byte_end":196614,"line_start":196,"line_end":196,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196619,"byte_end":196690,"line_start":197,"line_end":197,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196695,"byte_end":196698,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196703,"byte_end":196711,"line_start":199,"line_end":199,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196716,"byte_end":196761,"line_start":200,"line_end":200,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196766,"byte_end":196823,"line_start":201,"line_end":201,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196828,"byte_end":196891,"line_start":202,"line_end":202,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196896,"byte_end":196966,"line_start":203,"line_end":203,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196971,"byte_end":196974,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":196979,"byte_end":197036,"line_start":205,"line_end":205,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197041,"byte_end":197106,"line_start":206,"line_end":206,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197111,"byte_end":197182,"line_start":207,"line_end":207,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197187,"byte_end":197264,"line_start":208,"line_end":208,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197269,"byte_end":197277,"line_start":209,"line_end":209,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197282,"byte_end":197285,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197290,"byte_end":197372,"line_start":211,"line_end":211,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197377,"byte_end":197380,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197385,"byte_end":197393,"line_start":213,"line_end":213,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197398,"byte_end":197430,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197435,"byte_end":197492,"line_start":215,"line_end":215,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197497,"byte_end":197551,"line_start":216,"line_end":216,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197556,"byte_end":197647,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197652,"byte_end":197736,"line_start":218,"line_end":218,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":197741,"byte_end":197749,"line_start":219,"line_end":219,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":442},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198297,"byte_end":198301,"line_start":237,"line_end":237,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198008,"byte_end":198039,"line_start":226,"line_end":226,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198044,"byte_end":198047,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198052,"byte_end":198065,"line_start":228,"line_end":228,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198070,"byte_end":198073,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198078,"byte_end":198086,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198091,"byte_end":198117,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198122,"byte_end":198125,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198130,"byte_end":198194,"line_start":233,"line_end":233,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198199,"byte_end":198258,"line_start":234,"line_end":234,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198263,"byte_end":198271,"line_start":235,"line_end":235,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198276,"byte_end":198285,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":443},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198654,"byte_end":198658,"line_start":252,"line_end":252,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198353,"byte_end":198384,"line_start":241,"line_end":241,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198389,"byte_end":198392,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198397,"byte_end":198410,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198415,"byte_end":198418,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198423,"byte_end":198431,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198436,"byte_end":198475,"line_start":246,"line_end":246,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198480,"byte_end":198483,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198488,"byte_end":198552,"line_start":248,"line_end":248,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198557,"byte_end":198615,"line_start":249,"line_end":249,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198620,"byte_end":198628,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198633,"byte_end":198642,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":444},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199565,"byte_end":199574,"line_start":279,"line_end":279,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198710,"byte_end":198791,"line_start":256,"line_end":256,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198796,"byte_end":198799,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198804,"byte_end":198859,"line_start":258,"line_end":258,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198864,"byte_end":198952,"line_start":259,"line_end":259,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198957,"byte_end":198960,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198965,"byte_end":198978,"line_start":261,"line_end":261,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198983,"byte_end":198986,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":198991,"byte_end":198999,"line_start":263,"line_end":263,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199004,"byte_end":199030,"line_start":264,"line_end":264,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199035,"byte_end":199038,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199043,"byte_end":199116,"line_start":266,"line_end":266,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199121,"byte_end":199155,"line_start":267,"line_end":267,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199160,"byte_end":199163,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199168,"byte_end":199232,"line_start":269,"line_end":269,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199237,"byte_end":199283,"line_start":270,"line_end":270,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199288,"byte_end":199291,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199296,"byte_end":199363,"line_start":272,"line_end":272,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199368,"byte_end":199403,"line_start":273,"line_end":273,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199408,"byte_end":199411,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199416,"byte_end":199476,"line_start":275,"line_end":275,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199481,"byte_end":199526,"line_start":276,"line_end":276,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199531,"byte_end":199539,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199544,"byte_end":199553,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":446},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200952,"byte_end":200968,"line_start":311,"line_end":311,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199876,"byte_end":199960,"line_start":286,"line_end":286,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199965,"byte_end":199968,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":199973,"byte_end":200028,"line_start":288,"line_end":288,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200033,"byte_end":200121,"line_start":289,"line_end":289,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200126,"byte_end":200129,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200134,"byte_end":200201,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200206,"byte_end":200279,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200284,"byte_end":200353,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200358,"byte_end":200409,"line_start":294,"line_end":294,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200414,"byte_end":200417,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200422,"byte_end":200435,"line_start":296,"line_end":296,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200440,"byte_end":200443,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200448,"byte_end":200456,"line_start":298,"line_end":298,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200461,"byte_end":200487,"line_start":299,"line_end":299,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200492,"byte_end":200495,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200500,"byte_end":200573,"line_start":301,"line_end":301,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200578,"byte_end":200623,"line_start":302,"line_end":302,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200628,"byte_end":200631,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200636,"byte_end":200711,"line_start":304,"line_end":304,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200716,"byte_end":200773,"line_start":305,"line_end":305,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200778,"byte_end":200781,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200786,"byte_end":200864,"line_start":307,"line_end":307,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200869,"byte_end":200913,"line_start":308,"line_end":308,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200918,"byte_end":200926,"line_start":309,"line_end":309,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":200931,"byte_end":200940,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202436,"byte_end":202451,"line_start":350,"line_end":350,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201099,"byte_end":201182,"line_start":316,"line_end":316,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201187,"byte_end":201190,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201195,"byte_end":201250,"line_start":318,"line_end":318,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201255,"byte_end":201343,"line_start":319,"line_end":319,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201348,"byte_end":201351,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201356,"byte_end":201368,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201373,"byte_end":201376,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201381,"byte_end":201448,"line_start":323,"line_end":323,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201453,"byte_end":201523,"line_start":324,"line_end":324,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201528,"byte_end":201596,"line_start":325,"line_end":325,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201601,"byte_end":201635,"line_start":326,"line_end":326,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201640,"byte_end":201643,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201648,"byte_end":201722,"line_start":328,"line_end":328,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millennia, I'm curious.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201727,"byte_end":201787,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201792,"byte_end":201795,"line_start":330,"line_end":330,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201800,"byte_end":201813,"line_start":331,"line_end":331,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201818,"byte_end":201821,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201826,"byte_end":201834,"line_start":333,"line_end":333,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201839,"byte_end":201882,"line_start":334,"line_end":334,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201887,"byte_end":201890,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201895,"byte_end":201967,"line_start":336,"line_end":336,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":201972,"byte_end":202024,"line_start":337,"line_end":337,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202029,"byte_end":202032,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202037,"byte_end":202111,"line_start":339,"line_end":339,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202116,"byte_end":202119,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202124,"byte_end":202165,"line_start":341,"line_end":341,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202170,"byte_end":202207,"line_start":342,"line_end":342,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202212,"byte_end":202261,"line_start":343,"line_end":343,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202266,"byte_end":202281,"line_start":344,"line_end":344,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202286,"byte_end":202297,"line_start":345,"line_end":345,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202302,"byte_end":202386,"line_start":346,"line_end":346,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202391,"byte_end":202397,"line_start":347,"line_end":347,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202402,"byte_end":202410,"line_start":348,"line_end":348,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202415,"byte_end":202424,"line_start":349,"line_end":349,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":448},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203229,"byte_end":203252,"line_start":372,"line_end":372,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202590,"byte_end":202666,"line_start":355,"line_end":355,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202671,"byte_end":202674,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202679,"byte_end":202721,"line_start":357,"line_end":357,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202726,"byte_end":202808,"line_start":358,"line_end":358,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202813,"byte_end":202816,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202821,"byte_end":202834,"line_start":360,"line_end":360,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202839,"byte_end":202842,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202847,"byte_end":202855,"line_start":362,"line_end":362,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202860,"byte_end":202886,"line_start":363,"line_end":363,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202891,"byte_end":202894,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202899,"byte_end":202981,"line_start":365,"line_end":365,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":202986,"byte_end":203036,"line_start":366,"line_end":366,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203041,"byte_end":203044,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203049,"byte_end":203133,"line_start":368,"line_end":368,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203138,"byte_end":203190,"line_start":369,"line_end":369,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203195,"byte_end":203203,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203208,"byte_end":203217,"line_start":371,"line_end":371,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":449},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203985,"byte_end":204008,"line_start":393,"line_end":393,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203330,"byte_end":203406,"line_start":376,"line_end":376,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203411,"byte_end":203414,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203419,"byte_end":203465,"line_start":378,"line_end":378,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203470,"byte_end":203556,"line_start":379,"line_end":379,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203561,"byte_end":203564,"line_start":380,"line_end":380,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203569,"byte_end":203582,"line_start":381,"line_end":381,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203587,"byte_end":203590,"line_start":382,"line_end":382,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203595,"byte_end":203603,"line_start":383,"line_end":383,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203608,"byte_end":203634,"line_start":384,"line_end":384,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203639,"byte_end":203642,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203647,"byte_end":203729,"line_start":386,"line_end":386,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203734,"byte_end":203788,"line_start":387,"line_end":387,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203793,"byte_end":203796,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203801,"byte_end":203885,"line_start":389,"line_end":389,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203890,"byte_end":203946,"line_start":390,"line_end":390,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203951,"byte_end":203959,"line_start":391,"line_end":391,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":203964,"byte_end":203973,"line_start":392,"line_end":392,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":450},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204750,"byte_end":204772,"line_start":414,"line_end":414,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204082,"byte_end":204157,"line_start":397,"line_end":397,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204162,"byte_end":204165,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204170,"byte_end":204220,"line_start":399,"line_end":399,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204225,"byte_end":204315,"line_start":400,"line_end":400,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204320,"byte_end":204323,"line_start":401,"line_end":401,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204328,"byte_end":204341,"line_start":402,"line_end":402,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204346,"byte_end":204349,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204354,"byte_end":204362,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204367,"byte_end":204393,"line_start":405,"line_end":405,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204398,"byte_end":204401,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204406,"byte_end":204488,"line_start":407,"line_end":407,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204493,"byte_end":204550,"line_start":408,"line_end":408,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204555,"byte_end":204558,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204563,"byte_end":204647,"line_start":410,"line_end":410,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204652,"byte_end":204711,"line_start":411,"line_end":411,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204716,"byte_end":204724,"line_start":412,"line_end":412,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204729,"byte_end":204738,"line_start":413,"line_end":413,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":451},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208151,"byte_end":208169,"line_start":492,"line_end":492,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204831,"byte_end":204886,"line_start":418,"line_end":418,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204891,"byte_end":204894,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204899,"byte_end":204994,"line_start":420,"line_end":420,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":204999,"byte_end":205062,"line_start":421,"line_end":421,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205067,"byte_end":205134,"line_start":422,"line_end":422,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205139,"byte_end":205232,"line_start":423,"line_end":423,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205237,"byte_end":205240,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205245,"byte_end":205296,"line_start":425,"line_end":425,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205301,"byte_end":205304,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205309,"byte_end":205322,"line_start":427,"line_end":427,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205327,"byte_end":205330,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205335,"byte_end":205343,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205348,"byte_end":205405,"line_start":430,"line_end":430,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205410,"byte_end":205436,"line_start":431,"line_end":431,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205441,"byte_end":205464,"line_start":432,"line_end":432,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205469,"byte_end":205472,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205477,"byte_end":205516,"line_start":434,"line_end":434,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205521,"byte_end":205524,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205529,"byte_end":205562,"line_start":436,"line_end":436,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205567,"byte_end":205610,"line_start":437,"line_end":437,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205615,"byte_end":205680,"line_start":438,"line_end":438,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205685,"byte_end":205720,"line_start":439,"line_end":439,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205725,"byte_end":205794,"line_start":440,"line_end":440,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205799,"byte_end":205834,"line_start":441,"line_end":441,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205839,"byte_end":205909,"line_start":442,"line_end":442,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205914,"byte_end":205949,"line_start":443,"line_end":443,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":205954,"byte_end":206031,"line_start":444,"line_end":444,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206036,"byte_end":206071,"line_start":445,"line_end":445,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206076,"byte_end":206150,"line_start":446,"line_end":446,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206155,"byte_end":206215,"line_start":447,"line_end":447,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206220,"byte_end":206223,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206228,"byte_end":206292,"line_start":449,"line_end":449,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206297,"byte_end":206379,"line_start":450,"line_end":450,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206384,"byte_end":206425,"line_start":451,"line_end":451,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206430,"byte_end":206437,"line_start":452,"line_end":452,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206442,"byte_end":206450,"line_start":453,"line_end":453,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206455,"byte_end":206458,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206463,"byte_end":206491,"line_start":455,"line_end":455,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206496,"byte_end":206499,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206504,"byte_end":206512,"line_start":457,"line_end":457,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206517,"byte_end":206574,"line_start":458,"line_end":458,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206579,"byte_end":206607,"line_start":459,"line_end":459,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206612,"byte_end":206637,"line_start":460,"line_end":460,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206642,"byte_end":206717,"line_start":461,"line_end":461,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206722,"byte_end":206807,"line_start":462,"line_end":462,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206812,"byte_end":206819,"line_start":463,"line_end":463,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206824,"byte_end":206832,"line_start":464,"line_end":464,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206837,"byte_end":206840,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206845,"byte_end":206874,"line_start":466,"line_end":466,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206879,"byte_end":206949,"line_start":467,"line_end":467,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206954,"byte_end":206957,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206962,"byte_end":206970,"line_start":469,"line_end":469,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":206975,"byte_end":207032,"line_start":470,"line_end":470,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207037,"byte_end":207065,"line_start":471,"line_end":471,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207070,"byte_end":207095,"line_start":472,"line_end":472,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207100,"byte_end":207141,"line_start":473,"line_end":473,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207146,"byte_end":207231,"line_start":474,"line_end":474,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207236,"byte_end":207273,"line_start":475,"line_end":475,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207278,"byte_end":207335,"line_start":476,"line_end":476,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207340,"byte_end":207384,"line_start":477,"line_end":477,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207389,"byte_end":207458,"line_start":478,"line_end":478,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207463,"byte_end":207505,"line_start":479,"line_end":479,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207510,"byte_end":207578,"line_start":480,"line_end":480,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207583,"byte_end":207627,"line_start":481,"line_end":481,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207632,"byte_end":207700,"line_start":482,"line_end":482,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207705,"byte_end":207746,"line_start":483,"line_end":483,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207751,"byte_end":207813,"line_start":484,"line_end":484,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207818,"byte_end":207859,"line_start":485,"line_end":485,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207864,"byte_end":207927,"line_start":486,"line_end":486,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207932,"byte_end":207974,"line_start":487,"line_end":487,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":207979,"byte_end":208037,"line_start":488,"line_end":488,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208042,"byte_end":208114,"line_start":489,"line_end":489,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208119,"byte_end":208126,"line_start":490,"line_end":490,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208131,"byte_end":208139,"line_start":491,"line_end":491,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":452},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211713,"byte_end":211731,"line_start":574,"line_end":574,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208616,"byte_end":208678,"line_start":504,"line_end":504,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208683,"byte_end":208686,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208691,"byte_end":208786,"line_start":506,"line_end":506,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208791,"byte_end":208857,"line_start":507,"line_end":507,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208862,"byte_end":208929,"line_start":508,"line_end":508,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":208934,"byte_end":209027,"line_start":509,"line_end":509,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209032,"byte_end":209035,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209040,"byte_end":209091,"line_start":511,"line_end":511,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209096,"byte_end":209099,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209104,"byte_end":209117,"line_start":513,"line_end":513,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209122,"byte_end":209125,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209130,"byte_end":209138,"line_start":515,"line_end":515,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209143,"byte_end":209200,"line_start":516,"line_end":516,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209205,"byte_end":209231,"line_start":517,"line_end":517,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209236,"byte_end":209259,"line_start":518,"line_end":518,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209264,"byte_end":209267,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209272,"byte_end":209311,"line_start":520,"line_end":520,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209316,"byte_end":209319,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209324,"byte_end":209357,"line_start":522,"line_end":522,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209362,"byte_end":209405,"line_start":523,"line_end":523,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209410,"byte_end":209475,"line_start":524,"line_end":524,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209480,"byte_end":209515,"line_start":525,"line_end":525,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209520,"byte_end":209589,"line_start":526,"line_end":526,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209594,"byte_end":209629,"line_start":527,"line_end":527,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209634,"byte_end":209704,"line_start":528,"line_end":528,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209709,"byte_end":209744,"line_start":529,"line_end":529,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209749,"byte_end":209826,"line_start":530,"line_end":530,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209831,"byte_end":209866,"line_start":531,"line_end":531,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209871,"byte_end":209945,"line_start":532,"line_end":532,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":209950,"byte_end":210010,"line_start":533,"line_end":533,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210015,"byte_end":210018,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210023,"byte_end":210087,"line_start":535,"line_end":535,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210092,"byte_end":210174,"line_start":536,"line_end":536,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210179,"byte_end":210220,"line_start":537,"line_end":537,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210225,"byte_end":210232,"line_start":538,"line_end":538,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210237,"byte_end":210245,"line_start":539,"line_end":539,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210250,"byte_end":210253,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210258,"byte_end":210286,"line_start":541,"line_end":541,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210291,"byte_end":210294,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210299,"byte_end":210307,"line_start":543,"line_end":543,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210312,"byte_end":210369,"line_start":544,"line_end":544,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210374,"byte_end":210402,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210407,"byte_end":210432,"line_start":546,"line_end":546,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210437,"byte_end":210512,"line_start":547,"line_end":547,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210517,"byte_end":210602,"line_start":548,"line_end":548,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210607,"byte_end":210614,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210619,"byte_end":210627,"line_start":550,"line_end":550,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210632,"byte_end":210635,"line_start":551,"line_end":551,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210640,"byte_end":210669,"line_start":552,"line_end":552,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210674,"byte_end":210747,"line_start":553,"line_end":553,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210752,"byte_end":210755,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210760,"byte_end":210768,"line_start":555,"line_end":555,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210773,"byte_end":210830,"line_start":556,"line_end":556,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210835,"byte_end":210863,"line_start":557,"line_end":557,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210868,"byte_end":210893,"line_start":558,"line_end":558,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210898,"byte_end":210939,"line_start":559,"line_end":559,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":210944,"byte_end":211029,"line_start":560,"line_end":560,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211034,"byte_end":211071,"line_start":561,"line_end":561,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211076,"byte_end":211133,"line_start":562,"line_end":562,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211138,"byte_end":211182,"line_start":563,"line_end":563,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211187,"byte_end":211255,"line_start":564,"line_end":564,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211260,"byte_end":211304,"line_start":565,"line_end":565,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211309,"byte_end":211377,"line_start":566,"line_end":566,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211382,"byte_end":211424,"line_start":567,"line_end":567,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211429,"byte_end":211491,"line_start":568,"line_end":568,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211496,"byte_end":211537,"line_start":569,"line_end":569,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211542,"byte_end":211600,"line_start":570,"line_end":570,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211605,"byte_end":211676,"line_start":571,"line_end":571,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211681,"byte_end":211688,"line_start":572,"line_end":572,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":211693,"byte_end":211701,"line_start":573,"line_end":573,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":453},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214140,"byte_end":214161,"line_start":630,"line_end":630,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212178,"byte_end":212247,"line_start":586,"line_end":586,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212252,"byte_end":212299,"line_start":587,"line_end":587,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212304,"byte_end":212307,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212312,"byte_end":212407,"line_start":589,"line_end":589,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212412,"byte_end":212478,"line_start":590,"line_end":590,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212483,"byte_end":212562,"line_start":591,"line_end":591,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212567,"byte_end":212612,"line_start":592,"line_end":592,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212617,"byte_end":212676,"line_start":593,"line_end":593,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212681,"byte_end":212684,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212689,"byte_end":212702,"line_start":595,"line_end":595,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212707,"byte_end":212710,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212715,"byte_end":212723,"line_start":597,"line_end":597,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212728,"byte_end":212785,"line_start":598,"line_end":598,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212790,"byte_end":212816,"line_start":599,"line_end":599,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212821,"byte_end":212844,"line_start":600,"line_end":600,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212849,"byte_end":212852,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212857,"byte_end":212896,"line_start":602,"line_end":602,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212901,"byte_end":212904,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212909,"byte_end":212942,"line_start":604,"line_end":604,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":212947,"byte_end":213023,"line_start":605,"line_end":605,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213028,"byte_end":213077,"line_start":606,"line_end":606,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213082,"byte_end":213085,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213090,"byte_end":213133,"line_start":608,"line_end":608,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213138,"byte_end":213172,"line_start":609,"line_end":609,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213177,"byte_end":213265,"line_start":610,"line_end":610,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213270,"byte_end":213361,"line_start":611,"line_end":611,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213366,"byte_end":213373,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213378,"byte_end":213386,"line_start":613,"line_end":613,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213391,"byte_end":213394,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213399,"byte_end":213461,"line_start":615,"line_end":615,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213466,"byte_end":213512,"line_start":616,"line_end":616,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213517,"byte_end":213520,"line_start":617,"line_end":617,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213525,"byte_end":213533,"line_start":618,"line_end":618,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213538,"byte_end":213595,"line_start":619,"line_end":619,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213600,"byte_end":213628,"line_start":620,"line_end":620,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213633,"byte_end":213658,"line_start":621,"line_end":621,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213663,"byte_end":213704,"line_start":622,"line_end":622,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213709,"byte_end":213779,"line_start":623,"line_end":623,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213784,"byte_end":213867,"line_start":624,"line_end":624,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213872,"byte_end":213942,"line_start":625,"line_end":625,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":213947,"byte_end":214028,"line_start":626,"line_end":626,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214033,"byte_end":214103,"line_start":627,"line_end":627,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214108,"byte_end":214115,"line_start":628,"line_end":628,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214120,"byte_end":214128,"line_start":629,"line_end":629,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":454},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215603,"byte_end":215620,"line_start":663,"line_end":663,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214310,"byte_end":214385,"line_start":634,"line_end":634,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214390,"byte_end":214469,"line_start":635,"line_end":635,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214474,"byte_end":214477,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214482,"byte_end":214532,"line_start":637,"line_end":637,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214537,"byte_end":214615,"line_start":638,"line_end":638,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214620,"byte_end":214623,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214628,"byte_end":214641,"line_start":640,"line_end":640,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214646,"byte_end":214649,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214654,"byte_end":214662,"line_start":642,"line_end":642,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214667,"byte_end":214693,"line_start":643,"line_end":643,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214698,"byte_end":214746,"line_start":644,"line_end":644,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214751,"byte_end":214754,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214759,"byte_end":214813,"line_start":646,"line_end":646,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214818,"byte_end":214882,"line_start":647,"line_end":647,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214887,"byte_end":214972,"line_start":648,"line_end":648,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":214977,"byte_end":215062,"line_start":649,"line_end":649,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215067,"byte_end":215075,"line_start":650,"line_end":650,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215080,"byte_end":215083,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215088,"byte_end":215172,"line_start":652,"line_end":652,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215177,"byte_end":215180,"line_start":653,"line_end":653,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215185,"byte_end":215193,"line_start":654,"line_end":654,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215198,"byte_end":215226,"line_start":655,"line_end":655,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215231,"byte_end":215281,"line_start":656,"line_end":656,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215286,"byte_end":215350,"line_start":657,"line_end":657,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215355,"byte_end":215421,"line_start":658,"line_end":658,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215426,"byte_end":215506,"line_start":659,"line_end":659,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215511,"byte_end":215519,"line_start":660,"line_end":660,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215524,"byte_end":215577,"line_start":661,"line_end":661,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215582,"byte_end":215591,"line_start":662,"line_end":662,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217421,"byte_end":217427,"line_start":705,"line_end":705,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215831,"byte_end":215903,"line_start":671,"line_end":671,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215908,"byte_end":215978,"line_start":672,"line_end":672,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":215983,"byte_end":216021,"line_start":673,"line_end":673,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216026,"byte_end":216029,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216034,"byte_end":216069,"line_start":675,"line_end":675,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216074,"byte_end":216147,"line_start":676,"line_end":676,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216152,"byte_end":216209,"line_start":677,"line_end":677,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216214,"byte_end":216276,"line_start":678,"line_end":678,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216281,"byte_end":216341,"line_start":679,"line_end":679,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216346,"byte_end":216349,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216354,"byte_end":216418,"line_start":681,"line_end":681,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216423,"byte_end":216486,"line_start":682,"line_end":682,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216491,"byte_end":216566,"line_start":683,"line_end":683,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216571,"byte_end":216574,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216579,"byte_end":216592,"line_start":685,"line_end":685,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216597,"byte_end":216600,"line_start":686,"line_end":686,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216605,"byte_end":216613,"line_start":687,"line_end":687,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216618,"byte_end":216644,"line_start":688,"line_end":688,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216649,"byte_end":216652,"line_start":689,"line_end":689,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216657,"byte_end":216721,"line_start":690,"line_end":690,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216726,"byte_end":216808,"line_start":691,"line_end":691,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216813,"byte_end":216902,"line_start":692,"line_end":692,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216907,"byte_end":216915,"line_start":693,"line_end":693,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216920,"byte_end":216923,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":216928,"byte_end":217012,"line_start":695,"line_end":695,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217017,"byte_end":217020,"line_start":696,"line_end":696,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217025,"byte_end":217033,"line_start":697,"line_end":697,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217038,"byte_end":217066,"line_start":698,"line_end":698,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217071,"byte_end":217137,"line_start":699,"line_end":699,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217142,"byte_end":217227,"line_start":700,"line_end":700,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217232,"byte_end":217324,"line_start":701,"line_end":701,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217329,"byte_end":217337,"line_start":702,"line_end":702,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217342,"byte_end":217395,"line_start":703,"line_end":703,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217400,"byte_end":217409,"line_start":704,"line_end":704,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1681},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":316281,"byte_end":316288,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1682}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":315875,"byte_end":315893,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":315894,"byte_end":315897,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":315898,"byte_end":315961,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":315962,"byte_end":316037,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":316038,"byte_end":316129,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":316130,"byte_end":316214,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":609},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318246,"byte_end":318250,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317588,"byte_end":317634,"line_start":49,"line_end":49,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317639,"byte_end":317642,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317647,"byte_end":317660,"line_start":51,"line_end":51,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317665,"byte_end":317668,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317673,"byte_end":317681,"line_start":53,"line_end":53,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317686,"byte_end":317733,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317738,"byte_end":317741,"line_start":55,"line_end":55,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317746,"byte_end":317804,"line_start":56,"line_end":56,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317809,"byte_end":317851,"line_start":57,"line_end":57,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317856,"byte_end":317864,"line_start":58,"line_end":58,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317869,"byte_end":317872,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317877,"byte_end":317939,"line_start":60,"line_end":60,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317944,"byte_end":317973,"line_start":61,"line_end":61,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317978,"byte_end":317981,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317986,"byte_end":317994,"line_start":63,"line_end":63,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317999,"byte_end":318048,"line_start":64,"line_end":64,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318053,"byte_end":318113,"line_start":65,"line_end":65,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318118,"byte_end":318149,"line_start":66,"line_end":66,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318154,"byte_end":318207,"line_start":67,"line_end":67,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318212,"byte_end":318220,"line_start":68,"line_end":68,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318225,"byte_end":318234,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318700,"byte_end":318704,"line_start":87,"line_end":87,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318301,"byte_end":318349,"line_start":74,"line_end":74,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318354,"byte_end":318357,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318362,"byte_end":318445,"line_start":76,"line_end":76,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318450,"byte_end":318453,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318458,"byte_end":318471,"line_start":78,"line_end":78,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318476,"byte_end":318479,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318484,"byte_end":318492,"line_start":80,"line_end":80,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318497,"byte_end":318544,"line_start":81,"line_end":81,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318549,"byte_end":318552,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318557,"byte_end":318616,"line_start":83,"line_end":83,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318621,"byte_end":318661,"line_start":84,"line_end":84,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318666,"byte_end":318674,"line_start":85,"line_end":85,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318679,"byte_end":318688,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":611},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319172,"byte_end":319177,"line_start":104,"line_end":104,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318772,"byte_end":318820,"line_start":91,"line_end":91,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318825,"byte_end":318828,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318833,"byte_end":318916,"line_start":93,"line_end":93,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318921,"byte_end":318924,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318929,"byte_end":318942,"line_start":95,"line_end":95,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318947,"byte_end":318950,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318955,"byte_end":318963,"line_start":97,"line_end":97,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":318968,"byte_end":319015,"line_start":98,"line_end":98,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319020,"byte_end":319023,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319028,"byte_end":319087,"line_start":100,"line_end":100,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319092,"byte_end":319133,"line_start":101,"line_end":101,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319138,"byte_end":319146,"line_start":102,"line_end":102,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":319151,"byte_end":319160,"line_start":103,"line_end":103,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1701},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329103,"byte_end":329112,"line_start":182,"line_end":182,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1702},{"krate":0,"index":1703}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":321892,"byte_end":321927,"line_start":22,"line_end":22,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":321928,"byte_end":322008,"line_start":23,"line_end":23,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322009,"byte_end":322012,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322013,"byte_end":322039,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322040,"byte_end":322043,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322044,"byte_end":322111,"line_start":27,"line_end":27,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322112,"byte_end":322165,"line_start":28,"line_end":28,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322166,"byte_end":322244,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322245,"byte_end":322315,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322316,"byte_end":322394,"line_start":31,"line_end":31,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322395,"byte_end":322484,"line_start":32,"line_end":32,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322485,"byte_end":322555,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322556,"byte_end":322633,"line_start":34,"line_end":34,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322634,"byte_end":322665,"line_start":35,"line_end":35,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322666,"byte_end":322749,"line_start":36,"line_end":36,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322750,"byte_end":322833,"line_start":37,"line_end":37,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322834,"byte_end":322837,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322838,"byte_end":322875,"line_start":39,"line_end":39,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322876,"byte_end":322944,"line_start":40,"line_end":40,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":322945,"byte_end":323021,"line_start":41,"line_end":41,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323022,"byte_end":323103,"line_start":42,"line_end":42,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323104,"byte_end":323178,"line_start":43,"line_end":43,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323179,"byte_end":323249,"line_start":44,"line_end":44,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323250,"byte_end":323335,"line_start":45,"line_end":45,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323336,"byte_end":323405,"line_start":46,"line_end":46,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323406,"byte_end":323409,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323410,"byte_end":323489,"line_start":48,"line_end":48,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323490,"byte_end":323585,"line_start":49,"line_end":49,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323586,"byte_end":323648,"line_start":50,"line_end":50,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323649,"byte_end":323712,"line_start":51,"line_end":51,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323713,"byte_end":323716,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323717,"byte_end":323758,"line_start":53,"line_end":53,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323759,"byte_end":323838,"line_start":54,"line_end":54,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323839,"byte_end":323919,"line_start":55,"line_end":55,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323920,"byte_end":323991,"line_start":56,"line_end":56,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323992,"byte_end":323995,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":323996,"byte_end":324028,"line_start":58,"line_end":58,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324029,"byte_end":324032,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324033,"byte_end":324108,"line_start":60,"line_end":60,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324109,"byte_end":324184,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324185,"byte_end":324233,"line_start":62,"line_end":62,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324234,"byte_end":324302,"line_start":63,"line_end":63,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324303,"byte_end":324306,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324307,"byte_end":324376,"line_start":65,"line_end":65,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324377,"byte_end":324380,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324381,"byte_end":324389,"line_start":67,"line_end":67,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324390,"byte_end":324444,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324445,"byte_end":324448,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324449,"byte_end":324505,"line_start":70,"line_end":70,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324506,"byte_end":324509,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324510,"byte_end":324592,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324593,"byte_end":324596,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324597,"byte_end":324672,"line_start":74,"line_end":74,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324673,"byte_end":324701,"line_start":75,"line_end":75,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324702,"byte_end":324710,"line_start":76,"line_end":76,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324711,"byte_end":324714,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324715,"byte_end":324795,"line_start":78,"line_end":78,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324796,"byte_end":324875,"line_start":79,"line_end":79,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324876,"byte_end":324961,"line_start":80,"line_end":80,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":324962,"byte_end":325049,"line_start":81,"line_end":81,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325050,"byte_end":325053,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325054,"byte_end":325086,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325087,"byte_end":325090,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325091,"byte_end":325179,"line_start":85,"line_end":85,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325180,"byte_end":325255,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325256,"byte_end":325330,"line_start":87,"line_end":87,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325331,"byte_end":325334,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325335,"byte_end":325356,"line_start":89,"line_end":89,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325357,"byte_end":325443,"line_start":90,"line_end":90,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325444,"byte_end":325447,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325448,"byte_end":325481,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325482,"byte_end":325516,"line_start":93,"line_end":93,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325517,"byte_end":325550,"line_start":94,"line_end":94,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325551,"byte_end":325584,"line_start":95,"line_end":95,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325585,"byte_end":325638,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325639,"byte_end":325673,"line_start":97,"line_end":97,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325674,"byte_end":325708,"line_start":98,"line_end":98,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325709,"byte_end":325748,"line_start":99,"line_end":99,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325749,"byte_end":325752,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325753,"byte_end":325774,"line_start":101,"line_end":101,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325775,"byte_end":325861,"line_start":102,"line_end":102,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325862,"byte_end":325865,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325866,"byte_end":325899,"line_start":104,"line_end":104,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325900,"byte_end":325933,"line_start":105,"line_end":105,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325934,"byte_end":325968,"line_start":106,"line_end":106,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":325969,"byte_end":326003,"line_start":107,"line_end":107,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326004,"byte_end":326060,"line_start":108,"line_end":108,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326061,"byte_end":326100,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326101,"byte_end":326140,"line_start":110,"line_end":110,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326141,"byte_end":326144,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326145,"byte_end":326162,"line_start":112,"line_end":112,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326163,"byte_end":326247,"line_start":113,"line_end":113,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326248,"byte_end":326251,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326252,"byte_end":326288,"line_start":115,"line_end":115,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326289,"byte_end":326323,"line_start":116,"line_end":116,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326324,"byte_end":326358,"line_start":117,"line_end":117,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326359,"byte_end":326419,"line_start":118,"line_end":118,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326420,"byte_end":326459,"line_start":119,"line_end":119,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326460,"byte_end":326497,"line_start":120,"line_end":120,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326498,"byte_end":326535,"line_start":121,"line_end":121,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326536,"byte_end":326595,"line_start":122,"line_end":122,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326596,"byte_end":326672,"line_start":123,"line_end":123,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326673,"byte_end":326705,"line_start":124,"line_end":124,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326706,"byte_end":326787,"line_start":125,"line_end":125,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326788,"byte_end":326826,"line_start":126,"line_end":126,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326827,"byte_end":326830,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326831,"byte_end":326846,"line_start":128,"line_end":128,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326847,"byte_end":326850,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326851,"byte_end":326919,"line_start":130,"line_end":130,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326920,"byte_end":326923,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326924,"byte_end":326995,"line_start":132,"line_end":132,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":326996,"byte_end":326999,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327000,"byte_end":327067,"line_start":134,"line_end":134,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327068,"byte_end":327071,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327072,"byte_end":327124,"line_start":136,"line_end":136,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327125,"byte_end":327216,"line_start":137,"line_end":137,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327217,"byte_end":327250,"line_start":138,"line_end":138,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327251,"byte_end":327254,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327255,"byte_end":327345,"line_start":140,"line_end":140,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327346,"byte_end":327349,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327350,"byte_end":327425,"line_start":142,"line_end":142,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327426,"byte_end":327465,"line_start":143,"line_end":143,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327466,"byte_end":327551,"line_start":144,"line_end":144,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327552,"byte_end":327589,"line_start":145,"line_end":145,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327590,"byte_end":327593,"line_start":146,"line_end":146,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327594,"byte_end":327633,"line_start":147,"line_end":147,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327634,"byte_end":327637,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327638,"byte_end":327695,"line_start":149,"line_end":149,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327696,"byte_end":327753,"line_start":150,"line_end":150,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327754,"byte_end":327810,"line_start":151,"line_end":151,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327811,"byte_end":327888,"line_start":152,"line_end":152,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327889,"byte_end":327892,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327893,"byte_end":327901,"line_start":154,"line_end":154,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327902,"byte_end":327934,"line_start":155,"line_end":155,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327935,"byte_end":327938,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":327939,"byte_end":328006,"line_start":157,"line_end":157,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328007,"byte_end":328067,"line_start":158,"line_end":158,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328068,"byte_end":328076,"line_start":159,"line_end":159,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328077,"byte_end":328080,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328081,"byte_end":328147,"line_start":161,"line_end":161,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328148,"byte_end":328185,"line_start":162,"line_end":162,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328186,"byte_end":328252,"line_start":163,"line_end":163,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328253,"byte_end":328350,"line_start":164,"line_end":164,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328351,"byte_end":328416,"line_start":165,"line_end":165,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328417,"byte_end":328472,"line_start":166,"line_end":166,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328473,"byte_end":328476,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328477,"byte_end":328485,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328486,"byte_end":328528,"line_start":169,"line_end":169,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328529,"byte_end":328532,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328533,"byte_end":328599,"line_start":171,"line_end":171,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328600,"byte_end":328660,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328661,"byte_end":328664,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328665,"byte_end":328718,"line_start":174,"line_end":174,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328719,"byte_end":328779,"line_start":175,"line_end":175,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328780,"byte_end":328862,"line_start":176,"line_end":176,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328863,"byte_end":328871,"line_start":177,"line_end":177,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328872,"byte_end":328875,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328876,"byte_end":328946,"line_start":179,"line_end":179,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":328947,"byte_end":329036,"line_start":180,"line_end":180,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":643},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329770,"byte_end":329778,"line_start":207,"line_end":207,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329169,"byte_end":329226,"line_start":188,"line_end":188,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329231,"byte_end":329234,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329239,"byte_end":329299,"line_start":190,"line_end":190,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329304,"byte_end":329379,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329384,"byte_end":329387,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329392,"byte_end":329441,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329446,"byte_end":329449,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329454,"byte_end":329467,"line_start":195,"line_end":195,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329472,"byte_end":329475,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329480,"byte_end":329488,"line_start":197,"line_end":197,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329493,"byte_end":329531,"line_start":198,"line_end":198,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329536,"byte_end":329539,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329544,"byte_end":329587,"line_start":200,"line_end":200,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329592,"byte_end":329621,"line_start":201,"line_end":201,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329626,"byte_end":329657,"line_start":202,"line_end":202,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329662,"byte_end":329692,"line_start":203,"line_end":203,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329697,"byte_end":329731,"line_start":204,"line_end":204,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329736,"byte_end":329744,"line_start":205,"line_end":205,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329749,"byte_end":329758,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330635,"byte_end":330647,"line_start":232,"line_end":232,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329907,"byte_end":329964,"line_start":211,"line_end":211,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329969,"byte_end":329972,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329977,"byte_end":330037,"line_start":213,"line_end":213,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330042,"byte_end":330121,"line_start":214,"line_end":214,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330126,"byte_end":330129,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330134,"byte_end":330191,"line_start":216,"line_end":216,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330196,"byte_end":330199,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330204,"byte_end":330217,"line_start":218,"line_end":218,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330222,"byte_end":330225,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330230,"byte_end":330238,"line_start":220,"line_end":220,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330243,"byte_end":330269,"line_start":221,"line_end":221,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330274,"byte_end":330277,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330282,"byte_end":330329,"line_start":223,"line_end":223,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330334,"byte_end":330337,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330342,"byte_end":330387,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330392,"byte_end":330440,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330445,"byte_end":330491,"line_start":227,"line_end":227,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330496,"byte_end":330543,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330548,"byte_end":330596,"line_start":229,"line_end":229,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330601,"byte_end":330609,"line_start":230,"line_end":230,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330614,"byte_end":330623,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":645},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331388,"byte_end":331402,"line_start":255,"line_end":255,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330769,"byte_end":330839,"line_start":236,"line_end":236,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330844,"byte_end":330847,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330852,"byte_end":330893,"line_start":238,"line_end":238,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330898,"byte_end":330965,"line_start":239,"line_end":239,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330970,"byte_end":330973,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":330978,"byte_end":331040,"line_start":241,"line_end":241,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331045,"byte_end":331048,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331053,"byte_end":331066,"line_start":243,"line_end":243,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331071,"byte_end":331074,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331079,"byte_end":331087,"line_start":245,"line_end":245,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331092,"byte_end":331130,"line_start":246,"line_end":246,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331135,"byte_end":331138,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331143,"byte_end":331196,"line_start":248,"line_end":248,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331201,"byte_end":331230,"line_start":249,"line_end":249,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331235,"byte_end":331266,"line_start":250,"line_end":250,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331271,"byte_end":331301,"line_start":251,"line_end":251,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331306,"byte_end":331349,"line_start":252,"line_end":252,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331354,"byte_end":331362,"line_start":253,"line_end":253,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331367,"byte_end":331376,"line_start":254,"line_end":254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332462,"byte_end":332480,"line_start":282,"line_end":282,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331556,"byte_end":331626,"line_start":259,"line_end":259,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331631,"byte_end":331634,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331639,"byte_end":331680,"line_start":261,"line_end":261,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331685,"byte_end":331752,"line_start":262,"line_end":262,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331757,"byte_end":331760,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331765,"byte_end":331835,"line_start":264,"line_end":264,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331840,"byte_end":331843,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331848,"byte_end":331861,"line_start":266,"line_end":266,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331866,"byte_end":331869,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331874,"byte_end":331882,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331887,"byte_end":331913,"line_start":269,"line_end":269,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331918,"byte_end":331921,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331926,"byte_end":331980,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331985,"byte_end":331988,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":331993,"byte_end":332042,"line_start":273,"line_end":273,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332047,"byte_end":332101,"line_start":274,"line_end":274,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332106,"byte_end":332194,"line_start":275,"line_end":275,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332199,"byte_end":332249,"line_start":276,"line_end":276,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332254,"byte_end":332305,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332310,"byte_end":332362,"line_start":278,"line_end":278,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332367,"byte_end":332423,"line_start":279,"line_end":279,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332428,"byte_end":332436,"line_start":280,"line_end":280,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332441,"byte_end":332450,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333316,"byte_end":333330,"line_start":307,"line_end":307,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332689,"byte_end":332759,"line_start":288,"line_end":288,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332764,"byte_end":332767,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332772,"byte_end":332817,"line_start":290,"line_end":290,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332822,"byte_end":332889,"line_start":291,"line_end":291,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332894,"byte_end":332897,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332902,"byte_end":332964,"line_start":293,"line_end":293,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332969,"byte_end":332972,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332977,"byte_end":332990,"line_start":295,"line_end":295,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":332995,"byte_end":332998,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333003,"byte_end":333011,"line_start":297,"line_end":297,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333016,"byte_end":333054,"line_start":298,"line_end":298,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333059,"byte_end":333062,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333067,"byte_end":333124,"line_start":300,"line_end":300,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333129,"byte_end":333158,"line_start":301,"line_end":301,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333163,"byte_end":333194,"line_start":302,"line_end":302,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333199,"byte_end":333229,"line_start":303,"line_end":303,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333234,"byte_end":333277,"line_start":304,"line_end":304,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333282,"byte_end":333290,"line_start":305,"line_end":305,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333295,"byte_end":333304,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334406,"byte_end":334424,"line_start":334,"line_end":334,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333484,"byte_end":333554,"line_start":311,"line_end":311,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333559,"byte_end":333562,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333567,"byte_end":333612,"line_start":313,"line_end":313,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333617,"byte_end":333684,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333689,"byte_end":333692,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333697,"byte_end":333767,"line_start":316,"line_end":316,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333772,"byte_end":333775,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333780,"byte_end":333793,"line_start":318,"line_end":318,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333798,"byte_end":333801,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333806,"byte_end":333814,"line_start":320,"line_end":320,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333819,"byte_end":333845,"line_start":321,"line_end":321,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333850,"byte_end":333853,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333858,"byte_end":333912,"line_start":323,"line_end":323,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333917,"byte_end":333920,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333925,"byte_end":333974,"line_start":325,"line_end":325,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":333979,"byte_end":334037,"line_start":326,"line_end":326,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334042,"byte_end":334134,"line_start":327,"line_end":327,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334139,"byte_end":334189,"line_start":328,"line_end":328,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334194,"byte_end":334245,"line_start":329,"line_end":329,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334250,"byte_end":334302,"line_start":330,"line_end":330,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334307,"byte_end":334367,"line_start":331,"line_end":331,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334372,"byte_end":334380,"line_start":332,"line_end":332,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334385,"byte_end":334394,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335234,"byte_end":335247,"line_start":357,"line_end":357,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334603,"byte_end":334672,"line_start":338,"line_end":338,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334677,"byte_end":334680,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334685,"byte_end":334733,"line_start":340,"line_end":340,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334738,"byte_end":334805,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334810,"byte_end":334813,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334818,"byte_end":334879,"line_start":343,"line_end":343,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334884,"byte_end":334887,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334892,"byte_end":334905,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334910,"byte_end":334913,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334918,"byte_end":334926,"line_start":347,"line_end":347,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334931,"byte_end":334969,"line_start":348,"line_end":348,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334974,"byte_end":334977,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":334982,"byte_end":335042,"line_start":350,"line_end":350,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335047,"byte_end":335076,"line_start":351,"line_end":351,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335081,"byte_end":335112,"line_start":352,"line_end":352,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335117,"byte_end":335147,"line_start":353,"line_end":353,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335152,"byte_end":335195,"line_start":354,"line_end":354,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335200,"byte_end":335208,"line_start":355,"line_end":355,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335213,"byte_end":335222,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336332,"byte_end":336349,"line_start":384,"line_end":384,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335398,"byte_end":335467,"line_start":361,"line_end":361,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335472,"byte_end":335475,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335480,"byte_end":335528,"line_start":363,"line_end":363,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335533,"byte_end":335600,"line_start":364,"line_end":364,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335605,"byte_end":335608,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335613,"byte_end":335682,"line_start":366,"line_end":366,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335687,"byte_end":335690,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335695,"byte_end":335708,"line_start":368,"line_end":368,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335713,"byte_end":335716,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335721,"byte_end":335729,"line_start":370,"line_end":370,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335734,"byte_end":335760,"line_start":371,"line_end":371,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335765,"byte_end":335768,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335773,"byte_end":335826,"line_start":373,"line_end":373,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335831,"byte_end":335834,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335839,"byte_end":335888,"line_start":375,"line_end":375,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335893,"byte_end":335955,"line_start":376,"line_end":376,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":335960,"byte_end":336056,"line_start":377,"line_end":377,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336061,"byte_end":336111,"line_start":378,"line_end":378,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336116,"byte_end":336167,"line_start":379,"line_end":379,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336172,"byte_end":336224,"line_start":380,"line_end":380,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336229,"byte_end":336293,"line_start":381,"line_end":381,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336298,"byte_end":336306,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336311,"byte_end":336320,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337293,"byte_end":337323,"line_start":411,"line_end":411,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336636,"byte_end":336721,"line_start":392,"line_end":392,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336726,"byte_end":336729,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336734,"byte_end":336782,"line_start":394,"line_end":394,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336787,"byte_end":336854,"line_start":395,"line_end":395,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336859,"byte_end":336862,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336867,"byte_end":336925,"line_start":397,"line_end":397,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336930,"byte_end":336933,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336938,"byte_end":336951,"line_start":399,"line_end":399,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336956,"byte_end":336959,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336964,"byte_end":336972,"line_start":401,"line_end":401,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":336977,"byte_end":337015,"line_start":402,"line_end":402,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337020,"byte_end":337023,"line_start":403,"line_end":403,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337028,"byte_end":337101,"line_start":404,"line_end":404,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337106,"byte_end":337135,"line_start":405,"line_end":405,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337140,"byte_end":337171,"line_start":406,"line_end":406,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337176,"byte_end":337206,"line_start":407,"line_end":407,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337211,"byte_end":337254,"line_start":408,"line_end":408,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337259,"byte_end":337267,"line_start":409,"line_end":409,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337272,"byte_end":337281,"line_start":410,"line_end":410,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338295,"byte_end":338329,"line_start":436,"line_end":436,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337461,"byte_end":337546,"line_start":415,"line_end":415,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337551,"byte_end":337554,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337559,"byte_end":337607,"line_start":417,"line_end":417,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337612,"byte_end":337679,"line_start":418,"line_end":418,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337684,"byte_end":337687,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337692,"byte_end":337758,"line_start":420,"line_end":420,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337763,"byte_end":337766,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337771,"byte_end":337784,"line_start":422,"line_end":422,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337789,"byte_end":337792,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337797,"byte_end":337805,"line_start":424,"line_end":424,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337810,"byte_end":337836,"line_start":425,"line_end":425,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337841,"byte_end":337844,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337849,"byte_end":337920,"line_start":427,"line_end":427,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337925,"byte_end":337928,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337933,"byte_end":337977,"line_start":429,"line_end":429,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":337982,"byte_end":338040,"line_start":430,"line_end":430,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338045,"byte_end":338137,"line_start":431,"line_end":431,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338142,"byte_end":338191,"line_start":432,"line_end":432,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338196,"byte_end":338256,"line_start":433,"line_end":433,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338261,"byte_end":338269,"line_start":434,"line_end":434,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338274,"byte_end":338283,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340999,"byte_end":341013,"line_start":504,"line_end":504,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338525,"byte_end":338608,"line_start":443,"line_end":443,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338613,"byte_end":338683,"line_start":444,"line_end":444,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338688,"byte_end":338726,"line_start":445,"line_end":445,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338731,"byte_end":338734,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338739,"byte_end":338752,"line_start":447,"line_end":447,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338757,"byte_end":338760,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338765,"byte_end":338773,"line_start":449,"line_end":449,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338778,"byte_end":338804,"line_start":450,"line_end":450,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338809,"byte_end":338812,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338817,"byte_end":338868,"line_start":452,"line_end":452,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338873,"byte_end":338876,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338881,"byte_end":338935,"line_start":454,"line_end":454,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338940,"byte_end":338991,"line_start":455,"line_end":455,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":338996,"byte_end":339058,"line_start":456,"line_end":456,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339063,"byte_end":339130,"line_start":457,"line_end":457,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339135,"byte_end":339143,"line_start":458,"line_end":458,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339148,"byte_end":339151,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339156,"byte_end":339214,"line_start":460,"line_end":460,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339219,"byte_end":339222,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339227,"byte_end":339235,"line_start":462,"line_end":462,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339240,"byte_end":339268,"line_start":463,"line_end":463,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339273,"byte_end":339326,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339331,"byte_end":339412,"line_start":465,"line_end":465,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339417,"byte_end":339469,"line_start":466,"line_end":466,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339474,"byte_end":339482,"line_start":467,"line_end":467,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339487,"byte_end":339490,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339495,"byte_end":339561,"line_start":469,"line_end":469,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339566,"byte_end":339628,"line_start":470,"line_end":470,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339633,"byte_end":339709,"line_start":471,"line_end":471,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339714,"byte_end":339717,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339722,"byte_end":339730,"line_start":473,"line_end":473,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339735,"byte_end":339763,"line_start":474,"line_end":474,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339768,"byte_end":339821,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339826,"byte_end":339887,"line_start":476,"line_end":476,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339892,"byte_end":339956,"line_start":477,"line_end":477,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339961,"byte_end":339969,"line_start":478,"line_end":478,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339974,"byte_end":339977,"line_start":479,"line_end":479,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":339982,"byte_end":340025,"line_start":480,"line_end":480,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340030,"byte_end":340101,"line_start":481,"line_end":481,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340106,"byte_end":340109,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340114,"byte_end":340122,"line_start":483,"line_end":483,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340127,"byte_end":340155,"line_start":484,"line_end":484,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340160,"byte_end":340213,"line_start":485,"line_end":485,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340218,"byte_end":340265,"line_start":486,"line_end":486,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340270,"byte_end":340320,"line_start":487,"line_end":487,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340325,"byte_end":340328,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340333,"byte_end":340390,"line_start":489,"line_end":489,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340395,"byte_end":340444,"line_start":490,"line_end":490,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340449,"byte_end":340504,"line_start":491,"line_end":491,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340509,"byte_end":340570,"line_start":492,"line_end":492,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340575,"byte_end":340583,"line_start":493,"line_end":493,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340588,"byte_end":340591,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340596,"byte_end":340678,"line_start":495,"line_end":495,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340683,"byte_end":340732,"line_start":496,"line_end":496,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340737,"byte_end":340796,"line_start":497,"line_end":497,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340801,"byte_end":340804,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340809,"byte_end":340817,"line_start":499,"line_end":499,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340822,"byte_end":340850,"line_start":500,"line_end":500,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340855,"byte_end":340908,"line_start":501,"line_end":501,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340913,"byte_end":340974,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":340979,"byte_end":340987,"line_start":503,"line_end":503,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":342176,"byte_end":342198,"line_start":533,"line_end":533,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341201,"byte_end":341247,"line_start":510,"line_end":510,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341252,"byte_end":341296,"line_start":511,"line_end":511,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341301,"byte_end":341362,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341367,"byte_end":341448,"line_start":513,"line_end":513,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341453,"byte_end":341456,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341461,"byte_end":341474,"line_start":515,"line_end":515,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341479,"byte_end":341482,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341487,"byte_end":341495,"line_start":517,"line_end":517,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341500,"byte_end":341557,"line_start":518,"line_end":518,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341562,"byte_end":341588,"line_start":519,"line_end":519,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341593,"byte_end":341616,"line_start":520,"line_end":520,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341621,"byte_end":341624,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341629,"byte_end":341668,"line_start":522,"line_end":522,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341673,"byte_end":341676,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341681,"byte_end":341758,"line_start":524,"line_end":524,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341763,"byte_end":341803,"line_start":525,"line_end":525,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341808,"byte_end":341885,"line_start":526,"line_end":526,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341890,"byte_end":341934,"line_start":527,"line_end":527,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":341939,"byte_end":342016,"line_start":528,"line_end":528,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":342021,"byte_end":342067,"line_start":529,"line_end":529,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":342072,"byte_end":342079,"line_start":530,"line_end":530,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":342084,"byte_end":342092,"line_start":531,"line_end":531,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":657},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345707,"byte_end":345729,"line_start":619,"line_end":619,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":344781,"byte_end":344834,"line_start":596,"line_end":596,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":344839,"byte_end":344883,"line_start":597,"line_end":597,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":344888,"byte_end":344952,"line_start":598,"line_end":598,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":344957,"byte_end":345038,"line_start":599,"line_end":599,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345043,"byte_end":345046,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345051,"byte_end":345064,"line_start":601,"line_end":601,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345069,"byte_end":345072,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345077,"byte_end":345085,"line_start":603,"line_end":603,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345090,"byte_end":345147,"line_start":604,"line_end":604,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345152,"byte_end":345178,"line_start":605,"line_end":605,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345183,"byte_end":345206,"line_start":606,"line_end":606,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345211,"byte_end":345214,"line_start":607,"line_end":607,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345219,"byte_end":345258,"line_start":608,"line_end":608,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345263,"byte_end":345266,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345271,"byte_end":345347,"line_start":610,"line_end":610,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345352,"byte_end":345391,"line_start":611,"line_end":611,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345396,"byte_end":345473,"line_start":612,"line_end":612,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345478,"byte_end":345523,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345528,"byte_end":345606,"line_start":614,"line_end":614,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345611,"byte_end":345656,"line_start":615,"line_end":615,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345661,"byte_end":345668,"line_start":616,"line_end":616,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345673,"byte_end":345681,"line_start":617,"line_end":617,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345686,"byte_end":345695,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348783,"byte_end":348804,"line_start":684,"line_end":684,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345921,"byte_end":345977,"line_start":624,"line_end":624,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":345982,"byte_end":346024,"line_start":625,"line_end":625,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346029,"byte_end":346076,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346081,"byte_end":346084,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346089,"byte_end":346161,"line_start":628,"line_end":628,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346166,"byte_end":346232,"line_start":629,"line_end":629,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346237,"byte_end":346312,"line_start":630,"line_end":630,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346317,"byte_end":346362,"line_start":631,"line_end":631,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346367,"byte_end":346426,"line_start":632,"line_end":632,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346431,"byte_end":346434,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346439,"byte_end":346452,"line_start":634,"line_end":634,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346457,"byte_end":346460,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346465,"byte_end":346473,"line_start":636,"line_end":636,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346478,"byte_end":346535,"line_start":637,"line_end":637,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346540,"byte_end":346566,"line_start":638,"line_end":638,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346571,"byte_end":346594,"line_start":639,"line_end":639,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346599,"byte_end":346602,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346607,"byte_end":346653,"line_start":641,"line_end":641,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346658,"byte_end":346707,"line_start":642,"line_end":642,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346712,"byte_end":346715,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346720,"byte_end":346791,"line_start":644,"line_end":644,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346796,"byte_end":346829,"line_start":645,"line_end":645,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346834,"byte_end":346905,"line_start":646,"line_end":646,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346910,"byte_end":346953,"line_start":647,"line_end":647,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":346958,"byte_end":347029,"line_start":648,"line_end":648,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347034,"byte_end":347078,"line_start":649,"line_end":649,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347083,"byte_end":347154,"line_start":650,"line_end":650,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347159,"byte_end":347196,"line_start":651,"line_end":651,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347201,"byte_end":347272,"line_start":652,"line_end":652,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347277,"byte_end":347319,"line_start":653,"line_end":653,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347324,"byte_end":347395,"line_start":654,"line_end":654,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347400,"byte_end":347444,"line_start":655,"line_end":655,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347449,"byte_end":347520,"line_start":656,"line_end":656,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347525,"byte_end":347566,"line_start":657,"line_end":657,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347571,"byte_end":347642,"line_start":658,"line_end":658,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347647,"byte_end":347726,"line_start":659,"line_end":659,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347731,"byte_end":347738,"line_start":660,"line_end":660,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347743,"byte_end":347751,"line_start":661,"line_end":661,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347756,"byte_end":347759,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347764,"byte_end":347826,"line_start":663,"line_end":663,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347831,"byte_end":347877,"line_start":664,"line_end":664,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347882,"byte_end":347885,"line_start":665,"line_end":665,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347890,"byte_end":347898,"line_start":666,"line_end":666,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347903,"byte_end":347960,"line_start":667,"line_end":667,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347965,"byte_end":347993,"line_start":668,"line_end":668,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":347998,"byte_end":348023,"line_start":669,"line_end":669,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348028,"byte_end":348076,"line_start":670,"line_end":670,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348081,"byte_end":348132,"line_start":671,"line_end":671,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348137,"byte_end":348210,"line_start":672,"line_end":672,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348215,"byte_end":348252,"line_start":673,"line_end":673,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348257,"byte_end":348330,"line_start":674,"line_end":674,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348335,"byte_end":348380,"line_start":675,"line_end":675,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348385,"byte_end":348457,"line_start":676,"line_end":676,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348462,"byte_end":348500,"line_start":677,"line_end":677,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348505,"byte_end":348578,"line_start":678,"line_end":678,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348583,"byte_end":348620,"line_start":679,"line_end":679,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348625,"byte_end":348703,"line_start":680,"line_end":680,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348708,"byte_end":348746,"line_start":681,"line_end":681,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348751,"byte_end":348758,"line_start":682,"line_end":682,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":348763,"byte_end":348771,"line_start":683,"line_end":683,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351460,"byte_end":351477,"line_start":751,"line_end":751,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is the same as the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350281,"byte_end":350338,"line_start":722,"line_end":722,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is the same as the ordinary [`format`](#method.format) method.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350343,"byte_end":350422,"line_start":723,"line_end":723,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350427,"byte_end":350430,"line_start":724,"line_end":724,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350435,"byte_end":350485,"line_start":725,"line_end":725,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350490,"byte_end":350568,"line_start":726,"line_end":726,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350573,"byte_end":350576,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350581,"byte_end":350594,"line_start":728,"line_end":728,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350599,"byte_end":350602,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350607,"byte_end":350615,"line_start":730,"line_end":730,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350620,"byte_end":350646,"line_start":731,"line_end":731,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350651,"byte_end":350699,"line_start":732,"line_end":732,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350704,"byte_end":350707,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350712,"byte_end":350757,"line_start":734,"line_end":734,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350762,"byte_end":350805,"line_start":735,"line_end":735,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350810,"byte_end":350883,"line_start":736,"line_end":736,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350888,"byte_end":350961,"line_start":737,"line_end":737,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350966,"byte_end":350974,"line_start":738,"line_end":738,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350979,"byte_end":350982,"line_start":739,"line_end":739,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":350987,"byte_end":351071,"line_start":740,"line_end":740,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351076,"byte_end":351079,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351084,"byte_end":351092,"line_start":742,"line_end":742,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351097,"byte_end":351125,"line_start":743,"line_end":743,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351130,"byte_end":351180,"line_start":744,"line_end":744,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351185,"byte_end":351240,"line_start":745,"line_end":745,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351245,"byte_end":351290,"line_start":746,"line_end":746,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351295,"byte_end":351363,"line_start":747,"line_end":747,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351368,"byte_end":351376,"line_start":748,"line_end":748,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351381,"byte_end":351434,"line_start":749,"line_end":749,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351439,"byte_end":351448,"line_start":750,"line_end":750,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353298,"byte_end":353304,"line_start":795,"line_end":795,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351673,"byte_end":351727,"line_start":759,"line_end":759,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351732,"byte_end":351802,"line_start":760,"line_end":760,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351807,"byte_end":351845,"line_start":761,"line_end":761,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351850,"byte_end":351853,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351858,"byte_end":351893,"line_start":763,"line_end":763,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351898,"byte_end":351971,"line_start":764,"line_end":764,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":351976,"byte_end":352033,"line_start":765,"line_end":765,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352038,"byte_end":352100,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352105,"byte_end":352165,"line_start":767,"line_end":767,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352170,"byte_end":352173,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352178,"byte_end":352242,"line_start":769,"line_end":769,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352247,"byte_end":352310,"line_start":770,"line_end":770,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352315,"byte_end":352390,"line_start":771,"line_end":771,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352395,"byte_end":352398,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352403,"byte_end":352416,"line_start":773,"line_end":773,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352421,"byte_end":352424,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352429,"byte_end":352437,"line_start":775,"line_end":775,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352442,"byte_end":352468,"line_start":776,"line_end":776,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352473,"byte_end":352476,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352481,"byte_end":352541,"line_start":778,"line_end":778,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352546,"byte_end":352607,"line_start":779,"line_end":779,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352612,"byte_end":352684,"line_start":780,"line_end":780,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352689,"byte_end":352751,"line_start":781,"line_end":781,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352756,"byte_end":352764,"line_start":782,"line_end":782,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352769,"byte_end":352772,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352777,"byte_end":352861,"line_start":784,"line_end":784,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352866,"byte_end":352869,"line_start":785,"line_end":785,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352874,"byte_end":352882,"line_start":786,"line_end":786,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352887,"byte_end":352915,"line_start":787,"line_end":787,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352920,"byte_end":352982,"line_start":788,"line_end":788,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":352987,"byte_end":353051,"line_start":789,"line_end":789,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353056,"byte_end":353131,"line_start":790,"line_end":790,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353136,"byte_end":353201,"line_start":791,"line_end":791,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353206,"byte_end":353214,"line_start":792,"line_end":792,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353219,"byte_end":353272,"line_start":793,"line_end":793,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353277,"byte_end":353286,"line_start":794,"line_end":794,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1726},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394507,"byte_end":394511,"line_start":47,"line_end":47,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1728},{"krate":0,"index":1729}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393134,"byte_end":393176,"line_start":22,"line_end":22,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393177,"byte_end":393180,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393181,"byte_end":393234,"line_start":24,"line_end":24,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393235,"byte_end":393315,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393316,"byte_end":393402,"line_start":26,"line_end":26,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393403,"byte_end":393460,"line_start":27,"line_end":27,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393461,"byte_end":393464,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393465,"byte_end":393543,"line_start":29,"line_end":29,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393544,"byte_end":393614,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393615,"byte_end":393671,"line_start":31,"line_end":31,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393672,"byte_end":393675,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393676,"byte_end":393748,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393749,"byte_end":393801,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393802,"byte_end":393889,"line_start":35,"line_end":35,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393890,"byte_end":393958,"line_start":36,"line_end":36,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":393959,"byte_end":394005,"line_start":37,"line_end":37,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394006,"byte_end":394009,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394010,"byte_end":394054,"line_start":39,"line_end":39,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394055,"byte_end":394151,"line_start":40,"line_end":40,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394152,"byte_end":394247,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394248,"byte_end":394251,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394252,"byte_end":394328,"line_start":43,"line_end":43,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394329,"byte_end":394396,"line_start":44,"line_end":44,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394397,"byte_end":394478,"line_start":45,"line_end":45,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":737},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394619,"byte_end":394627,"line_start":53,"line_end":53,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394576,"byte_end":394608,"line_start":52,"line_end":52,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":738},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394729,"byte_end":394737,"line_start":55,"line_end":55,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394686,"byte_end":394718,"line_start":54,"line_end":54,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":741},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395085,"byte_end":395093,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394831,"byte_end":394887,"line_start":58,"line_end":58,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394892,"byte_end":394958,"line_start":59,"line_end":59,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395064,"byte_end":395073,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395394,"byte_end":395402,"line_start":72,"line_end":72,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395200,"byte_end":395271,"line_start":67,"line_end":67,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395276,"byte_end":395324,"line_start":68,"line_end":68,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395329,"byte_end":395332,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395337,"byte_end":395368,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395373,"byte_end":395382,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395799,"byte_end":395806,"line_start":82,"line_end":82,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395584,"byte_end":395658,"line_start":77,"line_end":77,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395663,"byte_end":395711,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395716,"byte_end":395719,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395724,"byte_end":395773,"line_start":80,"line_end":80,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395778,"byte_end":395787,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396161,"byte_end":396172,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":395938,"byte_end":396012,"line_start":86,"line_end":86,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396017,"byte_end":396065,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396070,"byte_end":396073,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396078,"byte_end":396135,"line_start":89,"line_end":89,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396140,"byte_end":396149,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396659,"byte_end":396672,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396333,"byte_end":396420,"line_start":95,"line_end":95,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396425,"byte_end":396505,"line_start":96,"line_end":96,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396510,"byte_end":396558,"line_start":97,"line_end":97,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396563,"byte_end":396566,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396571,"byte_end":396633,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396638,"byte_end":396647,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397163,"byte_end":397180,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396829,"byte_end":396916,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":396921,"byte_end":397001,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397006,"byte_end":397054,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397059,"byte_end":397062,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397067,"byte_end":397137,"line_start":109,"line_end":109,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397142,"byte_end":397151,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397743,"byte_end":397756,"line_start":127,"line_end":127,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397413,"byte_end":397500,"line_start":121,"line_end":121,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397505,"byte_end":397589,"line_start":122,"line_end":122,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397594,"byte_end":397642,"line_start":123,"line_end":123,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397647,"byte_end":397650,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397655,"byte_end":397717,"line_start":125,"line_end":125,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397722,"byte_end":397731,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398251,"byte_end":398268,"line_start":137,"line_end":137,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":397913,"byte_end":398000,"line_start":131,"line_end":131,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398005,"byte_end":398089,"line_start":132,"line_end":132,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398094,"byte_end":398142,"line_start":133,"line_end":133,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398147,"byte_end":398150,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398155,"byte_end":398225,"line_start":135,"line_end":135,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398230,"byte_end":398239,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398832,"byte_end":398844,"line_start":153,"line_end":153,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398501,"byte_end":398587,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398592,"byte_end":398679,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398684,"byte_end":398732,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398737,"byte_end":398740,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398745,"byte_end":398806,"line_start":151,"line_end":151,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398811,"byte_end":398820,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399337,"byte_end":399353,"line_start":163,"line_end":163,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":398998,"byte_end":399084,"line_start":157,"line_end":157,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399089,"byte_end":399176,"line_start":158,"line_end":158,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399181,"byte_end":399229,"line_start":159,"line_end":159,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399234,"byte_end":399237,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399242,"byte_end":399311,"line_start":161,"line_end":161,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399316,"byte_end":399325,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399717,"byte_end":399721,"line_start":177,"line_end":177,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399583,"byte_end":399624,"line_start":173,"line_end":173,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399629,"byte_end":399632,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399637,"byte_end":399691,"line_start":175,"line_end":175,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399696,"byte_end":399705,"line_start":176,"line_end":176,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399943,"byte_end":399951,"line_start":185,"line_end":185,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399801,"byte_end":399842,"line_start":181,"line_end":181,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399847,"byte_end":399850,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399855,"byte_end":399917,"line_start":183,"line_end":183,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":399922,"byte_end":399931,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400211,"byte_end":400215,"line_start":193,"line_end":193,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400075,"byte_end":400117,"line_start":189,"line_end":189,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400122,"byte_end":400125,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400130,"byte_end":400185,"line_start":191,"line_end":191,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400190,"byte_end":400199,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":759},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400439,"byte_end":400447,"line_start":201,"line_end":201,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400295,"byte_end":400337,"line_start":197,"line_end":197,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400342,"byte_end":400345,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400350,"byte_end":400413,"line_start":199,"line_end":199,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400418,"byte_end":400427,"line_start":200,"line_end":200,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":761},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400641,"byte_end":400647,"line_start":207,"line_end":207,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400571,"byte_end":400615,"line_start":205,"line_end":205,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400620,"byte_end":400629,"line_start":206,"line_end":206,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400768,"byte_end":400776,"line_start":213,"line_end":213,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400704,"byte_end":400742,"line_start":211,"line_end":211,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400747,"byte_end":400756,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401002,"byte_end":401015,"line_start":220,"line_end":220,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400847,"byte_end":400884,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400889,"byte_end":400976,"line_start":218,"line_end":218,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":400981,"byte_end":400990,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401247,"byte_end":401265,"line_start":228,"line_end":228,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401111,"byte_end":401157,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401162,"byte_end":401165,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401170,"byte_end":401221,"line_start":226,"line_end":226,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401226,"byte_end":401235,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401585,"byte_end":401603,"line_start":237,"line_end":237,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401442,"byte_end":401495,"line_start":233,"line_end":233,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401500,"byte_end":401503,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401508,"byte_end":401559,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401564,"byte_end":401573,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402031,"byte_end":402052,"line_start":248,"line_end":248,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401780,"byte_end":401831,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401836,"byte_end":401881,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401886,"byte_end":401889,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401894,"byte_end":401941,"line_start":245,"line_end":245,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":401946,"byte_end":402005,"line_start":246,"line_end":246,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402010,"byte_end":402019,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402235,"byte_end":402244,"line_start":254,"line_end":254,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402168,"byte_end":402209,"line_start":252,"line_end":252,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402214,"byte_end":402223,"line_start":253,"line_end":253,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402554,"byte_end":402565,"line_start":264,"line_end":264,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402296,"byte_end":402339,"line_start":258,"line_end":258,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402344,"byte_end":402347,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ This is technically the same as [`naive_utc`](#method.naive_utc)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402352,"byte_end":402420,"line_start":260,"line_end":260,"column_start":5,"column_end":73}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402425,"byte_end":402486,"line_start":261,"line_end":261,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402491,"byte_end":402528,"line_start":262,"line_end":262,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402533,"byte_end":402542,"line_start":263,"line_end":263,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403112,"byte_end":403129,"line_start":284,"line_end":284,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402971,"byte_end":403028,"line_start":281,"line_end":281,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403033,"byte_end":403086,"line_start":282,"line_end":282,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403091,"byte_end":403100,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403619,"byte_end":403625,"line_start":297,"line_end":297,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403364,"byte_end":403418,"line_start":292,"line_end":292,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403423,"byte_end":403492,"line_start":293,"line_end":293,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403497,"byte_end":403535,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403540,"byte_end":403593,"line_start":295,"line_end":295,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":403598,"byte_end":403607,"line_start":296,"line_end":296,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1734},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409760,"byte_end":409764,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409687,"byte_end":409755,"line_start":39,"line_end":39,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1736},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409903,"byte_end":409909,"line_start":44,"line_end":44,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409771,"byte_end":409824,"line_start":42,"line_end":42,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409829,"byte_end":409898,"line_start":43,"line_end":43,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1738},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410048,"byte_end":410054,"line_start":48,"line_end":48,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409916,"byte_end":409969,"line_start":46,"line_end":46,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409974,"byte_end":410043,"line_start":47,"line_end":47,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1740},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410193,"byte_end":410198,"line_start":52,"line_end":52,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410061,"byte_end":410114,"line_start":50,"line_end":50,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410119,"byte_end":410188,"line_start":51,"line_end":51,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1742},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410434,"byte_end":410440,"line_start":57,"line_end":57,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410205,"byte_end":410278,"line_start":54,"line_end":54,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410283,"byte_end":410357,"line_start":55,"line_end":55,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410362,"byte_end":410429,"line_start":56,"line_end":56,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1744},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410500,"byte_end":410515,"line_start":61,"line_end":61,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1733},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1733},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409667,"byte_end":409680,"line_start":38,"line_end":38,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n\n    /// Format whole seconds only, with no decimal point nor subseconds.\n    Secs,\n\n    /// Use fixed 3 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n    Millis,\n\n    /// Use fixed 6 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n    Micros,\n\n    /// Use fixed 9 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n    Nanos,\n\n    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n    /// display all available non-zero sub-second digits.  This corresponds to\n    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n    AutoSi,\n\n    #[doc(hidden)]\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":1734},{"krate":0,"index":1736},{"krate":0,"index":1738},{"krate":0,"index":1740},{"krate":0,"index":1742},{"krate":0,"index":1744}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409404,"byte_end":409476,"line_start":33,"line_end":33,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409477,"byte_end":409548,"line_start":34,"line_end":34,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409549,"byte_end":409552,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":409553,"byte_end":409612,"line_start":36,"line_end":36,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1757},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410813,"byte_end":410821,"line_start":70,"line_end":70,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1759},{"krate":0,"index":1760}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410520,"byte_end":410571,"line_start":64,"line_end":64,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410572,"byte_end":410575,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410576,"byte_end":410652,"line_start":66,"line_end":66,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410653,"byte_end":410720,"line_start":67,"line_end":67,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410721,"byte_end":410784,"line_start":68,"line_end":68,"column_start":1,"column_end":64}}]},{"kind":"Const","id":{"krate":0,"index":887},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410946,"byte_end":410958,"line_start":76,"line_end":76,"column_start":11,"column_end":23},"name":"MIN_DATETIME","qualname":"::datetime::MIN_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possilbe `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The minimum possilbe `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":410894,"byte_end":410935,"line_start":75,"line_end":75,"column_start":1,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":888},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411085,"byte_end":411097,"line_start":78,"line_end":78,"column_start":11,"column_end":23},"name":"MAX_DATETIME","qualname":"::datetime::MAX_DATETIME","value":"DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `DateTime<Utc>`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `DateTime<Utc>`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411033,"byte_end":411074,"line_start":77,"line_end":77,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411740,"byte_end":411748,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411211,"byte_end":411275,"line_start":81,"line_end":81,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411280,"byte_end":411350,"line_start":82,"line_end":82,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411355,"byte_end":411358,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411363,"byte_end":411376,"line_start":84,"line_end":84,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411381,"byte_end":411384,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411389,"byte_end":411397,"line_start":86,"line_end":86,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411402,"byte_end":411459,"line_start":87,"line_end":87,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411464,"byte_end":411467,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411472,"byte_end":411554,"line_start":89,"line_end":89,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411559,"byte_end":411600,"line_start":90,"line_end":90,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411605,"byte_end":411613,"line_start":91,"line_end":91,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411719,"byte_end":411728,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411936,"byte_end":411940,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411879,"byte_end":411910,"line_start":99,"line_end":99,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411915,"byte_end":411924,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412165,"byte_end":412169,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412044,"byte_end":412075,"line_start":105,"line_end":105,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412080,"byte_end":412139,"line_start":106,"line_end":106,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412144,"byte_end":412153,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412386,"byte_end":412395,"line_start":115,"line_end":115,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412252,"byte_end":412328,"line_start":112,"line_end":112,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412333,"byte_end":412360,"line_start":113,"line_end":113,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412365,"byte_end":412374,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413216,"byte_end":413232,"line_start":139,"line_end":139,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412457,"byte_end":412530,"line_start":119,"line_end":119,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412535,"byte_end":412538,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412543,"byte_end":412617,"line_start":121,"line_end":121,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412622,"byte_end":412695,"line_start":122,"line_end":122,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412700,"byte_end":412772,"line_start":123,"line_end":123,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412777,"byte_end":412813,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412818,"byte_end":412821,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412826,"byte_end":412839,"line_start":126,"line_end":126,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412844,"byte_end":412847,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412852,"byte_end":412860,"line_start":128,"line_end":128,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412865,"byte_end":412885,"line_start":129,"line_end":129,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412890,"byte_end":412915,"line_start":130,"line_end":130,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412920,"byte_end":412923,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412928,"byte_end":412989,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":412994,"byte_end":413039,"line_start":133,"line_end":133,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413044,"byte_end":413047,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413052,"byte_end":413115,"line_start":135,"line_end":135,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413120,"byte_end":413177,"line_start":136,"line_end":136,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413182,"byte_end":413190,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413195,"byte_end":413204,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414054,"byte_end":414069,"line_start":163,"line_end":163,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413301,"byte_end":413373,"line_start":143,"line_end":143,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413378,"byte_end":413381,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413386,"byte_end":413460,"line_start":145,"line_end":145,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413465,"byte_end":413530,"line_start":146,"line_end":146,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413535,"byte_end":413606,"line_start":147,"line_end":147,"column_start":5,"column_end":76}},{"value":"/ millennia, I'm curious.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413611,"byte_end":413639,"line_start":148,"line_end":148,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413644,"byte_end":413647,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413652,"byte_end":413665,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413670,"byte_end":413673,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413678,"byte_end":413686,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413691,"byte_end":413711,"line_start":153,"line_end":153,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413716,"byte_end":413741,"line_start":154,"line_end":154,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413746,"byte_end":413749,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413754,"byte_end":413814,"line_start":156,"line_end":156,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413819,"byte_end":413871,"line_start":157,"line_end":157,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413876,"byte_end":413879,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413884,"byte_end":413946,"line_start":159,"line_end":159,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":413951,"byte_end":414015,"line_start":160,"line_end":160,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414020,"byte_end":414028,"line_start":161,"line_end":161,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414033,"byte_end":414042,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414399,"byte_end":414422,"line_start":173,"line_end":173,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414137,"byte_end":414206,"line_start":167,"line_end":167,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414211,"byte_end":414214,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414219,"byte_end":414278,"line_start":169,"line_end":169,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414283,"byte_end":414286,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414291,"byte_end":414373,"line_start":171,"line_end":171,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414378,"byte_end":414387,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414764,"byte_end":414787,"line_start":183,"line_end":183,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414498,"byte_end":414567,"line_start":177,"line_end":177,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414572,"byte_end":414575,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414580,"byte_end":414643,"line_start":179,"line_end":179,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414648,"byte_end":414651,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414656,"byte_end":414738,"line_start":181,"line_end":181,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414743,"byte_end":414752,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":899},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415131,"byte_end":415153,"line_start":193,"line_end":193,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414863,"byte_end":414931,"line_start":187,"line_end":187,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414936,"byte_end":414939,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":414944,"byte_end":415011,"line_start":189,"line_end":189,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415016,"byte_end":415019,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415024,"byte_end":415105,"line_start":191,"line_end":191,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415110,"byte_end":415119,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415298,"byte_end":415304,"line_start":199,"line_end":199,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415228,"byte_end":415272,"line_start":197,"line_end":197,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415277,"byte_end":415286,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":901},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415425,"byte_end":415433,"line_start":205,"line_end":205,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415361,"byte_end":415399,"line_start":203,"line_end":203,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415404,"byte_end":415413,"line_start":204,"line_end":204,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415663,"byte_end":415676,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415504,"byte_end":415541,"line_start":209,"line_end":209,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415546,"byte_end":415637,"line_start":210,"line_end":210,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415642,"byte_end":415651,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415929,"byte_end":415947,"line_start":220,"line_end":220,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415784,"byte_end":415839,"line_start":216,"line_end":216,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415844,"byte_end":415847,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415852,"byte_end":415903,"line_start":218,"line_end":218,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":415908,"byte_end":415917,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":905},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416313,"byte_end":416331,"line_start":230,"line_end":230,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416161,"byte_end":416223,"line_start":226,"line_end":226,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416228,"byte_end":416231,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416236,"byte_end":416287,"line_start":228,"line_end":228,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416292,"byte_end":416301,"line_start":229,"line_end":229,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416687,"byte_end":416708,"line_start":239,"line_end":239,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416545,"byte_end":416609,"line_start":236,"line_end":236,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416614,"byte_end":416661,"line_start":237,"line_end":237,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416666,"byte_end":416675,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416907,"byte_end":416916,"line_start":245,"line_end":245,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416836,"byte_end":416881,"line_start":243,"line_end":243,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416886,"byte_end":416895,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417049,"byte_end":417060,"line_start":251,"line_end":251,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":416976,"byte_end":417023,"line_start":249,"line_end":249,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417028,"byte_end":417037,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":927},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420867,"byte_end":420885,"line_start":347,"line_end":347,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420293,"byte_end":420378,"line_start":334,"line_end":334,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420383,"byte_end":420445,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420450,"byte_end":420453,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ RFC 2822 is the internet message standard that specifices the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420458,"byte_end":420523,"line_start":337,"line_end":337,"column_start":5,"column_end":70}},{"value":"/ representation of times in HTTP and email headers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420528,"byte_end":420582,"line_start":338,"line_end":338,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420587,"byte_end":420590,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420595,"byte_end":420602,"line_start":340,"line_end":340,"column_start":5,"column_end":12}},{"value":"/ # use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420607,"byte_end":420659,"line_start":341,"line_end":341,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420664,"byte_end":420679,"line_start":342,"line_end":342,"column_start":5,"column_end":20}},{"value":"/     DateTime::parse_from_rfc2822(\"Wed, 18 Feb 2015 23:16:09 GMT\").unwrap(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420684,"byte_end":420763,"line_start":343,"line_end":343,"column_start":5,"column_end":84}},{"value":"/     FixedOffset::east(0).ymd(2015, 2, 18).and_hms(23, 16, 9)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420768,"byte_end":420832,"line_start":344,"line_end":344,"column_start":5,"column_end":69}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420837,"byte_end":420843,"line_start":345,"line_end":345,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420848,"byte_end":420855,"line_start":346,"line_end":346,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":929},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421510,"byte_end":421528,"line_start":359,"line_end":359,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421141,"byte_end":421234,"line_start":354,"line_end":354,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421239,"byte_end":421301,"line_start":355,"line_end":355,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421306,"byte_end":421309,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421314,"byte_end":421404,"line_start":357,"line_end":357,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421409,"byte_end":421498,"line_start":358,"line_end":358,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422736,"byte_end":422750,"line_start":386,"line_end":386,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421784,"byte_end":421840,"line_start":366,"line_end":366,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421845,"byte_end":421902,"line_start":367,"line_end":367,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421907,"byte_end":421976,"line_start":368,"line_end":368,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":421981,"byte_end":422019,"line_start":369,"line_end":369,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422024,"byte_end":422027,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422032,"byte_end":422126,"line_start":371,"line_end":371,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422131,"byte_end":422134,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422139,"byte_end":422205,"line_start":373,"line_end":373,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422210,"byte_end":422304,"line_start":374,"line_end":374,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422309,"byte_end":422384,"line_start":375,"line_end":375,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422389,"byte_end":422392,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422397,"byte_end":422410,"line_start":377,"line_end":377,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422415,"byte_end":422418,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422423,"byte_end":422434,"line_start":379,"line_end":379,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422439,"byte_end":422489,"line_start":380,"line_end":380,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422494,"byte_end":422497,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422502,"byte_end":422540,"line_start":382,"line_end":382,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422545,"byte_end":422615,"line_start":383,"line_end":383,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422620,"byte_end":422712,"line_start":384,"line_end":384,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422717,"byte_end":422724,"line_start":385,"line_end":385,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423176,"byte_end":423186,"line_start":399,"line_end":399,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"pub fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423020,"byte_end":423106,"line_start":397,"line_end":397,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423111,"byte_end":423164,"line_start":398,"line_end":398,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423518,"byte_end":423528,"line_start":406,"line_end":406,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"pub fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423354,"byte_end":423448,"line_start":404,"line_end":404,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423453,"byte_end":423506,"line_start":405,"line_end":405,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":938},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424991,"byte_end":425006,"line_start":436,"line_end":436,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"pub fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423696,"byte_end":423768,"line_start":411,"line_end":411,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423773,"byte_end":423843,"line_start":412,"line_end":412,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423848,"byte_end":423895,"line_start":413,"line_end":413,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423900,"byte_end":423987,"line_start":414,"line_end":414,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":423992,"byte_end":424024,"line_start":415,"line_end":415,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424029,"byte_end":424114,"line_start":416,"line_end":416,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424119,"byte_end":424122,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424127,"byte_end":424141,"line_start":418,"line_end":418,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424146,"byte_end":424149,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424154,"byte_end":424165,"line_start":420,"line_end":420,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424170,"byte_end":424242,"line_start":421,"line_end":421,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424247,"byte_end":424315,"line_start":422,"line_end":422,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424320,"byte_end":424384,"line_start":423,"line_end":423,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424389,"byte_end":424437,"line_start":424,"line_end":424,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424442,"byte_end":424505,"line_start":425,"line_end":425,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424510,"byte_end":424553,"line_start":426,"line_end":426,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424558,"byte_end":424619,"line_start":427,"line_end":427,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424624,"byte_end":424663,"line_start":428,"line_end":428,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424668,"byte_end":424671,"line_start":429,"line_end":429,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424676,"byte_end":424721,"line_start":430,"line_end":430,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424726,"byte_end":424794,"line_start":431,"line_end":431,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424799,"byte_end":424860,"line_start":432,"line_end":432,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424865,"byte_end":424909,"line_start":433,"line_end":433,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424914,"byte_end":424921,"line_start":434,"line_end":434,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":424926,"byte_end":424979,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":943},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426616,"byte_end":426633,"line_start":481,"line_end":481,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426457,"byte_end":426532,"line_start":478,"line_end":478,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426537,"byte_end":426590,"line_start":479,"line_end":479,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426595,"byte_end":426604,"line_start":480,"line_end":480,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":947},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427189,"byte_end":427195,"line_start":495,"line_end":495,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426916,"byte_end":426988,"line_start":490,"line_end":490,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":426993,"byte_end":427062,"line_start":491,"line_end":491,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427067,"byte_end":427105,"line_start":492,"line_end":492,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427110,"byte_end":427163,"line_start":493,"line_end":493,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":427168,"byte_end":427177,"line_start":494,"line_end":494,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1043},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1045},{"krate":0,"index":1046},{"krate":0,"index":1047},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1050},{"krate":0,"index":1051},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1054},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1057},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1768},{"krate":0,"index":1775},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1769},{"krate":0,"index":1770},{"krate":0,"index":1777},{"krate":0,"index":1794},{"krate":0,"index":1792},{"krate":0,"index":1789},{"krate":0,"index":1790},{"krate":0,"index":1786},{"krate":0,"index":1787},{"krate":0,"index":1784},{"krate":0,"index":1795},{"krate":0,"index":1848},{"krate":0,"index":1844},{"krate":0,"index":1845},{"krate":0,"index":1841},{"krate":0,"index":1842},{"krate":0,"index":1839},{"krate":0,"index":1065},{"krate":0,"index":1067},{"krate":0,"index":1069},{"krate":0,"index":1071},{"krate":0,"index":1072},{"krate":0,"index":1850},{"krate":0,"index":1897},{"krate":0,"index":1893},{"krate":0,"index":1894},{"krate":0,"index":1890},{"krate":0,"index":1891},{"krate":0,"index":1888},{"krate":0,"index":1899},{"krate":0,"index":1910},{"krate":0,"index":1908},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1901},{"krate":0,"index":1902},{"krate":0,"index":1912},{"krate":0,"index":1929},{"krate":0,"index":1927},{"krate":0,"index":1924},{"krate":0,"index":1925},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1931},{"krate":0,"index":1968},{"krate":0,"index":1962},{"krate":0,"index":1964},{"krate":0,"index":1957},{"krate":0,"index":1959},{"krate":0,"index":1954},{"krate":0,"index":1971},{"krate":0,"index":1984},{"krate":0,"index":1982},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1974},{"krate":0,"index":1986},{"krate":0,"index":2010},{"krate":0,"index":2008},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2001},{"krate":0,"index":1081},{"krate":0,"index":1083},{"krate":0,"index":1085},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1144},{"krate":0,"index":1148},{"krate":0,"index":1217},{"krate":0,"index":1286},{"krate":0,"index":1330},{"krate":0,"index":2062},{"krate":0,"index":2069},{"krate":0,"index":1361},{"krate":0,"index":1368},{"krate":0,"index":1373},{"krate":0,"index":1376}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"! Formatting (and parsing) utilities for date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500511,"byte_end":500568,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500569,"byte_end":500572,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! This module provides the common types and routines to implement,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500573,"byte_end":500641,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"! for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500642,"byte_end":500721,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"! [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500722,"byte_end":500810,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"! For most cases you should use these high-level interfaces.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500811,"byte_end":500873,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"!","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500874,"byte_end":500877,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"! Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500878,"byte_end":500966,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"! which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":500967,"byte_end":501060,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"! the [`Item`](./enum.Item.html) type.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501061,"byte_end":501101,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"! They are generated from more readable **format strings**;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501102,"byte_end":501163,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"! currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501164,"byte_end":501233,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"! C's `strftime` format](./strftime/index.html).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501234,"byte_end":501284,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":501286,"byte_end":501330,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1778},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502516,"byte_end":502520,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1777},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502496,"byte_end":502511,"line_start":60,"line_end":60,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1780},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502554,"byte_end":502558,"line_start":63,"line_end":63,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1777},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502526,"byte_end":502549,"line_start":62,"line_end":62,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502587,"byte_end":502592,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1777},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502564,"byte_end":502582,"line_start":64,"line_end":64,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1777},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502486,"byte_end":502489,"line_start":59,"line_end":59,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad {\n\n    /// No padding.\n    None,\n\n    /// Zero (`0`) padding.\n    Zero,\n\n    /// Space padding.\n    Space,\n}","parent":null,"children":[{"krate":0,"index":1778},{"krate":0,"index":1780},{"krate":0,"index":1782}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502390,"byte_end":502431,"line_start":57,"line_end":57,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1796},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503488,"byte_end":503492,"line_start":85,"line_end":85,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503365,"byte_end":503404,"line_start":83,"line_end":83,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503409,"byte_end":503483,"line_start":84,"line_end":84,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1798},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503594,"byte_end":503604,"line_start":87,"line_end":87,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503498,"byte_end":503589,"line_start":86,"line_end":86,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1800},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503675,"byte_end":503685,"line_start":89,"line_end":89,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503610,"byte_end":503670,"line_start":88,"line_end":88,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1802},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503820,"byte_end":503827,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503691,"byte_end":503736,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503741,"byte_end":503815,"line_start":91,"line_end":91,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1804},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503925,"byte_end":503938,"line_start":94,"line_end":94,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503833,"byte_end":503920,"line_start":93,"line_end":93,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1806},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504021,"byte_end":504034,"line_start":96,"line_end":96,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503944,"byte_end":504016,"line_start":95,"line_end":95,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1808},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504065,"byte_end":504070,"line_start":98,"line_end":98,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504040,"byte_end":504060,"line_start":97,"line_end":97,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1810},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504112,"byte_end":504115,"line_start":100,"line_end":100,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504076,"byte_end":504107,"line_start":99,"line_end":99,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1812},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504208,"byte_end":504219,"line_start":102,"line_end":102,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504121,"byte_end":504203,"line_start":101,"line_end":101,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1814},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504312,"byte_end":504323,"line_start":104,"line_end":104,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504225,"byte_end":504307,"line_start":103,"line_end":103,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1816},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504381,"byte_end":504388,"line_start":106,"line_end":106,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504329,"byte_end":504376,"line_start":105,"line_end":105,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1818},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504464,"byte_end":504478,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504394,"byte_end":504459,"line_start":107,"line_end":107,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1820},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504552,"byte_end":504566,"line_start":110,"line_end":110,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504484,"byte_end":504547,"line_start":109,"line_end":109,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1822},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504607,"byte_end":504614,"line_start":112,"line_end":112,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504572,"byte_end":504602,"line_start":111,"line_end":111,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1824},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504673,"byte_end":504677,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504620,"byte_end":504668,"line_start":113,"line_end":113,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1826},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504736,"byte_end":504742,"line_start":116,"line_end":116,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504683,"byte_end":504731,"line_start":115,"line_end":115,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1828},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504815,"byte_end":504821,"line_start":118,"line_end":118,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504748,"byte_end":504810,"line_start":117,"line_end":117,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1830},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504896,"byte_end":504902,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504827,"byte_end":504891,"line_start":119,"line_end":119,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1832},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505105,"byte_end":505115,"line_start":124,"line_end":124,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504908,"byte_end":504976,"line_start":121,"line_end":121,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":504981,"byte_end":505022,"line_start":122,"line_end":122,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505027,"byte_end":505100,"line_start":123,"line_end":123,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1834},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505295,"byte_end":505304,"line_start":127,"line_end":127,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505121,"byte_end":505213,"line_start":125,"line_end":125,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505218,"byte_end":505290,"line_start":126,"line_end":126,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1836},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505523,"byte_end":505531,"line_start":133,"line_end":133,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1795},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505311,"byte_end":505334,"line_start":129,"line_end":129,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505339,"byte_end":505342,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505347,"byte_end":505423,"line_start":131,"line_end":131,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505428,"byte_end":505518,"line_start":132,"line_end":132,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1795},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503351,"byte_end":503358,"line_start":82,"line_end":82,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n\n    /// Full Gregorian year (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    Year,\n\n    /// Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n    YearDiv100,\n\n    /// Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n    YearMod100,\n\n    /// Year in the ISO week date (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    IsoYear,\n\n    /// Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n    IsoYearDiv100,\n\n    /// Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n    IsoYearMod100,\n\n    /// Month (FW=PW=2).\n    Month,\n\n    /// Day of the month (FW=PW=2).\n    Day,\n\n    /// Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n    WeekFromSun,\n\n    /// Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n    WeekFromMon,\n\n    /// Week number in the ISO week date (FW=PW=2).\n    IsoWeek,\n\n    /// Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n    NumDaysFromSun,\n\n    /// Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n    WeekdayFromMon,\n\n    /// Day of the year (FW=PW=3).\n    Ordinal,\n\n    /// Hour number in the 24-hour clocks (FW=PW=2).\n    Hour,\n\n    /// Hour number in the 12-hour clocks (FW=PW=2).\n    Hour12,\n\n    /// The number of minutes since the last whole hour (FW=PW=2).\n    Minute,\n\n    /// The number of seconds since the last whole minute (FW=PW=2).\n    Second,\n\n    /// The number of nanoseconds since the last whole second (FW=PW=9).\n    /// Note that this is *not* left-aligned;\n    /// see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n    /// For formatting, it assumes UTC upon the absence of time zone offset.\n    Timestamp,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1800},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1806},{"krate":0,"index":1808},{"krate":0,"index":1810},{"krate":0,"index":1812},{"krate":0,"index":1814},{"krate":0,"index":1816},{"krate":0,"index":1818},{"krate":0,"index":1820},{"krate":0,"index":1822},{"krate":0,"index":1824},{"krate":0,"index":1826},{"krate":0,"index":1828},{"krate":0,"index":1830},{"krate":0,"index":1832},{"krate":0,"index":1834},{"krate":0,"index":1836}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502597,"byte_end":502620,"line_start":68,"line_end":68,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502621,"byte_end":502691,"line_start":69,"line_end":69,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502692,"byte_end":502695,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502696,"byte_end":502762,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502763,"byte_end":502862,"line_start":72,"line_end":72,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502863,"byte_end":502890,"line_start":73,"line_end":73,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502891,"byte_end":502970,"line_start":74,"line_end":74,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502971,"byte_end":502974,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":502975,"byte_end":503036,"line_start":76,"line_end":76,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503037,"byte_end":503120,"line_start":77,"line_end":77,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503121,"byte_end":503171,"line_start":78,"line_end":78,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503172,"byte_end":503259,"line_start":79,"line_end":79,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":503260,"byte_end":503302,"line_start":80,"line_end":80,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1065},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505639,"byte_end":505654,"line_start":137,"line_end":137,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1066}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505553,"byte_end":505627,"line_start":136,"line_end":136,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1851},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506452,"byte_end":506466,"line_start":170,"line_end":170,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506319,"byte_end":506347,"line_start":167,"line_end":167,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506352,"byte_end":506355,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506360,"byte_end":506447,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1853},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506599,"byte_end":506612,"line_start":174,"line_end":174,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506472,"byte_end":506493,"line_start":171,"line_end":171,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506498,"byte_end":506501,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506506,"byte_end":506594,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1855},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506761,"byte_end":506777,"line_start":178,"line_end":178,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506618,"byte_end":506656,"line_start":175,"line_end":175,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506661,"byte_end":506664,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506669,"byte_end":506756,"line_start":177,"line_end":177,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1857},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506920,"byte_end":506935,"line_start":182,"line_end":182,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506783,"byte_end":506814,"line_start":179,"line_end":179,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506819,"byte_end":506822,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506827,"byte_end":506915,"line_start":181,"line_end":181,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1859},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507013,"byte_end":507022,"line_start":186,"line_end":186,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506941,"byte_end":506951,"line_start":183,"line_end":183,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506956,"byte_end":506959,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506964,"byte_end":507008,"line_start":185,"line_end":185,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1861},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507100,"byte_end":507109,"line_start":190,"line_end":190,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507028,"byte_end":507038,"line_start":187,"line_end":187,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507043,"byte_end":507046,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507051,"byte_end":507095,"line_start":189,"line_end":189,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1863},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507356,"byte_end":507366,"line_start":194,"line_end":194,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507115,"byte_end":507188,"line_start":191,"line_end":191,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507193,"byte_end":507269,"line_start":192,"line_end":192,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507274,"byte_end":507351,"line_start":193,"line_end":193,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1865},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507456,"byte_end":507467,"line_start":196,"line_end":196,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507372,"byte_end":507451,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1867},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507557,"byte_end":507568,"line_start":198,"line_end":198,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507473,"byte_end":507552,"line_start":197,"line_end":197,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1869},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507658,"byte_end":507669,"line_start":200,"line_end":200,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507574,"byte_end":507653,"line_start":199,"line_end":199,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1871},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507790,"byte_end":507802,"line_start":204,"line_end":204,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507675,"byte_end":507693,"line_start":201,"line_end":201,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507698,"byte_end":507701,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507706,"byte_end":507785,"line_start":203,"line_end":203,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1873},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508137,"byte_end":508156,"line_start":210,"line_end":210,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507808,"byte_end":507881,"line_start":205,"line_end":205,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507886,"byte_end":507889,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507894,"byte_end":507986,"line_start":207,"line_end":207,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":507991,"byte_end":508043,"line_start":208,"line_end":208,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508048,"byte_end":508132,"line_start":209,"line_end":209,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1875},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508548,"byte_end":508568,"line_start":217,"line_end":217,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508162,"byte_end":508230,"line_start":211,"line_end":211,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508235,"byte_end":508238,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508243,"byte_end":508335,"line_start":213,"line_end":213,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508340,"byte_end":508397,"line_start":214,"line_end":214,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508402,"byte_end":508454,"line_start":215,"line_end":215,"column_start":5,"column_end":57}},{"value":"/ which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508459,"byte_end":508543,"line_start":216,"line_end":216,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1877},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508707,"byte_end":508721,"line_start":220,"line_end":220,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508574,"byte_end":508660,"line_start":218,"line_end":218,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508665,"byte_end":508702,"line_start":219,"line_end":219,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1879},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508862,"byte_end":508877,"line_start":223,"line_end":223,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508727,"byte_end":508815,"line_start":221,"line_end":221,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508820,"byte_end":508857,"line_start":222,"line_end":222,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1881},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508970,"byte_end":508977,"line_start":225,"line_end":225,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508883,"byte_end":508965,"line_start":224,"line_end":224,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1883},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509033,"byte_end":509040,"line_start":227,"line_end":227,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":508983,"byte_end":509028,"line_start":226,"line_end":226,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1885},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509259,"byte_end":509267,"line_start":233,"line_end":233,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1850},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509047,"byte_end":509070,"line_start":229,"line_end":229,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509075,"byte_end":509078,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509083,"byte_end":509159,"line_start":231,"line_end":231,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509164,"byte_end":509254,"line_start":232,"line_end":232,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1850},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506307,"byte_end":506312,"line_start":166,"line_end":166,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n\n    /// Abbreviated month names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortMonthName,\n\n    /// Full month names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongMonthName,\n\n    /// Abbreviated day of the week names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortWeekdayName,\n\n    /// Full day of the week names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongWeekdayName,\n\n    /// AM/PM.\n    ///\n    /// Prints in lower case, reads in any case.\n    LowerAmPm,\n\n    /// AM/PM.\n    ///\n    /// Prints in upper case, reads in any case.\n    UpperAmPm,\n\n    /// An optional dot plus one or more digits for left-aligned nanoseconds.\n    /// May print nothing, 3, 6 or 9 digits according to the available accuracy.\n    /// See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n    Nanosecond3,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n    Nanosecond6,\n\n    /// Same as [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n    Nanosecond9,\n\n    /// Timezone name.\n    ///\n    /// It does not support parsing, its use in the parser is an immediate failure.\n    TimezoneName,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColon,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,\n    /// and `Z` can be either in upper case or in lower case.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is the same as [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColonZ,\n\n    /// Same as [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffset,\n\n    /// Same as [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffsetZ,\n\n    /// RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n    RFC2822,\n\n    /// RFC 3339 & ISO 8601 date and time syntax.\n    RFC3339,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":1851},{"krate":0,"index":1853},{"krate":0,"index":1855},{"krate":0,"index":1857},{"krate":0,"index":1859},{"krate":0,"index":1861},{"krate":0,"index":1863},{"krate":0,"index":1865},{"krate":0,"index":1867},{"krate":0,"index":1869},{"krate":0,"index":1871},{"krate":0,"index":1873},{"krate":0,"index":1875},{"krate":0,"index":1877},{"krate":0,"index":1879},{"krate":0,"index":1881},{"krate":0,"index":1883},{"krate":0,"index":1885}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506084,"byte_end":506112,"line_start":161,"line_end":161,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506113,"byte_end":506116,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506117,"byte_end":506173,"line_start":163,"line_end":163,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":506174,"byte_end":506258,"line_start":164,"line_end":164,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1899},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509417,"byte_end":509430,"line_start":238,"line_end":238,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1900}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":509287,"byte_end":509366,"line_start":236,"line_end":236,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1933},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510446,"byte_end":510453,"line_start":265,"line_end":265,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510401,"byte_end":510441,"line_start":264,"line_end":264,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1936},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510591,"byte_end":510603,"line_start":268,"line_end":268,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Same as `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Literal` but with the string owned by the item.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510468,"byte_end":510528,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510533,"byte_end":510586,"line_start":267,"line_end":267,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1939},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510691,"byte_end":510696,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510619,"byte_end":510686,"line_start":269,"line_end":269,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1942},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510832,"byte_end":510842,"line_start":273,"line_end":273,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Same as `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same as `Space` but with the string owned by the item.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510711,"byte_end":510769,"line_start":271,"line_end":271,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510774,"byte_end":510827,"line_start":272,"line_end":272,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1945},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511021,"byte_end":511028,"line_start":276,"line_end":276,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510858,"byte_end":510948,"line_start":274,"line_end":274,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510953,"byte_end":511016,"line_start":275,"line_end":275,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1949},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511075,"byte_end":511080,"line_start":278,"line_end":278,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511048,"byte_end":511070,"line_start":277,"line_end":277,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1952},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511169,"byte_end":511174,"line_start":280,"line_end":280,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1931},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511093,"byte_end":511164,"line_start":279,"line_end":279,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1931},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510386,"byte_end":510390,"line_start":263,"line_end":263,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n\n    /// A literally printed and parsed text.\n    Literal(&'a str),\n\n    /// Same as `Literal` but with the string owned by the item.\n    #[cfg(any(feature = \"alloc\", feature = \"std\", test))]\n    OwnedLiteral(Box<str>),\n\n    /// Whitespace. Prints literally but reads zero or more whitespace.\n    Space(&'a str),\n\n    /// Same as `Space` but with the string owned by the item.\n    #[cfg(any(feature = \"alloc\", feature = \"std\", test))]\n    OwnedSpace(Box<str>),\n\n    /// Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n    /// the parser simply ignores any padded whitespace and zeroes.\n    Numeric(Numeric, Pad),\n\n    /// Fixed-format item.\n    Fixed(Fixed),\n\n    /// Issues a formatting error. Used to signal an invalid format string.\n    Error,\n}","parent":null,"children":[{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1949},{"krate":0,"index":1952}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":510262,"byte_end":510337,"line_start":261,"line_end":261,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1971},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511922,"byte_end":511932,"line_start":321,"line_end":321,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":511826,"byte_end":511865,"line_start":319,"line_end":319,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1081},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513200,"byte_end":513211,"line_start":356,"line_end":356,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same as `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same as `Result<T, ParseError>`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513154,"byte_end":513190,"line_start":355,"line_end":355,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1094},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514781,"byte_end":514792,"line_start":391,"line_end":391,"column_start":8,"column_end":19},"name":"format_item","qualname":"::format::format_item","value":"pub fn format_item<'a>(&mut fmt::Formatter, Option<&NaiveDate>,\n                       Option<&NaiveTime>, Option<&(String, FixedOffset)>,\n                       &Item) -> fmt::Result","parent":null,"children":[],"decl_id":null,"docs":" Formats single formatting item\n","sig":null,"attributes":[{"value":"/ Formats single formatting item","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514685,"byte_end":514719,"line_start":389,"line_end":389,"column_start":1,"column_end":35}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514720,"byte_end":514773,"line_start":390,"line_end":390,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":1144},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528113,"byte_end":528119,"line_start":689,"line_end":689,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"pub fn format<'a, I,\n              B>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\n                 Option<&(String, FixedOffset)>, I) -> fmt::Result where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":527947,"byte_end":528011,"line_start":686,"line_end":686,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528012,"byte_end":528051,"line_start":687,"line_end":687,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528052,"byte_end":528105,"line_start":688,"line_end":688,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":2012},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536491,"byte_end":536497,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2026},{"krate":0,"index":2027},{"krate":0,"index":2028},{"krate":0,"index":2029},{"krate":0,"index":2030},{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":535973,"byte_end":536041,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536042,"byte_end":536045,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536046,"byte_end":536129,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536130,"byte_end":536222,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536223,"byte_end":536226,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536227,"byte_end":536309,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536310,"byte_end":536405,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536406,"byte_end":536444,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2013},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536674,"byte_end":536678,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536504,"byte_end":536513,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536518,"byte_end":536521,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536526,"byte_end":536601,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536606,"byte_end":536665,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":2014},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536982,"byte_end":536994,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536698,"byte_end":536766,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536771,"byte_end":536774,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536779,"byte_end":536836,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536841,"byte_end":536900,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":536905,"byte_end":536973,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2015},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537087,"byte_end":537099,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537014,"byte_end":537078,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":2016},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537366,"byte_end":537373,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537119,"byte_end":537193,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537198,"byte_end":537201,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537206,"byte_end":537291,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537296,"byte_end":537357,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2017},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537760,"byte_end":537775,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537393,"byte_end":537483,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537488,"byte_end":537535,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537540,"byte_end":537543,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537548,"byte_end":537605,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537610,"byte_end":537675,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537680,"byte_end":537751,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":2018},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537942,"byte_end":537957,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537795,"byte_end":537881,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537886,"byte_end":537933,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2019},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538004,"byte_end":538009,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":537977,"byte_end":537995,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":2020},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538164,"byte_end":538177,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538029,"byte_end":538100,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538105,"byte_end":538155,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2021},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538332,"byte_end":538345,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538197,"byte_end":538268,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538273,"byte_end":538323,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":2022},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538485,"byte_end":538492,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538365,"byte_end":538428,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538433,"byte_end":538476,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":2023},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538541,"byte_end":538548,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538512,"byte_end":538532,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":2024},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538642,"byte_end":538649,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538572,"byte_end":538633,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2025},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538753,"byte_end":538756,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538669,"byte_end":538744,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":2026},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538857,"byte_end":538868,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538776,"byte_end":538848,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":2027},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538931,"byte_end":538942,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538888,"byte_end":538922,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":2028},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538997,"byte_end":539003,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":538962,"byte_end":538988,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2029},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539087,"byte_end":539093,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539023,"byte_end":539078,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":2030},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539192,"byte_end":539202,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539113,"byte_end":539183,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":2031},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539405,"byte_end":539414,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539222,"byte_end":539299,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539304,"byte_end":539307,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539312,"byte_end":539396,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":2032},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539493,"byte_end":539499,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":2012},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":539434,"byte_end":539484,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1176},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540828,"byte_end":540831,"line_start":159,"line_end":159,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540770,"byte_end":540816,"line_start":158,"line_end":158,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1177},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540981,"byte_end":540989,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540883,"byte_end":540955,"line_start":163,"line_end":163,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540960,"byte_end":540969,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1178},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541238,"byte_end":541254,"line_start":171,"line_end":171,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541124,"byte_end":541212,"line_start":169,"line_end":169,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541217,"byte_end":541226,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541582,"byte_end":541598,"line_start":180,"line_end":180,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541468,"byte_end":541556,"line_start":178,"line_end":178,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541561,"byte_end":541570,"line_start":179,"line_end":179,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541916,"byte_end":541927,"line_start":189,"line_end":189,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541812,"byte_end":541890,"line_start":187,"line_end":187,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":541895,"byte_end":541904,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1181},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542185,"byte_end":542204,"line_start":195,"line_end":195,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542065,"byte_end":542159,"line_start":193,"line_end":193,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542164,"byte_end":542173,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1182},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542541,"byte_end":542560,"line_start":204,"line_end":204,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542421,"byte_end":542515,"line_start":202,"line_end":202,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542520,"byte_end":542529,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1183},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542877,"byte_end":542886,"line_start":213,"line_end":213,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542777,"byte_end":542851,"line_start":211,"line_end":211,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":542856,"byte_end":542865,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1184},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543138,"byte_end":543155,"line_start":219,"line_end":219,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543022,"byte_end":543112,"line_start":217,"line_end":217,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543117,"byte_end":543126,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543415,"byte_end":543432,"line_start":225,"line_end":225,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543299,"byte_end":543389,"line_start":223,"line_end":223,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543394,"byte_end":543403,"line_start":224,"line_end":224,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543680,"byte_end":543691,"line_start":231,"line_end":231,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543576,"byte_end":543654,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543659,"byte_end":543668,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543933,"byte_end":543944,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543829,"byte_end":543907,"line_start":235,"line_end":235,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":543912,"byte_end":543921,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1188},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544160,"byte_end":544171,"line_start":243,"line_end":243,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544056,"byte_end":544134,"line_start":241,"line_end":241,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544139,"byte_end":544148,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1189},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544405,"byte_end":544412,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544309,"byte_end":544379,"line_start":247,"line_end":247,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544384,"byte_end":544393,"line_start":248,"line_end":248,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1190},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544698,"byte_end":544706,"line_start":256,"line_end":256,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544546,"byte_end":544632,"line_start":253,"line_end":253,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544637,"byte_end":544672,"line_start":254,"line_end":254,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544677,"byte_end":544686,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544983,"byte_end":544993,"line_start":263,"line_end":263,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544839,"byte_end":544912,"line_start":260,"line_end":260,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544917,"byte_end":544957,"line_start":261,"line_end":261,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":544962,"byte_end":544971,"line_start":262,"line_end":262,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1192},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545370,"byte_end":545378,"line_start":273,"line_end":273,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545202,"byte_end":545269,"line_start":270,"line_end":270,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545274,"byte_end":545344,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545349,"byte_end":545358,"line_start":272,"line_end":272,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1193},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545722,"byte_end":545732,"line_start":282,"line_end":282,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545620,"byte_end":545696,"line_start":280,"line_end":280,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545701,"byte_end":545710,"line_start":281,"line_end":281,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545971,"byte_end":545981,"line_start":288,"line_end":288,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545869,"byte_end":545945,"line_start":286,"line_end":286,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":545950,"byte_end":545959,"line_start":287,"line_end":287,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1195},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546228,"byte_end":546242,"line_start":294,"line_end":294,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546118,"byte_end":546202,"line_start":292,"line_end":292,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546207,"byte_end":546216,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546491,"byte_end":546504,"line_start":300,"line_end":300,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546383,"byte_end":546465,"line_start":298,"line_end":298,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546470,"byte_end":546479,"line_start":299,"line_end":299,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1197},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546716,"byte_end":546726,"line_start":306,"line_end":306,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546614,"byte_end":546690,"line_start":304,"line_end":304,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546695,"byte_end":546704,"line_start":305,"line_end":305,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547370,"byte_end":547383,"line_start":321,"line_end":321,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546863,"byte_end":546915,"line_start":310,"line_end":310,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546920,"byte_end":546923,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":546928,"byte_end":547002,"line_start":312,"line_end":312,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547007,"byte_end":547010,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547015,"byte_end":547038,"line_start":314,"line_end":314,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547043,"byte_end":547081,"line_start":315,"line_end":315,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547086,"byte_end":547157,"line_start":316,"line_end":316,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547162,"byte_end":547182,"line_start":317,"line_end":317,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547187,"byte_end":547190,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547195,"byte_end":547289,"line_start":319,"line_end":319,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":547294,"byte_end":547358,"line_start":320,"line_end":320,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1206},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556702,"byte_end":556715,"line_start":529,"line_end":529,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556299,"byte_end":556351,"line_start":520,"line_end":520,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556356,"byte_end":556359,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556364,"byte_end":556438,"line_start":522,"line_end":522,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556443,"byte_end":556446,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556451,"byte_end":556510,"line_start":524,"line_end":524,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556515,"byte_end":556571,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556576,"byte_end":556615,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556620,"byte_end":556623,"line_start":527,"line_end":527,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":556628,"byte_end":556690,"line_start":528,"line_end":528,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1207},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558498,"byte_end":558527,"line_start":571,"line_end":571,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558013,"byte_end":558074,"line_start":564,"line_end":564,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558079,"byte_end":558168,"line_start":565,"line_end":565,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558173,"byte_end":558250,"line_start":566,"line_end":566,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558255,"byte_end":558258,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558263,"byte_end":558326,"line_start":568,"line_end":568,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558331,"byte_end":558417,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":558422,"byte_end":558486,"line_start":570,"line_end":570,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1212},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":561945,"byte_end":561960,"line_start":644,"line_end":644,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":561869,"byte_end":561933,"line_start":643,"line_end":643,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1213},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562432,"byte_end":562443,"line_start":654,"line_end":654,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562081,"byte_end":562151,"line_start":648,"line_end":648,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562156,"byte_end":562159,"line_start":649,"line_end":649,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562164,"byte_end":562227,"line_start":650,"line_end":650,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562232,"byte_end":562318,"line_start":651,"line_end":651,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562323,"byte_end":562351,"line_start":652,"line_end":652,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562356,"byte_end":562420,"line_start":653,"line_end":653,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1214},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563471,"byte_end":563496,"line_start":674,"line_end":674,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562914,"byte_end":562984,"line_start":665,"line_end":665,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":562989,"byte_end":563069,"line_start":666,"line_end":666,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563074,"byte_end":563077,"line_start":667,"line_end":667,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563082,"byte_end":563145,"line_start":668,"line_end":668,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563150,"byte_end":563236,"line_start":669,"line_end":669,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563241,"byte_end":563269,"line_start":670,"line_end":670,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563274,"byte_end":563338,"line_start":671,"line_end":671,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563343,"byte_end":563418,"line_start":672,"line_end":672,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":563423,"byte_end":563459,"line_start":673,"line_end":673,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1253},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600638,"byte_end":600643,"line_start":234,"line_end":234,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":599735,"byte_end":599809,"line_start":218,"line_end":218,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":599810,"byte_end":599906,"line_start":219,"line_end":219,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":599907,"byte_end":599960,"line_start":220,"line_end":220,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":599961,"byte_end":600045,"line_start":221,"line_end":221,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600046,"byte_end":600049,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600050,"byte_end":600094,"line_start":223,"line_end":223,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600095,"byte_end":600098,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600099,"byte_end":600157,"line_start":225,"line_end":225,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600158,"byte_end":600251,"line_start":226,"line_end":226,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600252,"byte_end":600327,"line_start":227,"line_end":227,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600328,"byte_end":600331,"line_start":228,"line_end":228,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600332,"byte_end":600375,"line_start":229,"line_end":229,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600376,"byte_end":600439,"line_start":230,"line_end":230,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600440,"byte_end":600531,"line_start":231,"line_end":231,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600532,"byte_end":600535,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":600536,"byte_end":600630,"line_start":233,"line_end":233,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1330},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":2043},{"krate":0,"index":2053},{"krate":0,"index":2050},{"krate":0,"index":1343},{"krate":0,"index":1349},{"krate":0,"index":1350}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"!\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same as `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same as `%d` but space-padded. Same as `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same as `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same as `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same as `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same as `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same as `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Locale's date representation (e.g., 12/31/99).                        |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same as `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same as `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same as `%H` but space-padded. Same as `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same as `%I` but space-padded. Same as `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same as `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same as `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Locale's time representation (e.g., 23:13:48).                        |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same as `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same as `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same as `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|Locale's date and time (e.g., Thu Mar  3 23:05:25 2005).       |\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":644731,"byte_end":655411,"line_start":4,"line_end":160,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":2043},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656303,"byte_end":656316,"line_start":193,"line_end":193,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656211,"byte_end":656267,"line_start":191,"line_end":191,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656906,"byte_end":656909,"line_start":210,"line_end":210,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656820,"byte_end":656894,"line_start":209,"line_end":209,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":2062},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528891,"byte_end":528904,"line_start":719,"line_end":719,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":2064},{"krate":0,"index":2065},{"krate":0,"index":2066},{"krate":0,"index":2067},{"krate":0,"index":2068}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528645,"byte_end":528726,"line_start":715,"line_end":715,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528727,"byte_end":528808,"line_start":716,"line_end":716,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528809,"byte_end":528862,"line_start":717,"line_end":717,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1365},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529488,"byte_end":529491,"line_start":735,"line_end":735,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"pub fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529411,"byte_end":529476,"line_start":734,"line_end":734,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1366},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529765,"byte_end":529780,"line_start":740,"line_end":740,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"pub fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529673,"byte_end":529753,"line_start":739,"line_end":739,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1391},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675803,"byte_end":675814,"line_start":21,"line_end":21,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1392},{"krate":0,"index":1393}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675405,"byte_end":675481,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675482,"byte_end":675553,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675554,"byte_end":675626,"line_start":17,"line_end":17,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675627,"byte_end":675702,"line_start":18,"line_end":18,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675703,"byte_end":675780,"line_start":19,"line_end":19,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675781,"byte_end":675792,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1392},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676344,"byte_end":676357,"line_start":33,"line_end":33,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1391},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675821,"byte_end":675896,"line_start":22,"line_end":22,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675901,"byte_end":675970,"line_start":23,"line_end":23,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":675975,"byte_end":676007,"line_start":24,"line_end":24,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676012,"byte_end":676015,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676020,"byte_end":676033,"line_start":26,"line_end":26,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676038,"byte_end":676050,"line_start":27,"line_end":27,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676055,"byte_end":676122,"line_start":28,"line_end":28,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676127,"byte_end":676190,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676195,"byte_end":676257,"line_start":30,"line_end":30,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676262,"byte_end":676324,"line_start":31,"line_end":31,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676329,"byte_end":676336,"line_start":32,"line_end":32,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1393},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676860,"byte_end":676873,"line_start":45,"line_end":45,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1391},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676391,"byte_end":676455,"line_start":35,"line_end":35,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676460,"byte_end":676523,"line_start":36,"line_end":36,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676528,"byte_end":676531,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676536,"byte_end":676549,"line_start":38,"line_end":38,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676554,"byte_end":676566,"line_start":39,"line_end":39,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676571,"byte_end":676638,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676643,"byte_end":676706,"line_start":41,"line_end":41,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676711,"byte_end":676773,"line_start":42,"line_end":42,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676778,"byte_end":676840,"line_start":43,"line_end":43,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676845,"byte_end":676852,"line_start":44,"line_end":44,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1399},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678612,"byte_end":678625,"line_start":102,"line_end":102,"column_start":11,"column_end":24},"name":"DurationRound","qualname":"::round::DurationRound","value":"DurationRound: Sized","parent":null,"children":[{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402}],"decl_id":null,"docs":" Extension trait for rounding or truncating a DateTime by a Duration.","sig":null,"attributes":[{"value":"/ Extension trait for rounding or truncating a DateTime by a Duration.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678199,"byte_end":678271,"line_start":95,"line_end":95,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678272,"byte_end":678275,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ # Limitations","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678276,"byte_end":678293,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/ Both rounding and truncating are done via [`Duration::num_nanoseconds`] and","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678294,"byte_end":678373,"line_start":98,"line_end":98,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::timestamp_nanos`]. This means that they will fail if either the","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678374,"byte_end":678453,"line_start":99,"line_end":99,"column_start":1,"column_end":80}},{"value":"/ `Duration` or the `DateTime` are too big to represented as nanoseconds. They","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678454,"byte_end":678534,"line_start":100,"line_end":100,"column_start":1,"column_end":81}},{"value":"/ will also fail if the `Duration` is bigger than the timestamp.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678535,"byte_end":678601,"line_start":101,"line_end":101,"column_start":1,"column_end":67}}]},{"kind":"Type","id":{"krate":0,"index":1400},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678738,"byte_end":678741,"line_start":105,"line_end":105,"column_start":10,"column_end":13},"name":"Err","qualname":"::round::DurationRound::Err","value":"type Err: std::error::Error;","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Error that can occur in rounding or truncating\n","sig":null,"attributes":[{"value":"/ Error that can occur in rounding or truncating","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678639,"byte_end":678689,"line_start":103,"line_end":103,"column_start":5,"column_end":55}},{"value":"cfg(any(feature = \"std\", test))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678694,"byte_end":678728,"line_start":104,"line_end":104,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679444,"byte_end":679458,"line_start":126,"line_end":126,"column_start":8,"column_end":22},"name":"duration_round","qualname":"::round::DurationRound::duration_round","value":"pub fn duration_round(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Return a copy rounded by Duration.","sig":null,"attributes":[{"value":"/ Return a copy rounded by Duration.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678908,"byte_end":678946,"line_start":111,"line_end":111,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678951,"byte_end":678954,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678959,"byte_end":678972,"line_start":113,"line_end":113,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678977,"byte_end":678989,"line_start":114,"line_end":114,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678994,"byte_end":679063,"line_start":115,"line_end":115,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679068,"byte_end":679131,"line_start":116,"line_end":116,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679136,"byte_end":679151,"line_start":117,"line_end":117,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679156,"byte_end":679231,"line_start":118,"line_end":118,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679236,"byte_end":679273,"line_start":119,"line_end":119,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679278,"byte_end":679284,"line_start":120,"line_end":120,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679289,"byte_end":679304,"line_start":121,"line_end":121,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679309,"byte_end":679375,"line_start":122,"line_end":122,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-12 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679380,"byte_end":679413,"line_start":123,"line_end":123,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679418,"byte_end":679424,"line_start":124,"line_end":124,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679429,"byte_end":679436,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680056,"byte_end":680070,"line_start":143,"line_end":143,"column_start":8,"column_end":22},"name":"duration_trunc","qualname":"::round::DurationRound::duration_trunc","value":"pub fn duration_trunc(Self, Duration) -> Result<Self, Self::Err>","parent":{"krate":0,"index":1399},"children":[],"decl_id":null,"docs":" Return a copy truncated by Duration.","sig":null,"attributes":[{"value":"/ Return a copy truncated by Duration.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679518,"byte_end":679558,"line_start":128,"line_end":128,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679563,"byte_end":679566,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679571,"byte_end":679584,"line_start":130,"line_end":130,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679589,"byte_end":679601,"line_start":131,"line_end":131,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679606,"byte_end":679675,"line_start":132,"line_end":132,"column_start":5,"column_end":74}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679680,"byte_end":679743,"line_start":133,"line_end":133,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679748,"byte_end":679763,"line_start":134,"line_end":134,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::milliseconds(10)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679768,"byte_end":679843,"line_start":135,"line_end":135,"column_start":5,"column_end":80}},{"value":"/     \"2018-01-11 12:00:00.150 UTC\"","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679848,"byte_end":679885,"line_start":136,"line_end":136,"column_start":5,"column_end":42}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679890,"byte_end":679896,"line_start":137,"line_end":137,"column_start":5,"column_end":11}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679901,"byte_end":679916,"line_start":138,"line_end":138,"column_start":5,"column_end":20}},{"value":"/     dt.duration_trunc(Duration::days(1)).unwrap().to_string(),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679921,"byte_end":679987,"line_start":139,"line_end":139,"column_start":5,"column_end":71}},{"value":"/     \"2018-01-11 00:00:00 UTC\"","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":679992,"byte_end":680025,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680030,"byte_end":680036,"line_start":141,"line_end":141,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680041,"byte_end":680048,"line_start":142,"line_end":142,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2073},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682897,"byte_end":682921,"line_start":218,"line_end":218,"column_start":5,"column_end":29},"name":"DurationExceedsTimestamp","qualname":"::round::RoundingError::DurationExceedsTimestamp","value":"RoundingError::DurationExceedsTimestamp","parent":{"krate":0,"index":2072},"children":[],"decl_id":null,"docs":" Error when the Duration exceeds the Duration from or until the Unix epoch.","sig":null,"attributes":[{"value":"/ Error when the Duration exceeds the Duration from or until the Unix epoch.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682482,"byte_end":682560,"line_start":207,"line_end":207,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682565,"byte_end":682568,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682573,"byte_end":682585,"line_start":209,"line_end":209,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682590,"byte_end":682674,"line_start":210,"line_end":210,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682679,"byte_end":682731,"line_start":211,"line_end":211,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682736,"byte_end":682739,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682744,"byte_end":682759,"line_start":213,"line_end":213,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(365)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682764,"byte_end":682811,"line_start":214,"line_end":214,"column_start":5,"column_end":52}},{"value":"/     Err(RoundingError::DurationExceedsTimestamp),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682816,"byte_end":682869,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682874,"byte_end":682880,"line_start":216,"line_end":216,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682885,"byte_end":682892,"line_start":217,"line_end":217,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2075},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683348,"byte_end":683368,"line_start":231,"line_end":231,"column_start":5,"column_end":25},"name":"DurationExceedsLimit","qualname":"::round::RoundingError::DurationExceedsLimit","value":"RoundingError::DurationExceedsLimit","parent":{"krate":0,"index":2072},"children":[],"decl_id":null,"docs":" Error when `Duration.num_nanoseconds` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `Duration.num_nanoseconds` exceeds the limit.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682928,"byte_end":682988,"line_start":220,"line_end":220,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682993,"byte_end":682996,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683001,"byte_end":683013,"line_start":222,"line_end":222,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683018,"byte_end":683102,"line_start":223,"line_end":223,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683107,"byte_end":683181,"line_start":224,"line_end":224,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683186,"byte_end":683189,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683194,"byte_end":683209,"line_start":226,"line_end":226,"column_start":5,"column_end":20}},{"value":"/     dt.duration_round(Duration::days(300 * 365)),","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683214,"byte_end":683267,"line_start":227,"line_end":227,"column_start":5,"column_end":58}},{"value":"/     Err(RoundingError::DurationExceedsLimit)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683272,"byte_end":683320,"line_start":228,"line_end":228,"column_start":5,"column_end":53}},{"value":"/ );","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683325,"byte_end":683331,"line_start":229,"line_end":229,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683336,"byte_end":683343,"line_start":230,"line_end":230,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2077},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683733,"byte_end":683754,"line_start":241,"line_end":241,"column_start":5,"column_end":26},"name":"TimestampExceedsLimit","qualname":"::round::RoundingError::TimestampExceedsLimit","value":"RoundingError::TimestampExceedsLimit","parent":{"krate":0,"index":2072},"children":[],"decl_id":null,"docs":" Error when `DateTime.timestamp_nanos` exceeds the limit.","sig":null,"attributes":[{"value":"/ Error when `DateTime.timestamp_nanos` exceeds the limit.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683375,"byte_end":683435,"line_start":233,"line_end":233,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683440,"byte_end":683443,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ ``` rust","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683448,"byte_end":683460,"line_start":235,"line_end":235,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683465,"byte_end":683549,"line_start":236,"line_end":236,"column_start":5,"column_end":89}},{"value":"/ let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683554,"byte_end":683606,"line_start":237,"line_end":237,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683611,"byte_end":683614,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683619,"byte_end":683716,"line_start":239,"line_end":239,"column_start":5,"column_end":102}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683721,"byte_end":683728,"line_start":240,"line_end":240,"column_start":5,"column_end":12}}]},{"kind":"Enum","id":{"krate":0,"index":2072},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682462,"byte_end":682475,"line_start":206,"line_end":206,"column_start":10,"column_end":23},"name":"RoundingError","qualname":"::round::RoundingError","value":"pub enum RoundingError {\n\n    /// Error when the Duration exceeds the Duration from or until the Unix epoch.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(1970, 12, 12).and_hms(0, 0, 0);\n    ///\n    /// assert_eq!(\n    ///     dt.duration_round(Duration::days(365)),\n    ///     Err(RoundingError::DurationExceedsTimestamp),\n    /// );\n    /// ```\n    DurationExceedsTimestamp,\n\n    /// Error when `Duration.num_nanoseconds` exceeds the limit.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(2260, 12, 31).and_hms_nano(23, 59, 59, 1_75_500_000);\n    ///\n    /// assert_eq!(\n    ///     dt.duration_round(Duration::days(300 * 365)),\n    ///     Err(RoundingError::DurationExceedsLimit)\n    /// );\n    /// ```\n    DurationExceedsLimit,\n\n    /// Error when `DateTime.timestamp_nanos` exceeds the limit.\n    ///\n    /// ``` rust\n    /// # use chrono::{DateTime, DurationRound, Duration, RoundingError, TimeZone, Utc};\n    /// let dt = Utc.ymd(2300, 12, 12).and_hms(0, 0, 0);\n    ///\n    /// assert_eq!(dt.duration_round(Duration::days(1)), Err(RoundingError::TimestampExceedsLimit),);\n    /// ```\n    TimestampExceedsLimit,\n}","parent":null,"children":[{"krate":0,"index":2073},{"krate":0,"index":2075},{"krate":0,"index":2077}],"decl_id":null,"docs":" An error from rounding by `Duration`","sig":null,"attributes":[{"value":"/ An error from rounding by `Duration`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682336,"byte_end":682376,"line_start":202,"line_end":202,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682377,"byte_end":682380,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ See: [`DurationRound`]","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":682381,"byte_end":682407,"line_start":204,"line_end":204,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2091},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26589,"byte_end":26592,"line_start":631,"line_end":631,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26573,"byte_end":26584,"line_start":630,"line_end":630,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2094},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26619,"byte_end":26622,"line_start":633,"line_end":633,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26602,"byte_end":26614,"line_start":632,"line_end":632,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2097},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26651,"byte_end":26654,"line_start":635,"line_end":635,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26632,"byte_end":26646,"line_start":634,"line_end":634,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2100},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26682,"byte_end":26685,"line_start":637,"line_end":637,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26664,"byte_end":26677,"line_start":636,"line_end":636,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2103},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26711,"byte_end":26714,"line_start":639,"line_end":639,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26695,"byte_end":26706,"line_start":638,"line_end":638,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2106},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26742,"byte_end":26745,"line_start":641,"line_end":641,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26724,"byte_end":26737,"line_start":640,"line_end":640,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2109},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26771,"byte_end":26774,"line_start":643,"line_end":643,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":2090},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26755,"byte_end":26766,"line_start":642,"line_end":642,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":2090},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26559,"byte_end":26566,"line_start":629,"line_end":629,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday {\n\n    /// Monday.\n    Mon = ,\n\n    /// Tuesday.\n    Tue = ,\n\n    /// Wednesday.\n    Wed = ,\n\n    /// Thursday.\n    Thu = ,\n\n    /// Friday.\n    Fri = ,\n\n    /// Saturday.\n    Sat = ,\n\n    /// Sunday.\n    Sun = ,\n}","parent":null,"children":[{"krate":0,"index":2091},{"krate":0,"index":2094},{"krate":0,"index":2097},{"krate":0,"index":2100},{"krate":0,"index":2103},{"krate":0,"index":2106},{"krate":0,"index":2109}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26164,"byte_end":26184,"line_start":622,"line_end":622,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26185,"byte_end":26188,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26189,"byte_end":26246,"line_start":624,"line_end":624,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26247,"byte_end":26325,"line_start":625,"line_end":625,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26326,"byte_end":26417,"line_start":626,"line_end":626,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1414},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27093,"byte_end":27097,"line_start":653,"line_end":653,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26802,"byte_end":26831,"line_start":647,"line_end":647,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26836,"byte_end":26839,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26844,"byte_end":26915,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26920,"byte_end":26991,"line_start":650,"line_end":650,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26996,"byte_end":27067,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27072,"byte_end":27081,"line_start":652,"line_end":652,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1415},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27750,"byte_end":27754,"line_start":671,"line_end":671,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27455,"byte_end":27488,"line_start":665,"line_end":665,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27493,"byte_end":27496,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27501,"byte_end":27572,"line_start":667,"line_end":667,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27577,"byte_end":27648,"line_start":668,"line_end":668,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27653,"byte_end":27724,"line_start":669,"line_end":669,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":27729,"byte_end":27738,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1416},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28496,"byte_end":28514,"line_start":689,"line_end":689,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28112,"byte_end":28196,"line_start":683,"line_end":683,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28201,"byte_end":28204,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28209,"byte_end":28294,"line_start":685,"line_end":685,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28299,"byte_end":28384,"line_start":686,"line_end":686,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28389,"byte_end":28470,"line_start":687,"line_end":687,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28475,"byte_end":28484,"line_start":688,"line_end":688,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1417},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29149,"byte_end":29167,"line_start":707,"line_end":707,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28791,"byte_end":28849,"line_start":701,"line_end":701,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28854,"byte_end":28857,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28862,"byte_end":28947,"line_start":703,"line_end":703,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":28952,"byte_end":29037,"line_start":704,"line_end":704,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29042,"byte_end":29123,"line_start":705,"line_end":705,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29128,"byte_end":29137,"line_start":706,"line_end":706,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1418},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29808,"byte_end":29828,"line_start":725,"line_end":725,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29444,"byte_end":29502,"line_start":719,"line_end":719,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29507,"byte_end":29510,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29515,"byte_end":29602,"line_start":721,"line_end":721,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29607,"byte_end":29694,"line_start":722,"line_end":722,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29699,"byte_end":29782,"line_start":723,"line_end":723,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":29787,"byte_end":29796,"line_start":724,"line_end":724,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1419},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30469,"byte_end":30489,"line_start":743,"line_end":743,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30105,"byte_end":30163,"line_start":737,"line_end":737,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30168,"byte_end":30171,"line_start":738,"line_end":738,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30176,"byte_end":30263,"line_start":739,"line_end":739,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30268,"byte_end":30355,"line_start":740,"line_end":740,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30360,"byte_end":30443,"line_start":741,"line_end":741,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30448,"byte_end":30457,"line_start":742,"line_end":742,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":2126},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32328,"byte_end":32345,"line_start":807,"line_end":807,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":2127}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32221,"byte_end":32288,"line_start":805,"line_end":805,"column_start":1,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2135},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36514,"byte_end":36521,"line_start":951,"line_end":951,"column_start":5,"column_end":12},"name":"January","qualname":"::Month::January","value":"Month::January","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" January\n","sig":null,"attributes":[{"value":"/ January","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36498,"byte_end":36509,"line_start":950,"line_end":950,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2138},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36548,"byte_end":36556,"line_start":953,"line_end":953,"column_start":5,"column_end":13},"name":"February","qualname":"::Month::February","value":"Month::February","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" February\n","sig":null,"attributes":[{"value":"/ February","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36531,"byte_end":36543,"line_start":952,"line_end":952,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2141},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36580,"byte_end":36585,"line_start":955,"line_end":955,"column_start":5,"column_end":10},"name":"March","qualname":"::Month::March","value":"Month::March","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" March\n","sig":null,"attributes":[{"value":"/ March","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36566,"byte_end":36575,"line_start":954,"line_end":954,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2144},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36609,"byte_end":36614,"line_start":957,"line_end":957,"column_start":5,"column_end":10},"name":"April","qualname":"::Month::April","value":"Month::April","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" April\n","sig":null,"attributes":[{"value":"/ April","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36595,"byte_end":36604,"line_start":956,"line_end":956,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2147},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36636,"byte_end":36639,"line_start":959,"line_end":959,"column_start":5,"column_end":8},"name":"May","qualname":"::Month::May","value":"Month::May","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" May\n","sig":null,"attributes":[{"value":"/ May","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36624,"byte_end":36631,"line_start":958,"line_end":958,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2150},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36662,"byte_end":36666,"line_start":961,"line_end":961,"column_start":5,"column_end":9},"name":"June","qualname":"::Month::June","value":"Month::June","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" June\n","sig":null,"attributes":[{"value":"/ June","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36649,"byte_end":36657,"line_start":960,"line_end":960,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2153},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36689,"byte_end":36693,"line_start":963,"line_end":963,"column_start":5,"column_end":9},"name":"July","qualname":"::Month::July","value":"Month::July","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" July\n","sig":null,"attributes":[{"value":"/ July","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36676,"byte_end":36684,"line_start":962,"line_end":962,"column_start":5,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2156},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36718,"byte_end":36724,"line_start":965,"line_end":965,"column_start":5,"column_end":11},"name":"August","qualname":"::Month::August","value":"Month::August","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" August\n","sig":null,"attributes":[{"value":"/ August","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36703,"byte_end":36713,"line_start":964,"line_end":964,"column_start":5,"column_end":15}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2159},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36752,"byte_end":36761,"line_start":967,"line_end":967,"column_start":5,"column_end":14},"name":"September","qualname":"::Month::September","value":"Month::September","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" September\n","sig":null,"attributes":[{"value":"/ September","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36734,"byte_end":36747,"line_start":966,"line_end":966,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2162},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36787,"byte_end":36794,"line_start":969,"line_end":969,"column_start":5,"column_end":12},"name":"October","qualname":"::Month::October","value":"Month::October","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" October\n","sig":null,"attributes":[{"value":"/ October","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36771,"byte_end":36782,"line_start":968,"line_end":968,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2165},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36821,"byte_end":36829,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"November","qualname":"::Month::November","value":"Month::November","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" November\n","sig":null,"attributes":[{"value":"/ November","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36804,"byte_end":36816,"line_start":970,"line_end":970,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2168},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36857,"byte_end":36865,"line_start":973,"line_end":973,"column_start":5,"column_end":13},"name":"December","qualname":"::Month::December","value":"Month::December","parent":{"krate":0,"index":2134},"children":[],"decl_id":null,"docs":" December\n","sig":null,"attributes":[{"value":"/ December","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36840,"byte_end":36852,"line_start":972,"line_end":972,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":2134},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36486,"byte_end":36491,"line_start":949,"line_end":949,"column_start":10,"column_end":15},"name":"Month","qualname":"::Month","value":"pub enum Month {\n\n    /// January\n    January = ,\n\n    /// February\n    February = ,\n\n    /// March\n    March = ,\n\n    /// April\n    April = ,\n\n    /// May\n    May = ,\n\n    /// June\n    June = ,\n\n    /// July\n    July = ,\n\n    /// August\n    August = ,\n\n    /// September\n    September = ,\n\n    /// October\n    October = ,\n\n    /// November\n    November = ,\n\n    /// December\n    December = ,\n}","parent":null,"children":[{"krate":0,"index":2135},{"krate":0,"index":2138},{"krate":0,"index":2141},{"krate":0,"index":2144},{"krate":0,"index":2147},{"krate":0,"index":2150},{"krate":0,"index":2153},{"krate":0,"index":2156},{"krate":0,"index":2159},{"krate":0,"index":2162},{"krate":0,"index":2165},{"krate":0,"index":2168}],"decl_id":null,"docs":" The month of the year.","sig":null,"attributes":[{"value":"/ The month of the year.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35341,"byte_end":35367,"line_start":922,"line_end":922,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35368,"byte_end":35371,"line_start":923,"line_end":923,"column_start":1,"column_end":4}},{"value":"/ This enum is just a convenience implementation.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35372,"byte_end":35423,"line_start":924,"line_end":924,"column_start":1,"column_end":52}},{"value":"/ The month in dates created by DateLike objects does not return this enum.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35424,"byte_end":35501,"line_start":925,"line_end":925,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35502,"byte_end":35505,"line_start":926,"line_end":926,"column_start":1,"column_end":4}},{"value":"/ It is possible to convert from a date to a month independently","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35506,"byte_end":35572,"line_start":927,"line_end":927,"column_start":1,"column_end":67}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35573,"byte_end":35580,"line_start":928,"line_end":928,"column_start":1,"column_end":8}},{"value":"/ # extern crate num_traits;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35581,"byte_end":35611,"line_start":929,"line_end":929,"column_start":1,"column_end":31}},{"value":"/ use num_traits::FromPrimitive;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35612,"byte_end":35646,"line_start":930,"line_end":930,"column_start":1,"column_end":35}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35647,"byte_end":35674,"line_start":931,"line_end":931,"column_start":1,"column_end":28}},{"value":"/ let date = Utc.ymd(2019, 10, 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35675,"byte_end":35731,"line_start":932,"line_end":932,"column_start":1,"column_end":57}},{"value":"/ // `2019-10-28T09:10:11Z`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35732,"byte_end":35761,"line_start":933,"line_end":933,"column_start":1,"column_end":30}},{"value":"/ let month = Month::from_u32(date.month());","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35762,"byte_end":35808,"line_start":934,"line_end":934,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(month, Some(Month::October))","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35809,"byte_end":35852,"line_start":935,"line_end":935,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35853,"byte_end":35860,"line_start":936,"line_end":936,"column_start":1,"column_end":8}},{"value":"/ Or from a Month to an integer usable by dates","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35861,"byte_end":35910,"line_start":937,"line_end":937,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35911,"byte_end":35918,"line_start":938,"line_end":938,"column_start":1,"column_end":8}},{"value":"/ # use chrono::prelude::*;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35919,"byte_end":35948,"line_start":939,"line_end":939,"column_start":1,"column_end":30}},{"value":"/ let month = Month::January;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35949,"byte_end":35980,"line_start":940,"line_end":940,"column_start":1,"column_end":32}},{"value":"/ let dt = Utc.ymd(2019, month.number_from_month(), 28).and_hms(9, 10, 11);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":35981,"byte_end":36058,"line_start":941,"line_end":941,"column_start":1,"column_end":78}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2019, 1, 28));","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36059,"byte_end":36124,"line_start":942,"line_end":942,"column_start":1,"column_end":66}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36125,"byte_end":36132,"line_start":943,"line_end":943,"column_start":1,"column_end":8}},{"value":"/ Allows mapping from and to month, from 1-January to 12-December.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36133,"byte_end":36201,"line_start":944,"line_end":944,"column_start":1,"column_end":69}},{"value":"/ Can be Serialized/Deserialized with serde","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36202,"byte_end":36247,"line_start":945,"line_end":945,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1429},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37142,"byte_end":37146,"line_start":983,"line_end":983,"column_start":12,"column_end":16},"name":"succ","qualname":"<Month>::succ","value":"pub fn succ(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The next month.","sig":null,"attributes":[{"value":"/ The next month.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36892,"byte_end":36911,"line_start":977,"line_end":977,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36916,"byte_end":36919,"line_start":978,"line_end":978,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36924,"byte_end":36986,"line_start":979,"line_end":979,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36991,"byte_end":37050,"line_start":980,"line_end":980,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `February` | `March`    | `...` | `January`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37055,"byte_end":37116,"line_start":981,"line_end":981,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37121,"byte_end":37130,"line_start":982,"line_end":982,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1430},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37995,"byte_end":37999,"line_start":1006,"line_end":1006,"column_start":12,"column_end":16},"name":"pred","qualname":"<Month>::pred","value":"pub fn pred(&Self) -> Month","parent":null,"children":[],"decl_id":null,"docs":" The previous month.","sig":null,"attributes":[{"value":"/ The previous month.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37740,"byte_end":37763,"line_start":1000,"line_end":1000,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37768,"byte_end":37771,"line_start":1001,"line_end":1001,"column_start":5,"column_end":8}},{"value":"/ `m`:        | `January`  | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37776,"byte_end":37838,"line_start":1002,"line_end":1002,"column_start":5,"column_end":67}},{"value":"/ ----------- | ---------  | ---------- | --- | ---------","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37843,"byte_end":37902,"line_start":1003,"line_end":1003,"column_start":5,"column_end":64}},{"value":"/ `m.succ()`: | `December` | `January`  | `...` | `November`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37907,"byte_end":37969,"line_start":1004,"line_end":1004,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":37974,"byte_end":37983,"line_start":1005,"line_end":1005,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1431},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38910,"byte_end":38927,"line_start":1029,"line_end":1029,"column_start":12,"column_end":29},"name":"number_from_month","qualname":"<Month>::number_from_month","value":"pub fn number_from_month(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a month-of-year number starting from January = 1.","sig":null,"attributes":[{"value":"/ Returns a month-of-year number starting from January = 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38593,"byte_end":38654,"line_start":1023,"line_end":1023,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38659,"byte_end":38662,"line_start":1024,"line_end":1024,"column_start":5,"column_end":8}},{"value":"/ `m`:                     | `January` | `February` | `...` | `December`","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38667,"byte_end":38741,"line_start":1025,"line_end":1025,"column_start":5,"column_end":79}},{"value":"/ -------------------------| --------- | ---------- | --- | -----","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38746,"byte_end":38813,"line_start":1026,"line_end":1026,"column_start":5,"column_end":72}},{"value":"/ `m.number_from_month()`: | 1         | 2          | `...` | 12","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38818,"byte_end":38884,"line_start":1027,"line_end":1027,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":38889,"byte_end":38898,"line_start":1028,"line_end":1028,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1432},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39537,"byte_end":39541,"line_start":1053,"line_end":1053,"column_start":12,"column_end":16},"name":"name","qualname":"<Month>::name","value":"pub fn name(&Self) -> &'static str","parent":null,"children":[],"decl_id":null,"docs":" Get the name of the month","sig":null,"attributes":[{"value":"/ Get the name of the month","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39376,"byte_end":39405,"line_start":1046,"line_end":1046,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39410,"byte_end":39413,"line_start":1047,"line_end":1047,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39418,"byte_end":39425,"line_start":1048,"line_end":1048,"column_start":5,"column_end":12}},{"value":"/ use chrono::Month;","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39430,"byte_end":39452,"line_start":1049,"line_end":1049,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39457,"byte_end":39460,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Month::January.name(), \"January\")","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39465,"byte_end":39513,"line_start":1051,"line_end":1051,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":39518,"byte_end":39525,"line_start":1052,"line_end":1052,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2185},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41392,"byte_end":41407,"line_start":1110,"line_end":1110,"column_start":12,"column_end":27},"name":"ParseMonthError","qualname":"::ParseMonthError","value":"ParseMonthError {  }","parent":null,"children":[{"krate":0,"index":2186}],"decl_id":null,"docs":" An error resulting from reading `<Month>` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `<Month>` value with `FromStr`.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41285,"byte_end":41352,"line_start":1108,"line_end":1108,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1439},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44542,"byte_end":44550,"line_start":1228,"line_end":1228,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1442},{"krate":0,"index":1443},{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1447},{"krate":0,"index":1448},{"krate":0,"index":1449},{"krate":0,"index":1450},{"krate":0,"index":1451},{"krate":0,"index":1452},{"krate":0,"index":1453},{"krate":0,"index":1454},{"krate":0,"index":1455},{"krate":0,"index":1456},{"krate":0,"index":1457}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44482,"byte_end":44531,"line_start":1227,"line_end":1227,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1440},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44668,"byte_end":44672,"line_start":1230,"line_end":1230,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44564,"byte_end":44660,"line_start":1229,"line_end":1229,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1441},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44881,"byte_end":44888,"line_start":1235,"line_end":1235,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44693,"byte_end":44766,"line_start":1232,"line_end":1232,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44771,"byte_end":44859,"line_start":1233,"line_end":1233,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44864,"byte_end":44873,"line_start":1234,"line_end":1234,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1442},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45183,"byte_end":45188,"line_start":1247,"line_end":1247,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45076,"byte_end":45121,"line_start":1244,"line_end":1244,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45126,"byte_end":45129,"line_start":1245,"line_end":1245,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45134,"byte_end":45175,"line_start":1246,"line_end":1246,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1443},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45316,"byte_end":45322,"line_start":1252,"line_end":1252,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45209,"byte_end":45254,"line_start":1249,"line_end":1249,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45259,"byte_end":45262,"line_start":1250,"line_end":1250,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45267,"byte_end":45308,"line_start":1251,"line_end":1251,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1444},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45493,"byte_end":45496,"line_start":1257,"line_end":1257,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45343,"byte_end":45388,"line_start":1254,"line_end":1254,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45393,"byte_end":45396,"line_start":1255,"line_end":1255,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45401,"byte_end":45485,"line_start":1256,"line_end":1256,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1445},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45667,"byte_end":45671,"line_start":1262,"line_end":1262,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45517,"byte_end":45562,"line_start":1259,"line_end":1259,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45567,"byte_end":45570,"line_start":1260,"line_end":1260,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45575,"byte_end":45659,"line_start":1261,"line_end":1261,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1446},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45840,"byte_end":45847,"line_start":1267,"line_end":1267,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45692,"byte_end":45736,"line_start":1264,"line_end":1264,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45741,"byte_end":45744,"line_start":1265,"line_end":1265,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45749,"byte_end":45832,"line_start":1266,"line_end":1266,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1447},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46016,"byte_end":46024,"line_start":1272,"line_end":1272,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45868,"byte_end":45912,"line_start":1269,"line_end":1269,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45917,"byte_end":45920,"line_start":1270,"line_end":1270,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":45925,"byte_end":46008,"line_start":1271,"line_end":1271,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46081,"byte_end":46088,"line_start":1275,"line_end":1275,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46045,"byte_end":46073,"line_start":1274,"line_end":1274,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1449},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46146,"byte_end":46154,"line_start":1278,"line_end":1278,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46113,"byte_end":46138,"line_start":1277,"line_end":1277,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1450},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46312,"byte_end":46321,"line_start":1283,"line_end":1283,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46179,"byte_end":46230,"line_start":1280,"line_end":1280,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46235,"byte_end":46238,"line_start":1281,"line_end":1281,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46243,"byte_end":46304,"line_start":1282,"line_end":1282,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46514,"byte_end":46524,"line_start":1288,"line_end":1288,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46362,"byte_end":46432,"line_start":1285,"line_end":1285,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46437,"byte_end":46440,"line_start":1286,"line_end":1286,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46445,"byte_end":46506,"line_start":1287,"line_end":1287,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46718,"byte_end":46729,"line_start":1293,"line_end":1293,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46566,"byte_end":46636,"line_start":1290,"line_end":1290,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46641,"byte_end":46644,"line_start":1291,"line_end":1291,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46649,"byte_end":46710,"line_start":1292,"line_end":1292,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1453},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46924,"byte_end":46932,"line_start":1298,"line_end":1298,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46772,"byte_end":46842,"line_start":1295,"line_end":1295,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46847,"byte_end":46850,"line_start":1296,"line_end":1296,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46855,"byte_end":46916,"line_start":1297,"line_end":1297,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1454},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47124,"byte_end":47133,"line_start":1303,"line_end":1303,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":46972,"byte_end":47042,"line_start":1300,"line_end":1300,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47047,"byte_end":47050,"line_start":1301,"line_end":1301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47055,"byte_end":47116,"line_start":1302,"line_end":1302,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1455},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47325,"byte_end":47337,"line_start":1308,"line_end":1308,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47174,"byte_end":47243,"line_start":1305,"line_end":1305,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47248,"byte_end":47251,"line_start":1306,"line_end":1306,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47256,"byte_end":47317,"line_start":1307,"line_end":1307,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1456},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47532,"byte_end":47545,"line_start":1313,"line_end":1313,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47381,"byte_end":47450,"line_start":1310,"line_end":1310,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47455,"byte_end":47458,"line_start":1311,"line_end":1311,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47463,"byte_end":47524,"line_start":1312,"line_end":1312,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1457},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48104,"byte_end":48120,"line_start":1327,"line_end":1327,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":1439},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47590,"byte_end":47684,"line_start":1315,"line_end":1315,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47689,"byte_end":47692,"line_start":1316,"line_end":1316,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47697,"byte_end":47711,"line_start":1317,"line_end":1317,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47716,"byte_end":47719,"line_start":1318,"line_end":1318,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47724,"byte_end":47731,"line_start":1319,"line_end":1319,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47736,"byte_end":47774,"line_start":1320,"line_end":1320,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47779,"byte_end":47782,"line_start":1321,"line_end":1321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47787,"byte_end":47863,"line_start":1322,"line_end":1322,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47868,"byte_end":47937,"line_start":1323,"line_end":1323,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":47942,"byte_end":48009,"line_start":1324,"line_end":1324,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48014,"byte_end":48084,"line_start":1325,"line_end":1325,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48089,"byte_end":48096,"line_start":1326,"line_end":1326,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1458},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48778,"byte_end":48786,"line_start":1346,"line_end":1346,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1459},{"krate":0,"index":1460},{"krate":0,"index":1461},{"krate":0,"index":1462},{"krate":0,"index":1463},{"krate":0,"index":1464},{"krate":0,"index":1465},{"krate":0,"index":1466},{"krate":0,"index":1467},{"krate":0,"index":1468}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48718,"byte_end":48767,"line_start":1345,"line_end":1345,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1459},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48849,"byte_end":48853,"line_start":1348,"line_end":1348,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48800,"byte_end":48841,"line_start":1347,"line_end":1347,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1460},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49004,"byte_end":49010,"line_start":1353,"line_end":1353,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48874,"byte_end":48935,"line_start":1350,"line_end":1350,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48940,"byte_end":48982,"line_start":1351,"line_end":1351,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48987,"byte_end":48996,"line_start":1352,"line_end":1352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1461},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49254,"byte_end":49260,"line_start":1363,"line_end":1363,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49203,"byte_end":49246,"line_start":1362,"line_end":1362,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1462},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49332,"byte_end":49338,"line_start":1366,"line_end":1366,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49281,"byte_end":49324,"line_start":1365,"line_end":1365,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1463},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49581,"byte_end":49591,"line_start":1371,"line_end":1371,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49359,"byte_end":49429,"line_start":1368,"line_end":1368,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49434,"byte_end":49494,"line_start":1369,"line_end":1369,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49499,"byte_end":49573,"line_start":1370,"line_end":1370,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1464},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49745,"byte_end":49754,"line_start":1376,"line_end":1376,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49612,"byte_end":49663,"line_start":1373,"line_end":1373,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49668,"byte_end":49671,"line_start":1374,"line_end":1374,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49676,"byte_end":49737,"line_start":1375,"line_end":1375,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1465},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49930,"byte_end":49941,"line_start":1381,"line_end":1381,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49795,"byte_end":49848,"line_start":1378,"line_end":1378,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49853,"byte_end":49856,"line_start":1379,"line_end":1379,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49861,"byte_end":49922,"line_start":1380,"line_end":1380,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1466},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50228,"byte_end":50239,"line_start":1388,"line_end":1388,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":49981,"byte_end":50034,"line_start":1383,"line_end":1383,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50039,"byte_end":50042,"line_start":1384,"line_end":1384,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50047,"byte_end":50108,"line_start":1385,"line_end":1385,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50113,"byte_end":50165,"line_start":1386,"line_end":1386,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50170,"byte_end":50220,"line_start":1387,"line_end":1387,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1467},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50572,"byte_end":50587,"line_start":1395,"line_end":1395,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50279,"byte_end":50358,"line_start":1390,"line_end":1390,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50363,"byte_end":50366,"line_start":1391,"line_end":1391,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50371,"byte_end":50432,"line_start":1392,"line_end":1392,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50437,"byte_end":50497,"line_start":1393,"line_end":1393,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50502,"byte_end":50564,"line_start":1394,"line_end":1394,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1468},"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50716,"byte_end":50741,"line_start":1399,"line_end":1399,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":1458},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50628,"byte_end":50694,"line_start":1397,"line_end":1397,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":50699,"byte_end":50708,"line_start":1398,"line_end":1398,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58464,"byte_end":58475,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59656,"byte_end":59667,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62877,"byte_end":62888,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78235,"byte_end":78246,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80803,"byte_end":80814,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81402,"byte_end":81413,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81494,"byte_end":81505,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82003,"byte_end":82014,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82782,"byte_end":82791,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82979,"byte_end":82988,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83177,"byte_end":83190,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83386,"byte_end":83399,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83610,"byte_end":83618,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83830,"byte_end":83838,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88173,"byte_end":88178,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":205},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":89069,"byte_end":89074,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94434,"byte_end":94437,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95226,"byte_end":95229,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95749,"byte_end":95752,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":246}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95848,"byte_end":95851,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95967,"byte_end":95970,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":101765,"byte_end":101774,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139683,"byte_end":139692,"line_start":1105,"line_end":1105,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152024,"byte_end":152033,"line_start":1472,"line_end":1472,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152252,"byte_end":152261,"line_start":1481,"line_end":1481,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153676,"byte_end":153685,"line_start":1514,"line_end":1514,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":368},{"krate":0,"index":369}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153904,"byte_end":153913,"line_start":1523,"line_end":1523,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155169,"byte_end":155178,"line_start":1557,"line_end":1557,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155531,"byte_end":155552,"line_start":1572,"line_end":1572,"column_start":19,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156129,"byte_end":156150,"line_start":1592,"line_end":1592,"column_start":28,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156302,"byte_end":156324,"line_start":1599,"line_end":1599,"column_start":19,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156839,"byte_end":156861,"line_start":1617,"line_end":1617,"column_start":28,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":157908,"byte_end":157917,"line_start":1645,"line_end":1645,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159176,"byte_end":159185,"line_start":1680,"line_end":1680,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159787,"byte_end":159796,"line_start":1702,"line_end":1702,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":390},{"krate":0,"index":391}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191107,"byte_end":191120,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217574,"byte_end":217587,"line_start":710,"line_end":710,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":228643,"byte_end":228656,"line_start":1028,"line_end":1028,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":485},{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":488},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":234852,"byte_end":234865,"line_start":1200,"line_end":1200,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237480,"byte_end":237493,"line_start":1262,"line_end":1262,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":501},{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237724,"byte_end":237737,"line_start":1271,"line_end":1271,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":504}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240248,"byte_end":240261,"line_start":1332,"line_end":1332,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":506},{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240492,"byte_end":240505,"line_start":1341,"line_end":1341,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":509}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":242443,"byte_end":242456,"line_start":1394,"line_end":1394,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":511},{"krate":0,"index":512}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":243664,"byte_end":243677,"line_start":1430,"line_end":1430,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":514}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":244773,"byte_end":244786,"line_start":1461,"line_end":1461,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":245524,"byte_end":245537,"line_start":1483,"line_end":1483,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":289744,"byte_end":289753,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":290550,"byte_end":290559,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":560}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":298700,"byte_end":298702,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":576},{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":580},{"krate":0,"index":581},{"krate":0,"index":582},{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":300781,"byte_end":300783,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":301382,"byte_end":301385,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":303348,"byte_end":303351,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317574,"byte_end":317581,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":320127,"byte_end":320134,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":613}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329153,"byte_end":329162,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655},{"krate":0,"index":656},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":664},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353694,"byte_end":353703,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":360932,"byte_end":360941,"line_start":1020,"line_end":1020,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":363948,"byte_end":363957,"line_start":1085,"line_end":1085,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":681},{"krate":0,"index":682}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":364138,"byte_end":364147,"line_start":1094,"line_end":1094,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":684}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366750,"byte_end":366759,"line_start":1155,"line_end":1155,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":686},{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366940,"byte_end":366949,"line_start":1164,"line_end":1164,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":689}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":369484,"byte_end":369493,"line_start":1222,"line_end":1222,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":691},{"krate":0,"index":692}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":370881,"byte_end":370890,"line_start":1259,"line_end":1259,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":372743,"byte_end":372752,"line_start":1309,"line_end":1309,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":373524,"byte_end":373533,"line_start":1334,"line_end":1334,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394816,"byte_end":394820,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":770}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402920,"byte_end":402924,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":777},{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":404801,"byte_end":404805,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":804},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406640,"byte_end":406644,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406724,"byte_end":406728,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406833,"byte_end":406837,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":815}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406957,"byte_end":406961,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407004,"byte_end":407008,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407160,"byte_end":407164,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":823}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407299,"byte_end":407303,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407442,"byte_end":407446,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407670,"byte_end":407674,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407895,"byte_end":407899,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408084,"byte_end":408088,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408262,"byte_end":408266,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411192,"byte_end":411200,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893},{"krate":0,"index":894},{"krate":0,"index":895},{"krate":0,"index":896},{"krate":0,"index":897},{"krate":0,"index":898},{"krate":0,"index":899},{"krate":0,"index":900},{"krate":0,"index":901},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":909}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417247,"byte_end":417255,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":911}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417761,"byte_end":417769,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418179,"byte_end":418187,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418639,"byte_end":418647,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":917}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419095,"byte_end":419103,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419541,"byte_end":419549,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":921}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420265,"byte_end":420273,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":927},{"krate":0,"index":929},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422965,"byte_end":422973,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938},{"krate":0,"index":943},{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":428455,"byte_end":428463,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":956},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":430320,"byte_end":430328,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431368,"byte_end":431376,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431456,"byte_end":431464,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431573,"byte_end":431581,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":995}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431713,"byte_end":431721,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431794,"byte_end":431802,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1001}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432541,"byte_end":432549,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432696,"byte_end":432704,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432847,"byte_end":432855,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1011},{"krate":0,"index":1012}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433091,"byte_end":433099,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433336,"byte_end":433344,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433533,"byte_end":433541,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433715,"byte_end":433723,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1026}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433916,"byte_end":433924,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1028},{"krate":0,"index":1029}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434150,"byte_end":434158,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1032},{"krate":0,"index":1033}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434403,"byte_end":434411,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1036}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435063,"byte_end":435071,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435270,"byte_end":435280,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1041}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505693,"byte_end":505708,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505798,"byte_end":505813,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505919,"byte_end":505934,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505959,"byte_end":505974,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1073}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513263,"byte_end":513273,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1084}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514022,"byte_end":514032,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1086}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540075,"byte_end":540081,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1174}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540757,"byte_end":540763,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1176},{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193},{"krate":0,"index":1194},{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1212},{"krate":0,"index":1213},{"krate":0,"index":1214}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":609606,"byte_end":609614,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1283}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656796,"byte_end":656809,"line_start":208,"line_end":208,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1345},{"krate":0,"index":1346}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":658304,"byte_end":658317,"line_start":257,"line_end":257,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529388,"byte_end":529401,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1365},{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":531374,"byte_end":531387,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":532674,"byte_end":532681,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1374},{"krate":0,"index":1375}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":534639,"byte_end":534644,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1377},{"krate":0,"index":1378}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676929,"byte_end":676930,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1396},{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680311,"byte_end":680319,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1408}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683781,"byte_end":683794,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1410}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":684373,"byte_end":684386,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26788,"byte_end":26795,"line_start":646,"line_end":646,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1417},{"krate":0,"index":1418},{"krate":0,"index":1419}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30786,"byte_end":30793,"line_start":756,"line_end":756,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1421}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":31441,"byte_end":31448,"line_start":773,"line_end":773,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1423},{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32387,"byte_end":32404,"line_start":811,"line_end":811,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1427}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36880,"byte_end":36885,"line_start":976,"line_end":976,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1429},{"krate":0,"index":1430},{"krate":0,"index":1431},{"krate":0,"index":1432}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":40115,"byte_end":40120,"line_start":1071,"line_end":1071,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1434},{"krate":0,"index":1435},{"krate":0,"index":1436}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41449,"byte_end":41464,"line_start":1114,"line_end":1114,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":22993,"byte_end":22999,"line_start":523,"line_end":523,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":24315,"byte_end":24321,"line_start":564,"line_end":564,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1043}},{"kind":"Mod","span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":528634,"byte_end":528642,"line_start":713,"line_end":713,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1330}}],"macro_refs":[],"relations":[{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":58464,"byte_end":58475,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":59656,"byte_end":59667,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":62877,"byte_end":62888,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63350,"byte_end":63355,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63358,"byte_end":63363,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63371,"byte_end":63376,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":6210},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63666,"byte_end":63671,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":101}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\mod.rs","byte_start":63674,"byte_end":63679,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":101}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":78235,"byte_end":78246,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":80803,"byte_end":80814,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1505},"to":{"krate":0,"index":101}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81402,"byte_end":81413,"line_start":123,"line_end":123,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1505},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":81494,"byte_end":81505,"line_start":129,"line_end":129,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82003,"byte_end":82014,"line_start":143,"line_end":143,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82782,"byte_end":82791,"line_start":164,"line_end":164,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":82979,"byte_end":82988,"line_start":173,"line_end":173,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83177,"byte_end":83190,"line_start":182,"line_end":182,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83386,"byte_end":83399,"line_start":191,"line_end":191,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83610,"byte_end":83618,"line_start":200,"line_end":200,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\fixed.rs","byte_start":83830,"byte_end":83838,"line_start":209,"line_end":209,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":88173,"byte_end":88178,"line_start":92,"line_end":92,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\local.rs","byte_start":89069,"byte_end":89074,"line_start":116,"line_end":116,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":101}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":94434,"byte_end":94437,"line_start":39,"line_end":39,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1527},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95226,"byte_end":95229,"line_start":61,"line_end":61,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":101}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95749,"byte_end":95752,"line_start":83,"line_end":83,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1527},"to":{"krate":0,"index":99}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95848,"byte_end":95851,"line_start":89,"line_end":89,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1527},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\offset\\utc.rs","byte_start":95967,"byte_end":95970,"line_start":95,"line_end":95,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1527},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":101765,"byte_end":101774,"line_start":136,"line_end":136,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1538},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":139683,"byte_end":139692,"line_start":1105,"line_end":1105,"column_start":19,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1538},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152024,"byte_end":152033,"line_start":1472,"line_end":1472,"column_start":27,"column_end":36},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":152252,"byte_end":152261,"line_start":1481,"line_end":1481,"column_start":33,"column_end":42},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":2023}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153676,"byte_end":153685,"line_start":1514,"line_end":1514,"column_start":27,"column_end":36},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":153904,"byte_end":153913,"line_start":1523,"line_end":1523,"column_start":33,"column_end":42},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":2027}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155169,"byte_end":155178,"line_start":1557,"line_end":1557,"column_start":25,"column_end":34},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":155531,"byte_end":155552,"line_start":1572,"line_end":1572,"column_start":19,"column_end":40},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1561},"to":{"krate":2,"index":4996}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156129,"byte_end":156150,"line_start":1592,"line_end":1592,"column_start":28,"column_end":49},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1561},"to":{"krate":2,"index":4951}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156302,"byte_end":156324,"line_start":1599,"line_end":1599,"column_start":19,"column_end":41},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1586},"to":{"krate":2,"index":4996}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":156839,"byte_end":156861,"line_start":1617,"line_end":1617,"column_start":28,"column_end":50},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1586},"to":{"krate":2,"index":4951}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":157908,"byte_end":157917,"line_start":1645,"line_end":1645,"column_start":21,"column_end":30},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159176,"byte_end":159185,"line_start":1680,"line_end":1680,"column_start":23,"column_end":32},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\date.rs","byte_start":159787,"byte_end":159796,"line_start":1702,"line_end":1702,"column_start":23,"column_end":32},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1538},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":191107,"byte_end":191120,"line_start":67,"line_end":67,"column_start":6,"column_end":19},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1611},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":217574,"byte_end":217587,"line_start":710,"line_end":710,"column_start":19,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1611},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":228643,"byte_end":228656,"line_start":1028,"line_end":1028,"column_start":19,"column_end":32},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1611},"to":{"krate":0,"index":1458}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":234852,"byte_end":234865,"line_start":1200,"line_end":1200,"column_start":21,"column_end":34},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":6398}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237480,"byte_end":237493,"line_start":1262,"line_end":1262,"column_start":27,"column_end":40},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":237724,"byte_end":237737,"line_start":1271,"line_end":1271,"column_start":33,"column_end":46},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":2023}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240248,"byte_end":240261,"line_start":1332,"line_end":1332,"column_start":27,"column_end":40},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":240492,"byte_end":240505,"line_start":1341,"line_end":1341,"column_start":33,"column_end":46},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":2027}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":242443,"byte_end":242456,"line_start":1394,"line_end":1394,"column_start":29,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":243664,"byte_end":243677,"line_start":1430,"line_end":1430,"column_start":21,"column_end":34},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":244773,"byte_end":244786,"line_start":1461,"line_end":1461,"column_start":23,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\datetime.rs","byte_start":245524,"byte_end":245537,"line_start":1483,"line_end":1483,"column_start":23,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1611},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":289744,"byte_end":289753,"line_start":113,"line_end":113,"column_start":6,"column_end":15},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1636},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":290550,"byte_end":290559,"line_start":148,"line_end":148,"column_start":21,"column_end":30},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1636},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":298700,"byte_end":298702,"line_start":270,"line_end":270,"column_start":6,"column_end":8},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1649},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":300781,"byte_end":300783,"line_start":359,"line_end":359,"column_start":21,"column_end":23},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1649},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":301382,"byte_end":301385,"line_start":380,"line_end":380,"column_start":6,"column_end":9},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1665},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\internals.rs","byte_start":303348,"byte_end":303351,"line_start":469,"line_end":469,"column_start":21,"column_end":24},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1665},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":317574,"byte_end":317581,"line_start":48,"line_end":48,"column_start":6,"column_end":13},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1681},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\isoweek.rs","byte_start":320127,"byte_end":320134,"line_start":130,"line_end":130,"column_start":21,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1681},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":329153,"byte_end":329162,"line_start":187,"line_end":187,"column_start":6,"column_end":15},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":353694,"byte_end":353703,"line_start":807,"line_end":807,"column_start":19,"column_end":28},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1701},"to":{"krate":0,"index":1458}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":360932,"byte_end":360941,"line_start":1020,"line_end":1020,"column_start":21,"column_end":30},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":6398}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":363948,"byte_end":363957,"line_start":1085,"line_end":1085,"column_start":27,"column_end":36},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":364138,"byte_end":364147,"line_start":1094,"line_end":1094,"column_start":33,"column_end":42},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":2023}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366750,"byte_end":366759,"line_start":1155,"line_end":1155,"column_start":27,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":366940,"byte_end":366949,"line_start":1164,"line_end":1164,"column_start":33,"column_end":42},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":2027}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":369484,"byte_end":369493,"line_start":1222,"line_end":1222,"column_start":25,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":370881,"byte_end":370890,"line_start":1259,"line_end":1259,"column_start":21,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":372743,"byte_end":372752,"line_start":1309,"line_end":1309,"column_start":23,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\naive\\time.rs","byte_start":373524,"byte_end":373533,"line_start":1334,"line_end":1334,"column_start":23,"column_end":32},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1701},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":394816,"byte_end":394820,"line_start":57,"line_end":57,"column_start":20,"column_end":24},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":402920,"byte_end":402924,"line_start":277,"line_end":277,"column_start":20,"column_end":24},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1726},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":404801,"byte_end":404805,"line_start":336,"line_end":336,"column_start":33,"column_end":37},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1726},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406640,"byte_end":406644,"line_start":411,"line_end":411,"column_start":29,"column_end":33},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1937}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406724,"byte_end":406728,"line_start":412,"line_end":412,"column_start":36,"column_end":40},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1927}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406833,"byte_end":406837,"line_start":414,"line_end":414,"column_start":60,"column_end":64},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1653}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":406957,"byte_end":406961,"line_start":420,"line_end":420,"column_start":27,"column_end":31},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1658}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407004,"byte_end":407008,"line_start":422,"line_end":422,"column_start":35,"column_end":39},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1690}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407160,"byte_end":407164,"line_start":428,"line_end":428,"column_start":28,"column_end":32},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1679}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407299,"byte_end":407303,"line_start":434,"line_end":434,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":6398}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407442,"byte_end":407446,"line_start":440,"line_end":440,"column_start":41,"column_end":45},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407670,"byte_end":407674,"line_start":449,"line_end":449,"column_start":41,"column_end":45},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":407895,"byte_end":407899,"line_start":458,"line_end":458,"column_start":38,"column_end":42},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408084,"byte_end":408088,"line_start":467,"line_end":467,"column_start":35,"column_end":39},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\date.rs","byte_start":408262,"byte_end":408266,"line_start":473,"line_end":473,"column_start":37,"column_end":41},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1726},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":411192,"byte_end":411200,"line_start":80,"line_end":80,"column_start":20,"column_end":28},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417247,"byte_end":417255,"line_start":257,"line_end":257,"column_start":30,"column_end":38},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":417761,"byte_end":417769,"line_start":269,"line_end":269,"column_start":30,"column_end":38},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418179,"byte_end":418187,"line_start":279,"line_end":279,"column_start":38,"column_end":46},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":418639,"byte_end":418647,"line_start":291,"line_end":291,"column_start":38,"column_end":46},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419095,"byte_end":419103,"line_start":303,"line_end":303,"column_start":32,"column_end":40},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":419541,"byte_end":419549,"line_start":315,"line_end":315,"column_start":32,"column_end":40},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":420265,"byte_end":420273,"line_start":333,"line_end":333,"column_start":6,"column_end":14},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":422965,"byte_end":422973,"line_start":393,"line_end":393,"column_start":20,"column_end":28},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1757},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":428455,"byte_end":428463,"line_start":535,"line_end":535,"column_start":33,"column_end":41},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1757},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":430320,"byte_end":430328,"line_start":609,"line_end":609,"column_start":33,"column_end":41},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1757},"to":{"krate":0,"index":1458}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431368,"byte_end":431376,"line_start":649,"line_end":649,"column_start":29,"column_end":37},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1937}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431456,"byte_end":431464,"line_start":650,"line_end":650,"column_start":36,"column_end":44},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1927}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431573,"byte_end":431581,"line_start":652,"line_end":652,"column_start":64,"column_end":72},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1653}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431713,"byte_end":431721,"line_start":658,"line_end":658,"column_start":27,"column_end":35},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1658}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":431794,"byte_end":431802,"line_start":660,"line_end":660,"column_start":65,"column_end":73},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1690}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432541,"byte_end":432549,"line_start":681,"line_end":681,"column_start":28,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1679}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432696,"byte_end":432704,"line_start":687,"line_end":687,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":6398}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":432847,"byte_end":432855,"line_start":693,"line_end":693,"column_start":41,"column_end":49},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1992}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433091,"byte_end":433099,"line_start":702,"line_end":702,"column_start":41,"column_end":49},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433336,"byte_end":433344,"line_start":711,"line_end":711,"column_start":42,"column_end":50},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1997}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433533,"byte_end":433541,"line_start":720,"line_end":720,"column_start":35,"column_end":43},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433715,"byte_end":433723,"line_start":726,"line_end":726,"column_start":37,"column_end":45},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":433916,"byte_end":433924,"line_start":735,"line_end":735,"column_start":23,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434150,"byte_end":434158,"line_start":744,"line_end":744,"column_start":23,"column_end":31},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":434403,"byte_end":434411,"line_start":753,"line_end":753,"column_start":27,"column_end":35},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435063,"byte_end":435071,"line_start":773,"line_end":773,"column_start":27,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\datetime.rs","byte_start":435270,"byte_end":435280,"line_start":780,"line_end":780,"column_start":43,"column_end":53},"kind":{"Impl":{"id":108}},"from":{"krate":1,"index":7626},"to":{"krate":2,"index":1845}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505693,"byte_end":505708,"line_start":141,"line_end":141,"column_start":16,"column_end":31},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":1625}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505798,"byte_end":505813,"line_start":147,"line_end":147,"column_start":20,"column_end":35},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":1653}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505919,"byte_end":505934,"line_start":153,"line_end":153,"column_start":13,"column_end":28},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":1658}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":505959,"byte_end":505974,"line_start":155,"line_end":155,"column_start":21,"column_end":36},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1065},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":513263,"byte_end":513273,"line_start":358,"line_end":358,"column_start":23,"column_end":33},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1971},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":514022,"byte_end":514032,"line_start":373,"line_end":373,"column_start":16,"column_end":26},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1971},"to":{"krate":1,"index":1642}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540075,"byte_end":540081,"line_start":129,"line_end":129,"column_start":18,"column_end":24},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2012},"to":{"krate":2,"index":1915}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parsed.rs","byte_start":540757,"byte_end":540763,"line_start":157,"line_end":157,"column_start":6,"column_end":12},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":2012},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\parse.rs","byte_start":609606,"byte_end":609614,"line_start":456,"line_end":456,"column_start":23,"column_end":31},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1757},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":656796,"byte_end":656809,"line_start":208,"line_end":208,"column_start":10,"column_end":23},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":2043},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\strftime.rs","byte_start":658304,"byte_end":658317,"line_start":257,"line_end":257,"column_start":23,"column_end":36},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":2043},"to":{"krate":2,"index":4996}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":529388,"byte_end":529401,"line_start":733,"line_end":733,"column_start":62,"column_end":75},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":2062},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":531374,"byte_end":531387,"line_start":794,"line_end":794,"column_start":79,"column_end":92},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":2062},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":532674,"byte_end":532681,"line_start":840,"line_end":840,"column_start":18,"column_end":25},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2090},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\format\\mod.rs","byte_start":534639,"byte_end":534644,"line_start":914,"line_end":914,"column_start":18,"column_end":23},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2134},"to":{"krate":2,"index":7741}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":676929,"byte_end":676930,"line_start":48,"line_end":48,"column_start":25,"column_end":26},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1395},"to":{"krate":0,"index":1391}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":678627,"byte_end":678632,"line_start":102,"line_end":102,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":1399}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":680311,"byte_end":680319,"line_start":149,"line_end":149,"column_start":38,"column_end":46},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1757},"to":{"krate":0,"index":1399}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":683781,"byte_end":683794,"line_start":244,"line_end":244,"column_start":23,"column_end":36},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2072},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\round.rs","byte_start":684373,"byte_end":684386,"line_start":261,"line_end":261,"column_start":28,"column_end":41},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2072},"to":{"krate":1,"index":1642}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":26788,"byte_end":26795,"line_start":646,"line_end":646,"column_start":6,"column_end":13},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2090},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":30786,"byte_end":30793,"line_start":756,"line_end":756,"column_start":23,"column_end":30},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2090},"to":{"krate":2,"index":6215}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":31441,"byte_end":31448,"line_start":773,"line_end":773,"column_start":36,"column_end":43},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2090},"to":{"krate":17,"index":149}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":32387,"byte_end":32404,"line_start":811,"line_end":811,"column_start":21,"column_end":38},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2126},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":36880,"byte_end":36885,"line_start":976,"line_end":976,"column_start":6,"column_end":11},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2134},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":40115,"byte_end":40120,"line_start":1071,"line_end":1071,"column_start":36,"column_end":41},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2134},"to":{"krate":17,"index":149}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":41449,"byte_end":41464,"line_start":1114,"line_end":1114,"column_start":21,"column_end":36},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":2185},"to":{"krate":2,"index":6210}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":44552,"byte_end":44557,"line_start":1228,"line_end":1228,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":1439}},{"span":{"file_name":"C:\\Users\\isaac\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\chrono-0.4.15\\src\\lib.rs","byte_start":48788,"byte_end":48793,"line_start":1346,"line_end":1346,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":1458}}]}